<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ShanSan</title>
    <link>https://yeshan333.github.io/</link>
    
    <atom:link href="https://yeshan333.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>ShanSan&#39;s Blog</description>
    <pubDate>Sun, 13 Jul 2025 15:52:37 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用 n8n 和飞书多维表打造自己的 RSS Feed 订阅管理 &amp; AI 大模型阅读提炼工作流</title>
      <link>https://yeshan333.github.io/2025/07/12/rss-summary-workflow-with-n8n/</link>
      <guid>https://yeshan333.github.io/2025/07/12/rss-summary-workflow-with-n8n/</guid>
      <pubDate>Sat, 12 Jul 2025 23:52:37 GMT</pubDate>
      
      <description>使用 n8n 和飞书多维表打造自己的 RSS Feed 订阅管理 &amp; AI 大模型阅读提炼工作流</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2025 年是 AI 应用大爆发的一年. 最近工作内外, 都在通过一些可视化的低代码平台疯狂搞些基于 AI 的工作流来玩. 试用了 coze、dify、n8n 等几个产品之后, <a href="https://n8n.io/">n8n</a> 的单步调试体验、强大的三方插件深得我心. 而且可以自部署 &amp; 开源（超级高的 star 数量 10w+, 同时意味着社区不会差, 解决问题应该很方便）, 开源自部署版本的功能相比于企业版阉割不算太多, 正好可以用上刚搞的火山引擎的 ECS 4C8G 服务器.</p><p>2024 年 4、5 月的时候曾经拿 <a href="https://elixir-lang.org/">Elixir</a> 撸过一个用于定时跟踪、结合 AI 总结我的 RSS 订阅最新文章, 并将总结内容推送到我的个人 TG 频道的后台应用（我称之为 <strong>rss_generic_i18n_bot</strong>. AI 可以很好的将我订阅的各种语言（中文、英文、日文等）博客/播客整理成精炼的中文, 方便消化, 母语相对于其他语言还是更容易进行信息吸收的. 这个应用我一直用到了现在. 由于代码基本全自己撸的, 现在仍然还有不少 BUG 残留o(╯□╰)o, 缝缝补补~:</p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/rssbot-bug-track.jpg" alt="rssbot-bug-track.jpg"></p><blockquote><p>Elixir 的生态一言难尽~刚开始操作的时候, 都没啥好用的 AI 基础库.</p></blockquote><blockquote><p>可能有小伙伴会有疑惑, 为啥不用诸如 <a href="https://github.com/RSSNext/Folo">Folo</a>、Inoreader 这些强大的可以很方便处理 RSS 信息源的软件. 原因是我本意上想尽可能的少打开一些软件, 就可以很方便的崛取我想要的信息. 所以我将处理后的信息发送到了诸如 TG、钉钉这样经常打开的即时消息软件群组内. 现在的 IM 软件消息展现能力也不差了, 搜索能力也基本够用，不用自己搞一大堆功能了.</p></blockquote><p>最近我使用了 n8n 编排了一个工作流出来, 去替代之前的这个后台应用 *<em>rss_generic_i18n_bot</em>. 遂写篇文章记录一下过程, 也可以给使用 n8n 搭建工作流的小伙伴一点参考.</p><h2 id="%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-n8n" tabindex="-1">使用 docker 部署 n8n</h2><p>最先开始的部分肯定是先部署好 n8n 这个可视化工作流编排平台. 这里给出我使用的 docker-compose 编排文件, 镜像走了 <a href="m.daocloud.io">m.daocloud.io</a> 这个镜像源（国内访问不了 Dockerhub 了, 需要“奇技”）, 速度还可以:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">n8n:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">m.daocloud.io/docker.io/n8nio/n8n</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">n8n</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5678:5678&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/home/node/.n8n</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_HOST=your-domain</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_PORT=5678</span></span><br><span class="line">      <span class="comment"># - N8N_PROTOCOL=https</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NODE_ENV=production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_LOG_OUTPUT=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBHOOK_URL=https://your-domain/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GENERIC_TIMEZONE=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_RUNNERS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">N8N_SECURE_COOKIE=false</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 docker-compose 可以直接启动</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>我将其部署在了火山引擎的 ECS 服务器上, 部署架构如下图:</p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/n8n-deployment.png" alt="n8n-deployment.png"></p><p>我在 n8n 容器的前面套了一层反向代理, 方便我们挂 SSL/TLS 证书和套个防火墙监控我们的流量信息.</p><blockquote><p>注意 n8n 开启了 origin 校验, 反向代理服务器可以通过 <code>proxy_set_header Origin http://127.0.0.1</code> 固定死 n8n Allow 允许的 Origin, 避免在 n8n 编辑面板经常遇到 WebSocket 的 <a href="https://community.n8n.io/t/connection-lost-you-have-a-connection-issue-or-the-server-is-down-n8n-should-reconnect-automatically-once-the-issue-is-resolved/80999">Connection Lost</a> 导致保存不了工作流的问题.</p></blockquote><p>如果没有云服务器的小伙伴也可以参考这篇文章 <a href="https://mp.weixin.qq.com/s/E-WI4fY8cRzFN991_iDTIw">《Cursor一键生成n8n工作流+永久免费「n8n云部署」白嫖与效率齐飞~》</a> 使用 Claw Cloud 将 n8n 部署在海外, 只需要使用 GitHub 注册且 GitHub 已经注册过 180 天以上, 那么就可以每个月获得 5 美元赠送额. 基本够用. 可以说是免费使用 Claw Cloud 部署 n8n 了. 我有一部分需要访问海外服务（如果 Google Sheet）的工作流就用了这种部署方式. 部署很方便, Claw Cloud 内置的 App Store 市场就有快速部署的模板.</p><p>部署完成之后, 就可以进入管理页面, 编排我们的工作流, 接下来介绍如何使用 n8n 和飞书多维表打造自己的 RSS 订阅、AI 阅读整理工作流.</p><h2 id="%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E8%AE%BE%E8%AE%A1" tabindex="-1">工作流的设计</h2><p>经常使用 RSS 管理自己的信息源的小伙伴可能知道, 订阅 RSS Feed 链接和阅读 RSS 源的文章是主要的两个高频动作. 所以我这里主要拆分出了两个工作流来分别完成这两项任务：<strong>RSS 链接的订阅处理工作流</strong>和**基于 AI 大模型 的 RSS 文章信息获取、整理和推送工作流*.</p><h3 id="rss-%E9%93%BE%E6%8E%A5%E7%9A%84%E8%AE%A2%E9%98%85%E5%A4%84%E7%90%86%E5%B7%A5%E4%BD%9C%E6%B5%81" tabindex="-1">RSS 链接的订阅处理工作流</h3><p>RSS 链接的订阅处理工作流, 主要负责基于 n8n 的 Webhook 接收从飞书等即时消息软件发送过来“带 RSS Feed 订阅链接”的消息, 将 RSS Feed 订阅链接存放到飞书的多维表格. 如下图：</p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/rss-feed-workflow.png" alt="rss-feed-workflow.png"></p><ul><li>Webhook 会监听我们发送给飞书机器人的消息, 触发整个流程的执行；</li><li>AI Agent 节点可以处理我们发送给飞书机器人包含 RSS Feed 链接任意格式的消息, 自动抽取订阅链接, 给后续节点提取 RSS 订阅源信息存放到飞书多维表格使用；</li><li>飞书多维表格：作为数据库, 去持久化存储我们所有订阅的订阅链接, 给另外一个工作流去使用.</li></ul><p>在飞书管理订阅链接的效果如下图, 操作的多维表格如下:</p><div class="tag-plugin gallery grid-box" size="mix" ratio="square"></div><p>左图是我们直接在飞书机器人聊天窗口，与应用机器人对话，触发 RSS 订阅管理工作流，触发完成后，可以直接在右图的多维表看到对应的订阅记录。</p><h4 id="%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%BC%96%E6%8E%92%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB" tabindex="-1">工作流编排文件分享</h4><p>这里我们直接给出 n8n json 格式的工作流, 你可以直接复制粘贴到 n8n 的编排面板使用它：</p><details class="tag-plugin colorful folding" ><summary><p>点击我查看</p></summary><div class="body"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;飞书机器人控制 RSS 订阅链接 copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enableResponseOutput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;respondWith&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;responseBody&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123; \n    \&quot;challenge\&quot;: \&quot;&#123;&#123; $json.body.challenge &#125;&#125;\&quot;\n&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.respondToWebhook&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-1960</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0b0f6f7e-6536-4d12-a857-1298beedad66&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu webhook challenge&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;httpMethod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208945ae-e6c1-4300-95c9-ec33780510cc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;responseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;responseNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.webhook&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-2180</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;75f4f05f-eb18-4872-ae7b-a3d63fe4d612&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu Webhook&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;webhookId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208945ae-e6c1-4300-95c9-ec33780510cc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__rl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen3-32b&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cachedResultName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen3-32b&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@n8n/n8n-nodes-langchain.lmChatOpenAi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-1660</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">500</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4420f524-6d40-47f7-9e65-441ca0b48689&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OpenAI Chat Model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;openAiApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8Hmy9d6o6D8KLcY2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Qwen&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable:table:record:add&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_toke&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EEqtbliicaf3qRsgGPFcAxUtn1c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;table_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tbldTrKw4NsMY7Ix&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;\n  \&quot;fields\&quot;: &#123;\n    \&quot;feed_desc\&quot;: \&quot;&#123;&#123; $json.rss.channel.title &#125;&#125;\&quot;,\n    \&quot;feed_url\&quot;: &#123;\n      \&quot;link\&quot;: \&quot;&#123;&#123; $(&#x27;AI Agent 提取订阅链接&#x27;).item.json.output &#125;&#125;\&quot;,\n      \&quot;text\&quot;: \&quot;&#123;&#123; $(&#x27;AI Agent 提取订阅链接&#x27;).item.json.output &#125;&#125;\&quot;\n    &#125;\n  &#125;\n&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-feishu-lite.feishuNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-940</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e265b22-9e2d-4312-8d2d-962a96b99ee1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新增订阅&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;feishuCredentialsApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fxgtoinLSXcxpC2i&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CloudysFeishu Credentials&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $json.output &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.httpRequest&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">4.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-1380</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;80544b7d-e0b0-4638-8f94-c70419171c3f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取 RSS 订阅信息&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dataPropertyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-1160</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a34785d4-0113-410a-9825-80f069f801a2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;抽取 RSS 信息&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;promptType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;define&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=你是一个专业的内容提取助手，我会给一份文本跟你，你的任务就是提取出文本中的 url 链接。然后以字符串的形式返回 url 链接给我。\n\n请提取文本： &#123;&#123; $json.body.event.message.content &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hasOutputParser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@n8n/n8n-nodes-langchain.agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-1740</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f690bdbb-d980-43e6-862d-a0f8b3bbc30d&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI Agent 提取订阅链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alwaysOutputData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message:send&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;receive_id_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chat_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;receive_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $(&#x27;Feishu Webhook&#x27;).item.json.body.event.message.chat_id &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;\n  \&quot;text\&quot;: \&quot;新增订阅成功: &#123;&#123; $(&#x27;AI Agent 提取订阅链接&#x27;).item.json.output &#125;&#125;\&quot;\n&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-feishu-lite.feishuNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">-720</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">280</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;902cf65d-d202-4922-8379-da7193727258&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订阅成功通知&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;feishuCredentialsApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fxgtoinLSXcxpC2i&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CloudysFeishu Credentials&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pinData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Feishu Webhook&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-real-ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;182.92.128.190&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-forwarded-for&quot;</span><span class="punctuation">:</span> <span class="string">&quot;101.126.59.9, 182.92.128.190&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;remote-host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;182.92.128.190&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;close&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content-length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;740&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-forwarded-proto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;user-agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Go-http-client/1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json;charset=utf-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eu_nc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-lark-request-nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;950646929&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-lark-request-timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1752346850&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-lark-signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;885f3a96d196cb195ac9fc69c0fae353dd78ffc2b9cb13c0ecfbee52b4a8f47b&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;x-request-id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;55099ec9-214b-4276-ae4e-0500a75ef83c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;accept-encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;header&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;event_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1290b470b9fa072e63f8f374da25caca&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dFv0WkYeYKF7J4MK1c5tIeETHH6HZ34j&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1752346850837&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;im.message.receive_v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;tenant_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13d149c56acf5740&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;app_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cli_a8f89f0647789013&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;event&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;chat_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;oc_b4cf4d73e02ea650e86c4d2122ce1ec0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;chat_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p2p&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;订阅他[看]  https://supertechfans.com/cn/index.xml\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1752346850599&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;om_x100b481f40ebf8a80e3b6f49fa1a785&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;message_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;update_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1752346850599&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;sender_id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;open_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ou_ec81f38d6e7fdce6132f4605f7a37319&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;union_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on_9d281063b0791d2e40548e25ce854886&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sender_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tenant_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13d149c56acf5740&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;webhookUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://n8n.shan333.cn/webhook/3cc586a2-4c62-47d4-8fd3-e371bde98ba7&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;executionMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;connections&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Feishu Webhook&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu webhook challenge&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Feishu webhook challenge&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI Agent 提取订阅链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OpenAI Chat Model&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ai_languageModel&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI Agent 提取订阅链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai_languageModel&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;获取 RSS 订阅信息&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;抽取 RSS 信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;抽取 RSS 信息&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新增订阅&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AI Agent 提取订阅链接&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取 RSS 订阅信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;新增订阅&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订阅成功通知&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;executionOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;versionId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9d4b7ea7-41ca-47cb-876e-321e6998f537&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;templateCredsSetupCompleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instanceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;94953bffe8f887682af364b4ae4017e69e8558d5f6945655f253530415354041&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BPSFxXw7xiCf46yc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure> </div></details><h4 id="%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F" tabindex="-1">工作流使用注意</h4><ol><li>n8n 官方自带的节点不支持操作飞书的数据, 部署完成后需要先到 <code>Settings -&gt; community-nodes</code> 安装社区的插件: <a href="https://community.n8n.io/t/custom-feishu-node/78169">n8n-nodes-feishu-lite</a>.</li><li>要操作飞书的多维表格需要申请飞书的<a href="https://open.feishu.cn/app">开发者应用</a>, 给改应用分配对应的操作权限, 流程可以参考: <a href="https://open.feishu.cn/document/server-docs/api-call-guide/calling-process/overview">飞书服务端 API 调用流程概述</a> 去获取 n8n-nodes-feishu-lite 插件使用的调用凭证 (Credentials).</li><li>飞书应用需要开通“机器人能力”, 并分配多维表的数据记录创建、读取权限.</li><li>被工作流操作的飞书多维表, 需要添加新创建的应用作为“文档应用”, 并赋予可以编辑的权限.</li><li>飞书应用管理后台添加 n8n Webhook 回调地址, 以便能处理飞书发送给应用机器人的消息.</li></ol><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/bitable-acls.png" alt="bitable-acls"></p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/add-feishu-app-to-bitable.png" alt="add-feishu-app-to-bitable"></p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/add-webhook-to-feishu.png" alt="add-webhook-to-feishu.png"></p><p>接下来看看“基于 AI 大模型 的 RSS 文章信息获取、整理提炼和推送工作流程.</p><h3 id="%E5%9F%BA%E4%BA%8E-ai-%E5%A4%A7%E6%A8%A1%E5%9E%8B-%E7%9A%84-rss-%E6%96%87%E7%AB%A0%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E3%80%81%E6%95%B4%E7%90%86%E5%92%8C%E6%8E%A8%E9%80%81%E5%B7%A5%E4%BD%9C%E6%B5%81" tabindex="-1">基于 AI 大模型 的 RSS 文章信息获取、整理和推送工作流</h3><p>RSS Feed 的订阅处理完成了. 下图的工作流主要用于定时从我们的飞书多维表格中获取订阅的 RSS Feed 链接. 然后逐一读取每一条订阅链接, 获取其最近 3 天发布的新文章内容, 通过 AI 大模型获取文章内容, 整理提炼后, 发送到即时消息软件（TG、飞书）群组内, 发送成功后会将已经发送过的链接记录到多维表中, 便于在发送前判断是否已经处理过这个新链接.</p><p><img src="https://ospy.shan333.cn/blog/n8n_blog_post/rss-summary-workflow.png" alt="rss-summary-workflow.png"></p><p>这个工作流会定时每小时执行一次, 获取 RSS 源新发布的信息, AI 整理提炼后发送到 TG 的效果与 AI 阅读提炼记录多维表结构如下：</p><div class="tag-plugin gallery grid-box" size="mix" ratio="square"></div><p>左图为定时发送到 TG 的 AI 提炼信息，右图为发送记录的飞书多维表。</p><h4 id="%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F-1" tabindex="-1">工作流使用注意</h4><ol><li>确保飞书节点使用的凭证已经在处理 <strong>RSS 链接的订阅处理工作流</strong> 时配置好, 权限要对；</li><li>TG 的通知节点使用到了 bot, 在 TG 可以向 <a href="https://t.me/BotFather">https://t.me/BotFather</a> 申请创建机器人, 在频道或群组发消息需要有对应的权限.</li></ol><h4 id="%E7%BC%96%E6%8E%92%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB" tabindex="-1">编排文件分享</h4><p>这里我们直接给出 n8n json 格式的工作流, 你可以直接复制粘贴到 n8n 的编排面板, 编排调试使用它：</p><details class="tag-plugin colorful folding" ><summary><p>点击我查看</p></summary><div class="body"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;飞书多维表 &amp; RSS 智能总结&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable:table:record:search&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_toke&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EEqtbliicaf3qRsgGPFcAxUtn1c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;table_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tbldTrKw4NsMY7Ix&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;\n  \&quot;field_names\&quot;: [\n    \&quot;feed_url\&quot;,\n    \&quot;feed_desc\&quot;\n  ],\n  \&quot;filter\&quot;: &#123;\n    \&quot;conjunction\&quot;: \&quot;and\&quot;,\n    \&quot;conditions\&quot;: []\n  &#125;\n&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-feishu-lite.feishuNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">260</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">770</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dca798dd-51ec-41c5-8691-20f7868ea9d0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;读取多维表记录，获取 RSS 订阅列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;feishuCredentialsApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9zcGg2DbgzaOg0HP&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu Credentials n8n&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;batchSize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; 1 &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.splitInBatches&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">700</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">770</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d7cf0429-fb00-4a18-b2c6-3733a32b24f6&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Loop Over Items1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alwaysOutputData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;retryOnFail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;waitBetweenTries&quot;</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;onError&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continueRegularOutput&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__rl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen3-235b-a22b&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cachedResultName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen3-235b-a22b&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@n8n/n8n-nodes-langchain.lmChatOpenAi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2020</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">740</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5f53e2c8-29d5-4a46-8e30-3bcec7c0563a&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OpenAI Chat Model&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;openAiApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7Eg9oNn5wpKXU7FP&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alibaba Qwen&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;jsCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;return $input.first().json.data.items;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">480</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">770</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77cb1f74-a1fb-4f6c-97f9-c2dd04da8379&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提取所有订阅链接&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $json.fields.feed_url.link &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.rssFeedRead&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">920</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;959e31f1-7d9d-4018-9b9d-a27154c69aac&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取 RSS 订阅发布的文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;notesInFlow&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;retryOnFail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;waitBetweenTries&quot;</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;onError&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continueRegularOutput&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;notes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如何判断是否有最新的 RSS Feed&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable:table:record:search&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_toke&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EEqtbliicaf3qRsgGPFcAxUtn1c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;table_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tbln3Bh6A6CTtuzv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;\n  \&quot;filter\&quot;: &#123;\n    \&quot;conjunction\&quot;: \&quot;and\&quot;,\n    \&quot;conditions\&quot;: []\n  &#125;\n&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-feishu-lite.feishuNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1360</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7667ee26-4686-4854-9489-924668af2e14&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询已经整理过的 RSS 文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;feishuCredentialsApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9zcGg2DbgzaOg0HP&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu Credentials n8n&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;jsCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\n// 默认认为第一篇即最新的一篇文章\nreturn &#123;\n  \&quot;feed_link\&quot;: $input.first().json.link,\n  \&quot;title\&quot;: $input.first().json.title,\n  \&quot;pub_date\&quot;: new Date($input.first().json.pubDate).getTime()\n&#125;;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1140</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deed99e9-0a50-4a90-8013-12856c546116&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取最新发布的文章&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;jsCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;let urls = $input.first().json.data.items.map(item =&gt; item.fields.url.link)\n\nreturn [\n  &#123;\n    json: &#123;\n      sent_urs: urls,\n      send_url: $(&#x27;获取最新发布的文章&#x27;).first().json.feed_link,\n      title: $(&#x27;获取最新发布的文章&#x27;).first().json.title,\n      pub_date: $(&#x27;获取最新发布的文章&#x27;).first().json.pub_date\n    &#125;\n  &#125;\n];&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1580</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2b6078c2-95b9-491e-87c6-b79da64c657d&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;聚合代发送信息和已发送信息&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;caseSensitive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;leftValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;typeValidation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;strict&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c931be49-c9c9-42e8-a97a-2758e06cb519&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;leftValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $json.pub_date &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;rightValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; Date.now() - 3 * 24 * 60 * 60 * 1000 &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;operator&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gt&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e58720d-c671-4eda-b1b4-968556db1bc2&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;leftValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $json.sent_urs &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;rightValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;&#123; $json.send_url &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;operator&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;array&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;notContains&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;rightType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;any&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;combinator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;and&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.if&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1800</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7957932e-bc1a-4d2a-8c10-888452d45371&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;过滤最近 3 天发布 &amp; 并且没有整理过的文章&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;chatId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1002056221907&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&lt;strong&gt;&#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.title &#125;&#125;&lt;/strong&gt;\n\n&#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.send_url &#125;&#125;\n\nSummary:\n\n&#123;&#123; $json.output &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;additionalFields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;parse_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HTML&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.telegram&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2460</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;196939c8-5d46-4a03-9a86-95f755ff34ea&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发送最新文章到 TG 频道&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;webhookId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ea5f5231-946a-4847-ab40-73caeba82e38&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;telegramApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ryEUflPWvRynMmig&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Telegram account&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sseEndpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.api-inference.modelscope.net/521f5eb00f1d4d/sse&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@n8n/n8n-nodes-langchain.mcpClientTool&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2260</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">740</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3ed34103-cb9f-4edf-9ab8-0fb96535ba5b&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fetch tool&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitable:table:record:add&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;app_toke&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EEqtbliicaf3qRsgGPFcAxUtn1c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;table_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tbln3Bh6A6CTtuzv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=&#123;\n  \&quot;fields\&quot;: &#123;\n    \&quot;title\&quot;: \&quot;&#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.title &#125;&#125;\&quot;,\n    \&quot;url\&quot;: &#123;\n      \&quot;link\&quot;: \&quot;&#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.send_url &#125;&#125;\&quot;,\n      \&quot;text\&quot;: \&quot;&#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.send_url &#125;&#125;\&quot;\n    &#125;,\n    \&quot;pubDate\&quot;: &#123;&#123; $(&#x27;过滤最近 3 天发布 &amp; 并且没有整理过的文章&#x27;).item.json.pub_date &#125;&#125;\n  &#125;\n&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-feishu-lite.feishuNode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2680</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">640</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;42d2aca4-5570-4c3e-96d8-79b4d731f5eb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;记录文章已经被整理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;feishuCredentialsApi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9zcGg2DbgzaOg0HP&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Feishu Credentials n8n&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;rule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hours&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;n8n-nodes-base.scheduleTrigger&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">780</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1533c646-66e2-4db5-a33b-20e0a25f5969&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Schedule Trigger&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;promptType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;define&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;=要提炼的 url 如下：\n\n&#123;&#123; $json.send_url &#125;&#125;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;systemMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一个专业的内容总结助手，可以根据我提供给的 url 使用 fetch 工具获取 url 的网页内容，然后提炼出要点精华，并且要保证内容完整，不丢失文章信息。语言务必使用中文。最后输出的文本格式为 Telegram 支持的 HTML 格式，不要出现不支持的 HTML 标签。\n\n要求：使用 fetch 工具获取的网页内容要完整。最终总结输出格式不能出现 Telegram 不支持的 HTML 标签。\n\n在总结文章时，请遵循以下指南：\n1. 通读全文，理解文章的主旨和核心观点。\n2. 找出文章中的关键信息，如主要事件、重要数据、核心论点等。\n3. 用简洁明了的语言将关键信息组织起来，形成一篇连贯的总结。\n4. 避免包含文章中的细节和例子，除非它们对理解核心观点至关重要。\n5. 确保总结涵盖了文章的所有重要方面，不遗漏关键信息。\n\nTelegram 支持的 HTML 标签如下：\n&lt;b&gt;bold&lt;/b&gt;, &lt;strong&gt;bold&lt;/strong&gt;\n&lt;i&gt;italic&lt;/i&gt;, &lt;em&gt;italic&lt;/em&gt;\n&lt;u&gt;underline&lt;/u&gt;, &lt;ins&gt;underline&lt;/ins&gt;\n&lt;s&gt;strikethrough&lt;/s&gt;, &lt;strike&gt;strikethrough&lt;/strike&gt;, &lt;del&gt;strikethrough&lt;/del&gt;\n&lt;span class=\&quot;tg-spoiler\&quot;&gt;spoiler&lt;/span&gt;, &lt;tg-spoiler&gt;spoiler&lt;/tg-spoiler&gt;\n&lt;b&gt;bold &lt;i&gt;italic bold &lt;s&gt;italic bold strikethrough &lt;span class=\&quot;tg-spoiler\&quot;&gt;italic bold strikethrough spoiler&lt;/span&gt;&lt;/s&gt; &lt;u&gt;underline italic bold&lt;/u&gt;&lt;/i&gt; bold&lt;/b&gt;\n&lt;a href=\&quot;http://www.example.com/\&quot;&gt;inline URL&lt;/a&gt;\n&lt;a href=\&quot;tg://user?id=123456789\&quot;&gt;inline mention of a user&lt;/a&gt;\n&lt;tg-emoji emoji-id=\&quot;5368324170671202286\&quot;&gt;👍&lt;/tg-emoji&gt;\n&lt;code&gt;inline fixed-width code&lt;/code&gt;\n&lt;pre&gt;pre-formatted fixed-width code block&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\&quot;language-python\&quot;&gt;pre-formatted fixed-width code block written in the Python programming language&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;Block quotation started\\nBlock quotation continued\\nThe last line of the block quotation&lt;/blockquote&gt;\n&lt;blockquote expandable&gt;Expandable block quotation started\\nExpandable block quotation continued\\nExpandable block quotation continued\\nHidden by default part of the block quotation started\\nExpandable block quotation continued\\nThe last line of the block quotation&lt;/blockquote&gt;\n\n严禁是使用 HTML 标签: &lt;ul&gt;、&lt;li&gt;、&lt;br&gt;、&lt;p&gt;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@n8n/n8n-nodes-langchain.agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2060</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">520</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;99c120dd-baec-469d-8315-709488188464&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Summary AI Agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;onError&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continueRegularOutput&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pinData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Schedule Trigger&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-06T11:00:58.007-04:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Readable date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;July 6th 2025, 11:00:58 am&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Readable time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11:00:58 am&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Day of week&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sunday&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Year&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Month&quot;</span><span class="punctuation">:</span> <span class="string">&quot;July&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Day of month&quot;</span><span class="punctuation">:</span> <span class="string">&quot;06&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Hour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Minute&quot;</span><span class="punctuation">:</span> <span class="string">&quot;00&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Second&quot;</span><span class="punctuation">:</span> <span class="string">&quot;58&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Timezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;America/New_York (UTC-04:00)&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;connections&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Loop Over Items1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取 RSS 订阅发布的文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OpenAI Chat Model&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ai_languageModel&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Summary AI Agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai_languageModel&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;读取多维表记录，获取 RSS 订阅列表&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提取所有订阅链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;提取所有订阅链接&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Loop Over Items1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;获取 RSS 订阅发布的文章&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取最新发布的文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;查询已经整理过的 RSS 文章&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;聚合代发送信息和已发送信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;获取最新发布的文章&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询已经整理过的 RSS 文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;聚合代发送信息和已发送信息&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;过滤最近 3 天发布 &amp; 并且没有整理过的文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;过滤最近 3 天发布 &amp; 并且没有整理过的文章&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Summary AI Agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Loop Over Items1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;发送最新文章到 TG 频道&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;记录文章已经被整理&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fetch tool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ai_tool&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Summary AI Agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai_tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;记录文章已经被整理&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Loop Over Items1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Schedule Trigger&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;读取多维表记录，获取 RSS 订阅列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Summary AI Agent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发送最新文章到 TG 频道&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;executionOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;versionId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bcb9ad0a-6964-473c-9b5e-c1d03e2fb850&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;templateId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;self-building-ai-agent&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;templateCredsSetupCompleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instanceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1c9ed367917141e075921fdbc6cbe734bce9dde165b1e3a672c9dd236366be6c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sz06Yz8CTSIkC0ji&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure> </div></details><h2 id="%E7%BB%93%E8%AF%AD" tabindex="-1">结语</h2><p>好啦~, 本次分享暂时结束 ღ( ´･ᴗ･` ), 期望看到的小伙伴能玩得更花. 舒服~, 对于性能不敏感的场景, 搞下 n8n 也不错滴.</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/AI/">AI</category>
      
      
      <category domain="https://yeshan333.github.io/tags/AI/">AI</category>
      
      <category domain="https://yeshan333.github.io/tags/n8n/">n8n</category>
      
      <category domain="https://yeshan333.github.io/tags/%E9%A3%9E%E4%B9%A6%E5%A4%9A%E7%BB%B4%E8%A1%A8/">飞书多维表</category>
      
      <category domain="https://yeshan333.github.io/tags/RSS/">RSS</category>
      
      
      <comments>https://yeshan333.github.io/2025/07/12/rss-summary-workflow-with-n8n/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【体验】使用 GitHub Copilot Agent 创建新的 RSSHub 路由</title>
      <link>https://yeshan333.github.io/2025/04/20/use-github-copilot-to-create-rsshub-route/</link>
      <guid>https://yeshan333.github.io/2025/04/20/use-github-copilot-to-create-rsshub-route/</guid>
      <pubDate>Sun, 20 Apr 2025 18:54:12 GMT</pubDate>
      
      <description>使用 GitHub Copilot Agent 创建新的 RSSHub 路由</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>RSS Really Simple Syndication（简易信息聚合）是一种订阅某个网站内容更新的协议，目前用的没那么多了，很多网站也不提供 RSS 订阅了.</p><p>RSSHub 是一个强大的 RSS 订阅源制作工作，通过它我们可以很方便为任意网站制作 RSS. RSSHub 的生态非常丰富, 文档也较为完善. 不过根据 RSSHub 的开发指南，想要开发出一个 RSS route 路由 (RSS 订阅源)，还是需要一点背景知识。</p><p>目前正处于 AI 应用极为火热的时代，作为喜欢偷懒的程序员，当然要借助大模型的力量快速完成开发. 恰逢 GitHub Copilot 4 月份发布了类似 Cursor 的 Code Agent 模式，同时支持了 MCP 协议. 我们已经可以很方便的在 vscode 中使用 Agent 模式快速为一个网站开发出 RSS 路由. 我们所要做的，只需要将对应的 RSSHub 开发知识作为 Context 灌输给 Agent 即可，让 Agent 具备对应的开发知识.</p><p>让我们开始吧~</p><h2 id="%E7%BC%96%E5%86%99-prompt" tabindex="-1">编写 prompt</h2><p>第一步，首先就是编写 prompt, 对于 Prompt，我们也可以通过 AI 帮我们生成（主打一个偷懒<sub>/(ㄒoㄒ)/</sub>~），这里我使用了 X 的 <a href="https://grok.com/">Grok3</a> 去生成一个 RSSHub 路由制作专家的 prompt 提示词:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">告诉 grok</span></span><br><span class="line">根据 https://raw.githubusercontent.com/RSSNext/rsshub-docs/refs/heads/main/src/joinus/new-rss/start-code.md 的内容，帮我创建一个 RSSHub 路由制作专家的 prompt. 注意以 markdown 格式返回给我.</span><br></pre></td></tr></table></figure><p>现在的各种 LLM 大模型对话平台的能力已经很强了，只要给一个 URL 就会帮我访问获取对应网站内容，根据网站内容和用户意图，完成各种工作.</p><p>最终 Grok3 给我的回复如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># RSSHub 路由制作专家 Prompt</span></span><br><span class="line"></span><br><span class="line">你是一位 RSSHub 路由制作专家，精通使用 Node.js、ofetch、Cheerio 等工具，根据 RSSHub 官方文档（https://raw.githubusercontent.com/RSSNext/rsshub-docs/refs/heads/main/src/joinus/new-rss/start-code.md）创建高质量的 RSS 路由。你的任务是帮助用户设计、编写和调试 RSSHub 路由代码，确保代码符合 RSSHub 的脚本标准，生成符合 RSS 2.0 规范的订阅源。</span><br><span class="line"></span><br><span class="line"><span class="section">## 任务要求</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**理解用户需求**</span>：</span><br><span class="line"><span class="bullet">   -</span> 分析用户提供的目标网站或 API，确定数据来源（API、HTML 网页等）。</span><br><span class="line"><span class="bullet">   -</span> 确认目标网站是否已提供 RSS 订阅（如 HTML 头部包含 <span class="code">`&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; /&gt;`</span>），若有则无需创建路由。</span><br><span class="line"><span class="bullet">   -</span> 提取用户需要的 RSS 内容（如标题、链接、描述、发布日期等）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**路由设计**</span>：</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**命名空间**</span>：根据目标网站的二级域名创建命名空间（如 <span class="code">`github`</span> 用于 <span class="code">`github.com`</span>），避免重复或变体命名空间。</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**路由路径**</span>：设计清晰的路由路径，支持动态参数（如 <span class="code">`/github/issue/:user/:repo`</span>），并确保路径符合 Hono 路由规则。</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**参数处理**</span>：使用 <span class="code">`ctx.req.param()`</span> 获取动态参数，并设置合理的默认值（如 <span class="code">`repo = &#x27;RSSHub&#x27;`</span>）。</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**RSSHub Radar**</span>：为路由配置 <span class="code">`radar.js`</span>，便于用户通过 RSSHub Radar 浏览器扩展订阅。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**数据获取**</span>：</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**优先级**</span>：优先使用 API 获取数据，因其稳定且高效；若无 API，则通过 <span class="code">`ofetch`</span> 获取 HTML 并用 Cheerio 解析。</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**工具使用**</span>：</span><br><span class="line"><span class="bullet">     -</span> 使用 <span class="code">`@/utils/ofetch`</span> 发送 HTTP 请求（如 GET 请求至 <span class="code">`https://api.github.com/repos/$&#123;user&#125;/$&#123;repo&#125;/issues`</span>）。</span><br><span class="line"><span class="bullet">     -</span> 使用 Cheerio 解析 HTML，提取所需元素（如标题、链接等）。</span><br><span class="line"><span class="bullet">     -</span> 若需渲染动态页面，可考虑 <span class="code">`puppeteer`</span>，但仅在必要时使用。</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**异常处理**</span>：确保代码处理 HTTP 请求失败、数据缺失等情况，输出清晰的错误信息。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> <span class="strong">**RSS 格式化**</span>：</span><br><span class="line"><span class="bullet">   -</span> 生成符合 RSS 2.0 规范的输出，包含以下字段：</span><br><span class="line"><span class="bullet">     -</span> <span class="code">`title`</span>：频道标题（如 <span class="code">`$&#123;user&#125;/$&#123;repo&#125; Issues`</span>）。</span><br><span class="line"><span class="bullet">     -</span> <span class="code">`link`</span>：频道链接（如 <span class="code">`https://github.com/$&#123;user&#125;/$&#123;repo&#125;/issues`</span>）。</span><br><span class="line"><span class="bullet">     -</span> <span class="code">`description`</span>：频道描述（可选）。</span><br><span class="line"><span class="bullet">     -</span> <span class="code">`item`</span>：文章列表，每项包含 <span class="code">`title`</span>、<span class="code">`link`</span>、<span class="code">`description`</span>、<span class="code">`pubDate`</span> 等。</span><br><span class="line"><span class="bullet">   -</span> 将数据赋值给 <span class="code">`ctx.state.data`</span>，由 RSSHub 中间件自动渲染。</span><br><span class="line"><span class="bullet">   -</span> 支持扩展功能（如 Sci-hub、Podcast、Media RSS、BitTorrent），通过设置 <span class="code">`supportSciHub`</span>、<span class="code">`supportPodcast`</span>、<span class="code">`supportBT`</span> 等属性。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> <span class="strong">**代码规范**</span>：</span><br><span class="line"><span class="bullet">   -</span> 遵循 RSSHub Script Standard，确保代码可读性高、易于维护。</span><br><span class="line"><span class="bullet">   -</span> 在 <span class="code">`lib/routes/&lt;namespace&gt;/&lt;route&gt;.ts`</span> 中注册路由，返回符合 <span class="code">`Route`</span> 类型的对象。</span><br><span class="line"><span class="bullet">   -</span> 添加路由描述（<span class="code">`description`</span>）、分类（<span class="code">`categories`</span>）、功能（<span class="code">`features`</span>）等元数据。</span><br><span class="line"><span class="bullet">   -</span> 更新 <span class="code">`maintainer.js`</span>，记录路由维护者信息。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> <span class="strong">**调试与测试**</span>：</span><br><span class="line"><span class="bullet">   -</span> 在本地运行 RSSHub（<span class="code">`yarn dev`</span> 或 <span class="code">`npm run dev`</span>），访问 <span class="code">`http://localhost:1200`</span> 查看路由效果。</span><br><span class="line"><span class="bullet">   -</span> 检查控制台输出，捕获错误信息并优化代码。</span><br><span class="line"><span class="bullet">   -</span> 使用 RSSHub Radar 验证路由的可订阅性。</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> <span class="strong">**文档与社区**</span>：</span><br><span class="line"><span class="bullet">   -</span> 为路由编写清晰的文档，说明参数、功能和使用方法。</span><br><span class="line"><span class="bullet">   -</span> 鼓励用户提交 Pull Request 或向社区求助（如 RSSHub Telegram 群组）。</span><br></pre></td></tr></table></figure><p>拿到了 Prompt 之后，接下来我们需要将它注入到 GitHub Copilot Agent 的代码生成指令上下文中，这里可以参考 <a href="https://code.visualstudio.com/docs/copilot/copilot-customization#_reusable-prompt-files-experimental">Custom instructions for GitHub Copilot in VS Code</a>. 接下来，我们将会基于这个 prompt 指挥 Agent 进行 RSSHub Route 路由的开发.</p><h2 id="%E8%AE%A9-github-copilot-agent-%E8%87%AA%E5%8A%A8%E7%BC%96%E7%A0%81%E5%AE%9E%E7%8E%B0-rsshub-route" tabindex="-1">让 GitHub Copilot Agent 自动编码实现 RSSHub Route</h2><p>编码开始前，我们当然需要自己准备对应的 RSSHub 开发环境，这里可以参考 <a href="https://docs.rsshub.app/joinus/new-rss/prerequisites">https://docs.rsshub.app/joinus/new-rss/prerequisites</a>，主要是需要安装 Node.js 和 pnpm. 代码编辑器我们使用的是 vscode. 开发环境为 Windows 11.</p><ol><li><p>Fork RSSHub 的代码仓库: <a href="https://github.com/DIYgod/RSSHub/fork">https://github.com/DIYgod/RSSHub/fork</a></p></li><li><p>下载 fork 后的仓库到本地开发环境，安装依赖:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yeshan333/RSSHub.git</span><br><span class="line"></span><br><span class="line">cd RSSHub</span><br><span class="line"></span><br><span class="line">pnpm install</span><br></pre></td></tr></table></figure><ol start="3"><li>将 Grok AI 生成的 RSSHub 路由开发专家 prompt 放到开发目录的 <code>.vscode/prompts</code> 子目录中:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p .vscode/prompts</span><br><span class="line">touch .vscode/prompts/rsshub.prompt.md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制粘贴 prompt 到文件 vscode/prompts/rsshub.prompt.md 中</span></span><br></pre></td></tr></table></figure><ol start="4"><li>vscode 打开 GitHub Copilot 指挥 Agent 开发网站 <a href="https://elixirmerge.com/">https://elixirmerge.com/</a> 的 RSSHub 路由:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我生成这个网站的 RSSHub 路由: https://elixirmerge.com/</span><br></pre></td></tr></table></figure><p>这里我们使用的模型是 Claude 3.7 Sonnet.</p><h2 id="%E6%95%88%E6%9E%9C" tabindex="-1">效果</h2><p><img src="https://ospy.shan333.cn/blog/rsshub-route-with-copilot-agent.jpg" alt="https://ospy.shan333.cn/blog/rsshub-route-with-copilot-agent.jpg"></p><p>可以看到 Agent 会帮我创建好对应的源文件，不过仔细观察生成的代码还是需要调整的，这里调整也可以继续完善 prompt，如果想要一句话实现 RSSHub 路由，应该还需要不少的调优动作, 这里我拿到的 AI 生成代码如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cache <span class="keyword">from</span> <span class="string">&#x27;@/utils/cache&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> got <span class="keyword">from</span> <span class="string">&#x27;@/utils/got&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; load &#125; <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; parseDate &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/parse-date&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">route</span>: <span class="title class_">Route</span> = &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">categories</span>: [<span class="string">&#x27;programming&#x27;</span>],</span><br><span class="line">    <span class="attr">example</span>: <span class="string">&#x27;/elixirmerge&#x27;</span>,</span><br><span class="line">    <span class="attr">parameters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">features</span>: &#123;</span><br><span class="line">        <span class="attr">requireConfig</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">requirePuppeteer</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">antiCrawler</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportBT</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportPodcast</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportScihub</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">radar</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">source</span>: [<span class="string">&#x27;elixirmerge.com/&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Latest Articles&#x27;</span>,</span><br><span class="line">    <span class="attr">maintainers</span>: [],</span><br><span class="line">    handler,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;elixirmerge.com/&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://elixirmerge.com/&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">got</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $ = <span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> list = $(<span class="string">&#x27;article&#x27;</span>).<span class="title function_">toArray</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">        list.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> $item = $(item);</span><br><span class="line">            <span class="keyword">const</span> $link = $item.<span class="title function_">find</span>(<span class="string">&#x27;a[href]&#x27;</span>).<span class="title function_">first</span>();</span><br><span class="line">            <span class="keyword">const</span> link = <span class="keyword">new</span> <span class="title function_">URL</span>($link.<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>) || <span class="string">&#x27;&#x27;</span>, url).<span class="property">href</span>;</span><br><span class="line">            <span class="keyword">const</span> title = $item.<span class="title function_">find</span>(<span class="string">&#x27;h2&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">            <span class="keyword">const</span> pubDateStr = $item.<span class="title function_">find</span>(<span class="string">&#x27;time&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Extract description directly from the article preview</span></span><br><span class="line">            <span class="keyword">const</span> description = $item.<span class="title function_">find</span>(<span class="string">&#x27;.content, p&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title,</span><br><span class="line">                link,</span><br><span class="line">                <span class="attr">pubDate</span>: <span class="title function_">parseDate</span>(pubDateStr, <span class="string">&#x27;MMM DD, YYYY&#x27;</span>),</span><br><span class="line">                description,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Elixir Merge - Latest Articles&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>: url,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Latest updates from Elixir Merge - The daily Elixir development newsletter&#x27;</span>,</span><br><span class="line">        <span class="attr">item</span>: items,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动开发环境调试服务器，看看还需要什么 (仔细观察代码结合 RSSHub 的路由开发指南，代码一看就有问题).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:1200/elixirmerge">http://localhost:1200/elixirmerge</a>，可以观察到实现并不完备. emmm, 看来得来多几轮对话才行. 结合经验 HTML 抽取的不对，我们使用如下指令让 AI 继续优化下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细阅读 https://elixirmerge.com/ 的 HTML 结构，重构代码</span><br></pre></td></tr></table></figure><p>最终生成的 route 终于可用了~，效果如下：</p><p><img src="https://ospy.shan333.cn/blog/final-result-github-copilot-rsshub-route.jpg" alt="final-result-github-copilot-rsshub-route"></p><p>路由代码如下，质量还凑合：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cache <span class="keyword">from</span> <span class="string">&#x27;@/utils/cache&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> got <span class="keyword">from</span> <span class="string">&#x27;@/utils/got&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; load &#125; <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; parseDate &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/parse-date&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">route</span>: <span class="title class_">Route</span> = &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/updates&#x27;</span>,</span><br><span class="line">    <span class="attr">categories</span>: [<span class="string">&#x27;programming&#x27;</span>],</span><br><span class="line">    <span class="attr">example</span>: <span class="string">&#x27;/elixirmerge/updates&#x27;</span>,</span><br><span class="line">    <span class="attr">parameters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">features</span>: &#123;</span><br><span class="line">        <span class="attr">requireConfig</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">requirePuppeteer</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">antiCrawler</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportBT</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportPodcast</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">supportScihub</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">radar</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">source</span>: [<span class="string">&#x27;elixirmerge.com/&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Latest Articles&#x27;</span>,</span><br><span class="line">    <span class="attr">maintainers</span>: [],</span><br><span class="line">    handler,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;elixirmerge.com&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;Get the latest articles from Elixir Merge, a daily Elixir development newsletter.&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://elixirmerge.com/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">got</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $ = <span class="title function_">load</span>(response.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新实现文章提取逻辑，更加精确地定位文章元素</span></span><br><span class="line">    <span class="keyword">const</span> articles = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法1：获取带有日期的文章条目</span></span><br><span class="line">    $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;div, article&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">_, element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $element = $(element);</span><br><span class="line">        <span class="comment">// 寻找包含日期格式文本的元素</span></span><br><span class="line">        <span class="keyword">const</span> dateText = $element.<span class="title function_">text</span>().<span class="title function_">match</span>(<span class="regexp">/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d&#123;1,2&#125;,\s\d&#123;4&#125;/</span>)?.[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dateText) &#123;</span><br><span class="line">            <span class="comment">// 查找标题和描述</span></span><br><span class="line">            <span class="keyword">const</span> fullText = $element.<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">            <span class="keyword">const</span> parts = fullText.<span class="title function_">split</span>(dateText);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (parts.<span class="property">length</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> title = parts[<span class="number">0</span>].<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 确保这是一个有效的文章条目，而不是导航或其他元素</span></span><br><span class="line">                <span class="keyword">if</span> (title.<span class="property">length</span> &gt; <span class="number">10</span> &amp;&amp; title !== <span class="string">&#x27;Subscribe&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> description = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查当前元素或前一个元素是否包含描述文本</span></span><br><span class="line">                    <span class="keyword">const</span> prevElement = $element.<span class="title function_">prev</span>();</span><br><span class="line">                    <span class="keyword">if</span> (prevElement.<span class="title function_">text</span>().<span class="property">length</span> &gt; <span class="number">20</span> &amp;&amp; !prevElement.<span class="title function_">text</span>().<span class="title function_">includes</span>(<span class="string">&#x27;Subscribe&#x27;</span>)) &#123;</span><br><span class="line">                        description = prevElement.<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从标题生成 slug</span></span><br><span class="line">                    <span class="keyword">const</span> slug = title</span><br><span class="line">                        .<span class="title function_">toLowerCase</span>()</span><br><span class="line">                        .<span class="title function_">replace</span>(<span class="regexp">/[^\w\s-]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        .<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> link = <span class="string">`https://elixirmerge.com/p/<span class="subst">$&#123;slug&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">                    articles.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        title,</span><br><span class="line">                        link,</span><br><span class="line">                        <span class="attr">pubDate</span>: <span class="title function_">parseDate</span>(dateText, <span class="string">&#x27;MMM D, YYYY&#x27;</span>),</span><br><span class="line">                        <span class="attr">description</span>: description || title,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2：获取特色文章（通常有更结构化的内容）</span></span><br><span class="line">    $(<span class="string">&#x27;a:contains(&quot;Continue reading&quot;)&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">_, element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $parent = $(element).<span class="title function_">closest</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从父元素中提取标题、描述和日期</span></span><br><span class="line">        <span class="keyword">let</span> title = $parent.<span class="title function_">find</span>(<span class="string">&#x27;h1, h2, h3&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span> (!title) &#123;</span><br><span class="line">            <span class="comment">// 有时标题可能在相邻元素中</span></span><br><span class="line">            <span class="keyword">const</span> $container = $parent.<span class="title function_">parent</span>();</span><br><span class="line">            title = $container.<span class="title function_">find</span>(<span class="string">&#x27;h1, h2, h3&#x27;</span>).<span class="title function_">first</span>().<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取描述</span></span><br><span class="line">        <span class="keyword">let</span> description = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        $parent.<span class="title function_">find</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">_, p</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> text = $(p).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">            <span class="keyword">if</span> (text.<span class="property">length</span> &gt; <span class="number">30</span>) &#123; <span class="comment">// 避免短文本，如日期或作者</span></span><br><span class="line">                description = text;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 获取第一个长段落</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取日期</span></span><br><span class="line">        <span class="keyword">const</span> dateMatch = $parent.<span class="title function_">text</span>().<span class="title function_">match</span>(<span class="regexp">/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d&#123;1,2&#125;,\s\d&#123;4&#125;/</span>);</span><br><span class="line">        <span class="keyword">const</span> dateText = dateMatch ? dateMatch[<span class="number">0</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (title &amp;&amp; dateText) &#123;</span><br><span class="line">            <span class="keyword">const</span> slug = title</span><br><span class="line">                .<span class="title function_">toLowerCase</span>()</span><br><span class="line">                .<span class="title function_">replace</span>(<span class="regexp">/[^\w\s-]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                .<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> link = <span class="string">`https://elixirmerge.com/p/<span class="subst">$&#123;slug&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">            articles.<span class="title function_">push</span>(&#123;</span><br><span class="line">                title,</span><br><span class="line">                link,</span><br><span class="line">                <span class="attr">pubDate</span>: <span class="title function_">parseDate</span>(dateText, <span class="string">&#x27;MMM D, YYYY&#x27;</span>),</span><br><span class="line">                <span class="attr">description</span>: description || title,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法3：查找包含日期的组合结构</span></span><br><span class="line">    $(<span class="string">&#x27;.grid, .flex, .container, main&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">_, container</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $container = $(container);</span><br><span class="line">        <span class="keyword">const</span> dateMatch = $container.<span class="title function_">text</span>().<span class="title function_">match</span>(<span class="regexp">/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d&#123;1,2&#125;,\s\d&#123;4&#125;/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dateMatch &amp;&amp; $container.<span class="title function_">text</span>().<span class="property">length</span> &gt; <span class="number">50</span> &amp;&amp; $container.<span class="title function_">text</span>().<span class="property">length</span> &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> dateText = dateMatch[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> title = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> description = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 尝试从结构中获取标题和描述</span></span><br><span class="line">            $container.<span class="title function_">children</span>().<span class="title function_">each</span>(<span class="function">(<span class="params">_, child</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> text = $(child).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line">                <span class="keyword">if</span> (!title &amp;&amp; text.<span class="property">length</span> &gt; <span class="number">10</span> &amp;&amp; !text.<span class="title function_">includes</span>(dateText)) &#123;</span><br><span class="line">                    title = text;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (title &amp;&amp; text.<span class="property">length</span> &gt; <span class="number">30</span> &amp;&amp; !text.<span class="title function_">includes</span>(dateText)) &#123;</span><br><span class="line">                    description = text;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!title) &#123;</span><br><span class="line">                <span class="comment">// 备选方法：从全文中提取标题</span></span><br><span class="line">                <span class="keyword">const</span> fullText = $container.<span class="title function_">text</span>().<span class="title function_">replace</span>(dateText, <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>();</span><br><span class="line">                <span class="keyword">const</span> lines = fullText.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">line</span> =&gt;</span> line.<span class="title function_">trim</span>()).<span class="title function_">filter</span>(<span class="function"><span class="params">line</span> =&gt;</span> line);</span><br><span class="line">                <span class="keyword">if</span> (lines.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    title = lines[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (lines.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        description = lines.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (title &amp;&amp; title !== <span class="string">&#x27;Subscribe&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> slug = title</span><br><span class="line">                    .<span class="title function_">toLowerCase</span>()</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/[^\w\s-]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> link = <span class="string">`https://elixirmerge.com/p/<span class="subst">$&#123;slug&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">                articles.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    title,</span><br><span class="line">                    link,</span><br><span class="line">                    <span class="attr">pubDate</span>: <span class="title function_">parseDate</span>(dateText, <span class="string">&#x27;MMM D, YYYY&#x27;</span>),</span><br><span class="line">                    <span class="attr">description</span>: description || title,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重，因为可能有重复的文章</span></span><br><span class="line">    <span class="keyword">const</span> uniqueArticles = [];</span><br><span class="line">    <span class="keyword">const</span> titleSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> article <span class="keyword">of</span> articles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!titleSet.<span class="title function_">has</span>(article.<span class="property">title</span>)) &#123;</span><br><span class="line">            titleSet.<span class="title function_">add</span>(article.<span class="property">title</span>);</span><br><span class="line">            uniqueArticles.<span class="title function_">push</span>(article);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按发布日期排序，最新的在前</span></span><br><span class="line">    uniqueArticles.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">pubDate</span>).<span class="title function_">getTime</span>() - <span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">pubDate</span>).<span class="title function_">getTime</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只保留最新的 30 篇文章</span></span><br><span class="line">    <span class="keyword">const</span> latestArticles = uniqueArticles.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Elixir Merge - Daily Elixir Newsletter&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>: url,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;The latest updates from Elixir Merge - A daily newsletter with the best Elixir content in just 5 minutes&#x27;</span>,</span><br><span class="line">        <span class="attr">item</span>: latestArticles,</span><br><span class="line">        <span class="attr">language</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Colipot-Agent/">Colipot Agent</category>
      
      
      <category domain="https://yeshan333.github.io/tags/LLM/">LLM</category>
      
      <category domain="https://yeshan333.github.io/tags/Copilot/">Copilot</category>
      
      <category domain="https://yeshan333.github.io/tags/RSSHub/">RSSHub</category>
      
      <category domain="https://yeshan333.github.io/tags/Code-Agent/">Code Agent</category>
      
      
      <comments>https://yeshan333.github.io/2025/04/20/use-github-copilot-to-create-rsshub-route/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 mcp-agent 框架和百炼通义千问大模型构建基于 MCP 协议的网页总结智能代理 (agent)</title>
      <link>https://yeshan333.github.io/2025/03/23/build-agent-with-mcp-agent-and-qwen/</link>
      <guid>https://yeshan333.github.io/2025/03/23/build-agent-with-mcp-agent-and-qwen/</guid>
      <pubDate>Sun, 23 Mar 2025 17:49:46 GMT</pubDate>
      
      <description>使用 mcp-agent 框架和百炼大模型构建基于 MCP 协议的网页总结智能代理 (agent)</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近 MCP 协议 (Model Context Protocol) 很火, 不少 AI 框架还有各种智能工具已经支持了 MCP 协议, 插拔各种 MCP Server 来提升大模型的能力. 目前快速糊出来一个 agent 也越来越简单了。本篇文章将会介绍如何通过 <a href="https://github.com/lastmile-ai/mcp-agent">mcp-agent</a> 这个完全基于 MCP 协议的应用框架来搭建一个用于网页总结的智能 agent 代理.</p><blockquote><p>如果你还不了解 MCP 协议, 那么 MCP 协议的官方文档值的你去读一读 -&gt; <a href="https://modelcontextprotocol.io/introduction">modelcontextprotocol</a>.</p></blockquote><h2 id="%E4%BB%80%E4%B9%88-mcp-agent" tabindex="-1">什么 mcp-agent</h2><p><a href="https://github.com/lastmile-ai/mcp-agent">mcp-agent: https://github.com/lastmile-ai/mcp-agent</a> 是一个基于 MCP 协议简单的、可组合的框架, 可用于快速构建智能代理 (agent).</p><p>它支持了 Anthropic 在 2024 年末发表的 <a href="https://www.anthropic.com/engineering/building-effective-agents">《Building effective agents - 构建高效代理》</a> 一文提到的所有用于构建高效 agent 代理的最佳实践、模式. 很值得拿 mcp-agent 来学习下相关模式.</p><blockquote><p>Anthropic 就是发布了大名鼎鼎的 Claude 系列模型的公司.</p></blockquote><h2 id="%E6%9E%84%E5%BB%BA%E7%BD%91%E9%A1%B5%E6%80%BB%E7%BB%93%E6%99%BA%E8%83%BD%E4%BB%A3%E7%90%86" tabindex="-1">构建网页总结智能代理</h2><p>接下来我们将介绍如何使用 mcp-agent 构建一个用于网页总结的智能代理 (agent).</p><p>模型我们选用<a href="https://bailian.console.aliyun.com">阿里云百炼平台</a> DashScope 提供的通义千问系列, 支持下国产, 且 mcp-agent 提供的官方例子也没有国内相关模型服务商的例子, 本篇文章也算是个补充.</p><p>示例环境基于 Windows 和 Git Bash for Windows, 同时请确保安装了 Node.js 环境, 我们需要使用到 npx 去管理 MCP Servers 来扩展智能代理的能力, 免去部分通用代码的重复编写.</p><p>我们使用 uv 去管理这个项目相关的依赖和代码, 让我们先创建项目:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir web_page_summary</span><br><span class="line">cd web_page_summary</span><br><span class="line">uv init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">uv add mcp_agent</span><br></pre></td></tr></table></figure><p>让后将网页总结智能代理实现代码写入一个 <code>main.py</code> 文件中, 内容如下 (没错, 你没看错, 就这么点代码就够了):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: uv run main.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mcp_agent.app <span class="keyword">import</span> MCPApp</span><br><span class="line"><span class="keyword">from</span> mcp_agent.agents.agent <span class="keyword">import</span> Agent</span><br><span class="line"><span class="keyword">from</span> mcp_agent.workflows.llm.augmented_llm_openai <span class="keyword">import</span> OpenAIAugmentedLLM</span><br><span class="line"></span><br><span class="line">app = MCPApp(name=<span class="string">&quot;web_page_summary&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> app.run() <span class="keyword">as</span> mcp_agent_app:</span><br><span class="line">        logger = mcp_agent_app.logger</span><br><span class="line">        <span class="comment"># 创建一个 finder_agent 可以用于网络内容的 agent</span></span><br><span class="line">        finder_agent = Agent(</span><br><span class="line">            name=<span class="string">&quot;finder&quot;</span>,</span><br><span class="line">            instruction=<span class="string">&quot;&quot;&quot;You can fetch URLs.</span></span><br><span class="line"><span class="string">                Return the requested information when asked.&quot;&quot;&quot;</span>,</span><br><span class="line">            server_names=[<span class="string">&quot;fetch&quot;</span>],  <span class="comment"># 声明 agent 可以使用的 mcp server</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> finder_agent:</span><br><span class="line">            <span class="comment"># 确保 MCP Server 初始化完成, 可以被 LLM 使用</span></span><br><span class="line">            tools = <span class="keyword">await</span> finder_agent.list_tools()</span><br><span class="line">            logger.info(<span class="string">&quot;Tools available:&quot;</span>, data=tools)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Attach an OpenAI LLM to the agent</span></span><br><span class="line">            llm = <span class="keyword">await</span> finder_agent.attach_llm(OpenAIAugmentedLLM)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用 MCP Server -&gt; fetch 获取指定 URL 网页内容</span></span><br><span class="line">            result = <span class="keyword">await</span> llm.generate_str(</span><br><span class="line">                message=<span class="string">f&quot;get content from <span class="subst">&#123;url&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">            logger.info(<span class="string">f&quot;content intro: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取网页内容结果总结</span></span><br><span class="line">            result = <span class="keyword">await</span> llm.generate_str(<span class="string">&quot;Please summary this webpage with lang_code&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">f&quot;Summary: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Process some integers.&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--url&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;The URL to fetch&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    asyncio.run(main(args.url))</span><br></pre></td></tr></table></figure><p>接下来我们配置 agent 依赖的 MCP Server, 将配置写入 <code>mcp_agent.config.yaml</code> 文件中, 内容如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$schema:</span> <span class="string">&quot;https://github.com/lastmile-ai/mcp-agent/blob/main/schema/mcp-agent.config.schema.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">execution_engine:</span> <span class="string">asyncio</span></span><br><span class="line"><span class="attr">logger:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">transports:</span> [<span class="string">&quot;console&quot;</span>, <span class="string">&quot;file&quot;</span>]</span><br><span class="line">  <span class="attr">path:</span> <span class="string">&quot;mcp-agent.log&quot;</span></span><br><span class="line">  <span class="attr">progress_display:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mcp:</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">    <span class="comment"># fetch 用于获取网页内容</span></span><br><span class="line">    <span class="attr">fetch:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;uvx&quot;</span></span><br><span class="line">      <span class="attr">args:</span> [<span class="string">&quot;mcp-server-fetch&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">openai:</span></span><br><span class="line">  <span class="comment"># 将 API 调整为阿里云百炼大模型平台的 OpenAI 兼容 API</span></span><br><span class="line">  <span class="attr">base_url:</span> <span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span></span><br><span class="line">  <span class="comment"># 模型选用 qwen-turbo</span></span><br><span class="line">  <span class="attr">default_model:</span> <span class="string">&quot;qwen-turbo&quot;</span></span><br></pre></td></tr></table></figure><p>然后我们还需要配置一下 API 密钥, 让程序可以访问到阿里云百炼提供的大模型, API 密钥可以从这里获取: <a href="https://bailian.console.aliyun.com/?apiKey=1">https://bailian.console.aliyun.com/?apiKey=1</a>. 将密钥配置放到文件 <code>mcp_agent.secrets.yaml</code> 中即可:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mcp_agent.secrets.yaml</span></span><br><span class="line"><span class="attr">openai:</span></span><br><span class="line">  <span class="attr">api_key:</span> <span class="string">&quot;sk-xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>最后我们执行下这个网页总结智能代理:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run main.py --url &quot;https://docs.cline.bot/improving-your-prompting-skills/prompting#advanced-prompting-techniques&quot;</span><br></pre></td></tr></table></figure><p>结果示例如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line">❯ uv run main.py --url &quot;https://docs.cline.bot/improving-your-prompting-skills/prompting#advanced-prompting-techniques&quot;</span><br><span class="line">[INFO] 2025-03-23T18:44:40 mcp_agent.context - Configuring logger with level: info</span><br><span class="line">[INFO] 2025-03-23T18:44:40 mcp_agent.web_page_summary - MCPAgent initialized</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Running&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;web_page_summary&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;mcp_application_loop&quot;,</span><br><span class="line">    &quot;session_id&quot;: &quot;e96edf39-3f6b-4ec9-83bf-57b281076fee&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[INFO] 2025-03-23T18:44:40 mcp_agent.mcp.mcp_aggregator.finder - Creating persistent connection to server: fetch</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Starting&quot;,</span><br><span class="line">    &quot;server_name&quot;: &quot;fetch&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;finder&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[INFO] 2025-03-23T18:44:40 mcp_agent.mcp.mcp_connection_manager - fetch: Up and running with a persistent connection!</span><br><span class="line">[INFO] 2025-03-23T18:44:42 mcp_agent.web_page_summary - Tools available:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;meta&quot;: null,</span><br><span class="line">    &quot;nextCursor&quot;: null,</span><br><span class="line">    &quot;tools&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;fetch-fetch&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have </span><br><span class="line">internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date </span><br><span class="line">information and let the user know that.&quot;,</span><br><span class="line">        &quot;inputSchema&quot;: &#123;</span><br><span class="line">          &quot;description&quot;: &quot;Parameters for fetching a URL.&quot;,</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;url&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;URL to fetch&quot;,</span><br><span class="line">              &quot;format&quot;: &quot;uri&quot;,</span><br><span class="line">              &quot;minLength&quot;: 1,</span><br><span class="line">              &quot;title&quot;: &quot;Url&quot;,</span><br><span class="line">              &quot;type&quot;: &quot;string&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;max_length&quot;: &#123;</span><br><span class="line">              &quot;default&quot;: 5000,</span><br><span class="line">              &quot;description&quot;: &quot;Maximum number of characters to return.&quot;,</span><br><span class="line">              &quot;exclusiveMaximum&quot;: 1000000,</span><br><span class="line">              &quot;exclusiveMinimum&quot;: 0,</span><br><span class="line">              &quot;title&quot;: &quot;Max Length&quot;,</span><br><span class="line">              &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;start_index&quot;: &#123;</span><br><span class="line">              &quot;default&quot;: &quot;0&quot;,</span><br><span class="line">              &quot;description&quot;: &quot;On return output starting at this character index, useful if a previous fetch was truncated and more context is required.&quot;,</span><br><span class="line">              &quot;minimum&quot;: &quot;0&quot;,</span><br><span class="line">              &quot;title&quot;: &quot;Start Index&quot;,</span><br><span class="line">              &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;raw&quot;: &#123;</span><br><span class="line">              &quot;default&quot;: false,</span><br><span class="line">              &quot;description&quot;: &quot;Get the actual HTML content if the requested page, without simplification.&quot;,</span><br><span class="line">              &quot;title&quot;: &quot;Raw&quot;,</span><br><span class="line">              &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;required&quot;: [</span><br><span class="line">            &quot;url&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;title&quot;: &quot;Fetch&quot;,</span><br><span class="line">          &quot;type&quot;: &quot;object&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;__human_input__&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;\nRequest input from a human user. Pauses the workflow until input is received.\n\nArgs:\n    request: The human input</span><br><span class="line">request\n\nReturns:\n    The input provided by the human\n\nRaises:\n    TimeoutError: If the timeout is exceeded\n&quot;,</span><br><span class="line">        &quot;inputSchema&quot;: &#123;</span><br><span class="line">          &quot;$defs&quot;: &#123;</span><br><span class="line">            &quot;HumanInputRequest&quot;: &#123;</span><br><span class="line">              &quot;description&quot;: &quot;Represents a request for human input.&quot;,</span><br><span class="line">              &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;prompt&quot;: &#123;</span><br><span class="line">                  &quot;title&quot;: &quot;Prompt&quot;,</span><br><span class="line">                  &quot;type&quot;: &quot;string&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;description&quot;: &#123;</span><br><span class="line">                  &quot;anyOf&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;string&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;null&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;default&quot;: null,</span><br><span class="line">                  &quot;title&quot;: &quot;Description&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;request_id&quot;: &#123;</span><br><span class="line">                  &quot;anyOf&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;string&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;null&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;default&quot;: null,</span><br><span class="line">                  &quot;title&quot;: &quot;Request Id&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;workflow_id&quot;: &#123;</span><br><span class="line">                  &quot;anyOf&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;string&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;null&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;default&quot;: null,</span><br><span class="line">                  &quot;title&quot;: &quot;Workflow Id&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;timeout_seconds&quot;: &#123;</span><br><span class="line">                  &quot;anyOf&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;null&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;default&quot;: null,</span><br><span class="line">                  &quot;title&quot;: &quot;Timeout Seconds&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;metadata&quot;: &#123;</span><br><span class="line">                  &quot;anyOf&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;object&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;type&quot;: &quot;null&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;default&quot;: null,</span><br><span class="line">                  &quot;title&quot;: &quot;Metadata&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &quot;required&quot;: [</span><br><span class="line">                &quot;prompt&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;title&quot;: &quot;HumanInputRequest&quot;,</span><br><span class="line">              &quot;type&quot;: &quot;object&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">              &quot;$ref&quot;: &quot;#/$defs/HumanInputRequest&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;required&quot;: [</span><br><span class="line">            &quot;request&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;title&quot;: &quot;request_human_inputArguments&quot;,</span><br><span class="line">          &quot;type&quot;: &quot;object&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[INFO] 2025-03-23T18:44:44 mcp_agent.mcp.mcp_aggregator.finder - Requesting tool call</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Calling Tool&quot;,</span><br><span class="line">    &quot;tool_name&quot;: &quot;fetch&quot;,</span><br><span class="line">    &quot;server_name&quot;: &quot;fetch&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;finder&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[INFO] 2025-03-23T18:44:46 mcp_agent.mcp.mcp_aggregator.finder - Requesting tool call</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Calling Tool&quot;,</span><br><span class="line">    &quot;tool_name&quot;: &quot;fetch&quot;,</span><br><span class="line">    &quot;server_name&quot;: &quot;fetch&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;finder&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[INFO] 2025-03-23T18:44:49 mcp_agent.mcp.stdio.mcpserver.stderr - Warning: A working NPM installation was not found. The package will use Python-based   </span><br><span class="line">article extraction.</span><br><span class="line">Warning: node executable not found, reverting to pure-Python mode. Install Node.js v10 or newer to use Readability.js.</span><br><span class="line">[INFO] 2025-03-23T18:44:55 mcp_agent.web_page_summary - content intro: It seems there was an issue with the maximum length parameter. I will try fetching</span><br><span class="line">the content again with a more reasonable limit. Let&#x27;s proceed with fetching the first 5000 characters.</span><br><span class="line">The content has been successfully fetched. Here is the beginning of the document:</span><br><span class="line"></span><br><span class="line">Prompt Engineering Guide | Cline</span><br><span class="line"></span><br><span class="line">* Cline Documentation</span><br><span class="line">* Getting Started</span><br><span class="line"></span><br><span class="line">  + Getting Started for New Coders</span><br><span class="line"></span><br><span class="line">    - Installing Dev Essentials</span><br><span class="line">    - Our Favorite Tech Stack</span><br><span class="line">  + Understanding Context Management</span><br><span class="line">  + Model Selection Guide</span><br><span class="line">* Improving Your Prompting Skills</span><br><span class="line"></span><br><span class="line">  + Prompt Engineering Guide</span><br><span class="line">  + Custom Instructions Library</span><br><span class="line"></span><br><span class="line">    - Cline Memory Bank</span><br><span class="line">* Exploring Cline&#x27;s Tools</span><br><span class="line"></span><br><span class="line">  + Cline Tools Guide</span><br><span class="line">  + Checkpoints</span><br><span class="line">  + Plan &amp; Act Modes: A Guide to Effective AI Development</span><br><span class="line">* MCP Servers</span><br><span class="line"></span><br><span class="line">  + MCP Made Easy</span><br><span class="line">  + MCP Server Development Protocol</span><br><span class="line">* Adding MCP Servers from GitHub</span><br><span class="line">* Custom Model Configs</span><br><span class="line"></span><br><span class="line">  + AWS Bedrock</span><br><span class="line">  + GCP Vertex AI</span><br><span class="line">  + LiteLLM &amp; Cline (using Codestral)</span><br><span class="line">* Running Models Locally</span><br><span class="line"></span><br><span class="line">  + Read Me First</span><br><span class="line">  + Ollama</span><br><span class="line">  + LM Studio</span><br><span class="line">* More Info</span><br><span class="line"></span><br><span class="line">  + Telemetry</span><br><span class="line"></span><br><span class="line">Powered by GitBook</span><br><span class="line"></span><br><span class="line">On this page</span><br><span class="line"></span><br><span class="line">* Custom Instructions ⚙️</span><br><span class="line">* .clinerules File 📋</span><br><span class="line">* General Use Cases</span><br><span class="line">* Example .clinerules Structure</span><br><span class="line">* Key Benefits</span><br><span class="line">* Tips for Writing Effective Custom Instructions</span><br><span class="line">* .clinerules Folder System 📂</span><br><span class="line">* .clineignore File Guide</span><br><span class="line">* Overview</span><br><span class="line">* Purpose</span><br><span class="line">* Example .clineignore File</span><br><span class="line">* Prompting Cline 💬</span><br><span class="line">* Prompt Examples</span><br><span class="line">* Advanced Prompting Techniques</span><br><span class="line">* Our Community&#x27;s Favorite Prompts 🌟</span><br><span class="line">* Memory and Confidence Checks 🧠</span><br><span class="line">* Code Quality Prompts 💻</span><br><span class="line">* Code Organization 📋</span><br><span class="line">* Analysis and Planning 🔍</span><br><span class="line">* Thoughtful Development 🤔</span><br><span class="line">* Best Practices 🎯</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Prompt Engineering Guide</span></span><br><span class="line"></span><br><span class="line">PreviousModel Selection GuideNextCustom Instructions Library</span><br><span class="line"></span><br><span class="line">Last updated 5 days ago</span><br><span class="line"></span><br><span class="line">Welcome to the Cline Prompting Guide! This guide will equip you with the knowledge to write effective prompts and custom instructions, maximizing your   </span><br><span class="line">productivity with Cline.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Custom Instructions ⚙️</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">The full content is too long to display here, but you can call the fetch tool with a start_index of 5000 to get more content. Would you like to see the  </span><br><span class="line">rest of the document?</span><br><span class="line"></span><br><span class="line">╭───────────────────────────────────────────────────────────────── HUMAN INPUT NEEDED ──────────────────────────────────────────────────────────────────╮</span><br><span class="line">│                                                                                                                                                       │</span><br><span class="line">│  Please provide a language code for the summary (e.g., en for English, zh for Chinese):                                                               │</span><br><span class="line">│                                                                                                                                                       │</span><br><span class="line">╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯</span><br><span class="line">Chinese</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - Summary: The summary of the webpage in Chinese is as follows:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Cline 提示工程指南旨在帮助用户编写有效的提示和自定义指令, 从而最大化利用 Cline 的生产力。指南涵盖了自定义指令、`.clinerules` 文件以及高级提示技术等内容。</span><br><span class="line"></span><br><span class="line">**主要章节：**</span><br><span class="line"></span><br><span class="line">1. **自定义指令（⚙️）**</span><br><span class="line">   - 自定义指令类似于 Cline 的编程设置, 它们定义了 Cline 的基本行为, 并始终生效。</span><br><span class="line">   - 用户可以通过在 Cline 扩展设置中添加自定义指令来实现特定的行为, 例如编码风格、代码质量改进以及错误处理等。</span><br><span class="line"></span><br><span class="line">2. **`.clinerules` 文件（📋）**</span><br><span class="line">   - `.clinerules` 文件提供了项目特定的指令, 这些指令会自动附加到用户的全局自定义指令中。</span><br><span class="line">   - 它可以用于维护团队成员之间的项目标准、强制执行开发实践、管理文档要求以及定义项目特定的行为。</span><br><span class="line"></span><br><span class="line">3. **高级提示技术（🌟）**</span><br><span class="line">   - 高级提示技术部分提供了社区中最受欢迎的提示示例, 包括记忆检查、代码质量提示、代码组织、分析和规划、以及有思想的开发等。</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...                                     </span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.                              </span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Cline 提示工程指南旨在帮助用户编写有效的提示和自定义指令, 从而最大化利用 Cline 的生产力。指南涵盖了自定义指令、`.clinerules` 文件以及高级提示技术等内容。</span><br><span class="line"></span><br><span class="line">**主要章节：**</span><br><span class="line"></span><br><span class="line">1. **自定义指令（⚙️）**</span><br><span class="line">   - 自定义指令类似于 Cline 的编程设置, 它们定义了 Cline 的基本行为, 并始终生效。</span><br><span class="line">   - 用户可以通过在 Cline 扩展设置中添加自定义指令来实现特定的行为, 例如编码风格、代码质量改进以及错误处理等。</span><br><span class="line"></span><br><span class="line">2. **`.clinerules` 文件（📋）**</span><br><span class="line">   - `.clinerules` 文件提供了项目特定的指令, 这些指令会自动附加到用户的全局自定义指令中。</span><br><span class="line">   - 它可以用于维护团队成员之间的项目标准、强制执行开发实践、管理文档要求以及定义项目特定的行为。</span><br><span class="line"></span><br><span class="line">3. **高级提示技术（🌟）**</span><br><span class="line">   - 高级提示技术部分提供了社区中最受欢迎的提示示例, 包括记忆检查、代码质量提示、代码组织、分析和规划、以及有思想的开发等。</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">**主要章节：**</span><br><span class="line"></span><br><span class="line">1. **自定义指令（⚙️）**</span><br><span class="line">   - 自定义指令类似于 Cline 的编程设置, 它们定义了 Cline 的基本行为, 并始终生效。</span><br><span class="line">   - 用户可以通过在 Cline 扩展设置中添加自定义指令来实现特定的行为, 例如编码风格、代码质量改进以及错误处理等。</span><br><span class="line"></span><br><span class="line">2. **`.clinerules` 文件（📋）**</span><br><span class="line">   - `.clinerules` 文件提供了项目特定的指令, 这些指令会自动附加到用户的全局自定义指令中。</span><br><span class="line">   - 它可以用于维护团队成员之间的项目标准、强制执行开发实践、管理文档要求以及定义项目特定的行为。</span><br><span class="line"></span><br><span class="line">3. **高级提示技术（🌟）**</span><br><span class="line">   - 高级提示技术部分提供了社区中最受欢迎的提示示例, 包括记忆检查、代码质量提示、代码组织、分析和规划、以及有思想的开发等。</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line">   - 用户可以通过在 Cline 扩展设置中添加自定义指令来实现特定的行为, 例如编码风格、代码质量改进以及错误处理等。</span><br><span class="line"></span><br><span class="line">2. **`.clinerules` 文件（📋）**</span><br><span class="line">   - `.clinerules` 文件提供了项目特定的指令, 这些指令会自动附加到用户的全局自定义指令中。</span><br><span class="line">   - 它可以用于维护团队成员之间的项目标准、强制执行开发实践、管理文档要求以及定义项目特定的行为。</span><br><span class="line"></span><br><span class="line">3. **高级提示技术（🌟）**</span><br><span class="line">   - 高级提示技术部分提供了社区中最受欢迎的提示示例, 包括记忆检查、代码质量提示、代码组织、分析和规划、以及有思想的开发等。</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">3. **高级提示技术（🌟）**</span><br><span class="line">   - 高级提示技术部分提供了社区中最受欢迎的提示示例, 包括记忆检查、代码质量提示、代码组织、分析和规划、以及有思想的开发等。</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Finished&quot;,</span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line">该指南通过详细的说明和示例, 帮助用户更好地理解如何编写高效的提示和指令, 从而提升与 Cline 的交互效率。</span><br><span class="line"></span><br><span class="line">如果您需要更详细的信息, 请告诉我！</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Finished&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;web_page_summary&quot;,</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_aggregator.finder - Shutting down all persistent connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - Disconnecting all persistent server connections...</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.mcp.mcp_connection_manager - All persistent server connections signaled to disconnect.</span><br><span class="line">[INFO] 2025-03-23T18:45:13 mcp_agent.web_page_summary - MCPAgent cleanup</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Finished&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;web_page_summary&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;mcp_application_loop&quot;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;progress_action&quot;: &quot;Finished&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;web_page_summary&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;mcp_application_loop&quot;</span><br><span class="line">    &quot;target&quot;: &quot;web_page_summary&quot;,</span><br><span class="line">    &quot;agent_name&quot;: &quot;mcp_application_loop&quot;</span><br><span class="line">    &quot;agent_name&quot;: &quot;mcp_application_loop&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">0:00:33 Running         ━━━━━━━━━━━━━━━ web_page_summary</span><br><span class="line">0:00:15 Finished        ━━━━━━━━━━━━━━━ finder (qwen-turbo)</span><br><span class="line">0:00:17 Finished        ━━━━━━━━━━━━━━━ finder (qwen-turbo)</span><br></pre></td></tr></table></figure><h2 id="%E6%9C%80%E5%90%8E" tabindex="-1">最后</h2><p>可以看到, 现在我们可以通过很少的代码量, 就可以实现一个质量还可以的智能代理了, 这个例子比较简单, 真正用于实际工作中的智能代理是需要经过不少打磨的.</p><p>本文的代码已经放到这个开源仓库中了 <a href="https://github.com/yeshan333/webpage-summary-agent">https://github.com/yeshan333/webpage-summary-agent</a>, 可以直接下载下来玩玩.</p><p>MCP 协议和 mcp-agent 还处于一个比较早期的阶段, 实际把玩过程中会遇到不少的问题, 相信往后会越来越好, 助你在 AI 新时代“玩的开心”~</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/LLM/">LLM</category>
      
      <category domain="https://yeshan333.github.io/categories/MCP/">MCP</category>
      
      
      <category domain="https://yeshan333.github.io/tags/MCP/">MCP</category>
      
      <category domain="https://yeshan333.github.io/tags/mcp-agent/">mcp-agent</category>
      
      
      <comments>https://yeshan333.github.io/2025/03/23/build-agent-with-mcp-agent-and-qwen/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 mkcert 本地部署启动了 TLS/SSL 加密通讯的 MongoDB 副本集和分片集群</title>
      <link>https://yeshan333.github.io/2025/02/06/mongodb-deployment-with-tls-and-mkcert/</link>
      <guid>https://yeshan333.github.io/2025/02/06/mongodb-deployment-with-tls-and-mkcert/</guid>
      <pubDate>Thu, 06 Feb 2025 15:40:38 GMT</pubDate>
      
      <description>使用 mkcert 本地部署启动了 TLS/SSL 加密通讯的 MongoDB 副本集和分片集群</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MongoDB 是支持客户端与 MongoDB 服务器之间启用 TLS/SSL 进行加密通讯的, 对于 MongoDB 副本集和分片集群内部的通讯, 也可以开启 TLS/SSL 认证. 本文会使用 <a href="https://github.com/FiloSottile/mkcert">mkcert</a> 创建 TLS/SSL 证书, 基于创建的证书, 介绍 MongoDB 副本集、分片集群中启动 TLS/SSL 通讯的方法.</p><p>我们将会在本地部署启用了 SSL/TLS 通讯的副本集、分片集群.</p><h2 id="%E5%AE%89%E8%A3%85-mkcert-%E5%92%8C-mongodb" tabindex="-1">安装 mkcert 和 MongoDB</h2><p>在介绍 MongoDB 副本集和 MongoDB 分片集群中启用 SSL/TLS 通讯前, 我们先在本地安装好 MongoDB 和 mkcert.</p><p><a href="https://github.com/FiloSottile/mkcert">mkcert</a> 是一个 Go 实现的命令行工具, 方便我们使用一行命令就创建好 TLS/SSL 证书. 这里我们以 Ubuntu Linux 为例子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要安装有 Go</span></span><br><span class="line">go install filippo.io/mkcert@latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以参考 mkcert 文章中描述的安装方法进行安装: <a href="https://github.com/FiloSottile/mkcert#installation">mkcert installation</a>.</p><p>接下来我们安装 MongoDB Server 和 MongoDB Shell 命令行工具. 你可以在 <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 下载到对应的二进制 (mongod、mongos) 文件压缩包. 后续我们将会以 MongoDB@2.0.26 版本为例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">❯ mongod --version</span><br><span class="line">db version v5.0.26</span><br><span class="line">Build Info: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;5.0.26&quot;,</span><br><span class="line">    &quot;gitVersion&quot;: &quot;0b4f1ea980b5380a66425a90b414106a191365f4&quot;,</span><br><span class="line">    &quot;openSSLVersion&quot;: &quot;OpenSSL 1.1.1f  31 Mar 2020&quot;,</span><br><span class="line">    &quot;modules&quot;: [],</span><br><span class="line">    &quot;allocator&quot;: &quot;tcmalloc&quot;,</span><br><span class="line">    &quot;environment&quot;: &#123;</span><br><span class="line">        &quot;distmod&quot;: &quot;ubuntu2004&quot;,</span><br><span class="line">        &quot;distarch&quot;: &quot;x86_64&quot;,</span><br><span class="line">        &quot;target_arch&quot;: &quot;x86_64&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意, 如果你使用了高本版的 MongoDB, 需要单独下载 MongoDB Shell 命令行客户端工具. 可以在这里下载 <a href="https://www.mongodb.com/try/download/shell">https://www.mongodb.com/try/download/shell</a>.</p></blockquote><p>接下来让我们看看如何在 MongoDB 中启用 TLS/SSL 通讯.</p><h2 id="mongodb-%E5%89%AF%E6%9C%AC%E9%9B%86%E4%B8%AD%E5%90%AF%E7%94%A8-tls%2Fssl" tabindex="-1">MongoDB 副本集中启用 TLS/SSL</h2><p>让我们先看看怎么在副本集中启用 SSL/TLS.</p><ol><li>第一步, 我们先使用 mkcert 生成待会 MongoDB 服务器 <code>mongod</code> 使用的证书</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 CA 证书存放在 mkcert 目录下</span></span><br><span class="line">export CAROOT=$(pwd)/mkcert</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 CA</span></span><br><span class="line">mkcert -install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将证书和密钥合并, 后续 mongod 会使用到, 一般用来校验客户端使用的证书</span></span><br><span class="line">cat mkcert/rootCA.pem mkcert/rootCA-key.pem &gt; mkcert/CA.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 mongod 使用的服务器证书, 这个证书在通信的时候会传递给客户端校验合法性</span></span><br><span class="line">mkcert -cert-file mongo-tls.crt -key-file mongo-tls.key localhost 127.0.0.1 ::1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样, 合并证书和密钥</span></span><br><span class="line">cat mongo-tls.crt mongo-tls.key &gt; mongo-tls.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 mongo 客户端使用的证书, 这个证书后续不只用于客户端于服务器的通讯, 也用于副本集成员内部认证时使用</span></span><br><span class="line">mkcert -client -cert-file mongo-tls-client.crt -key-file mongo-tls-client.key localhost 127.0.0.1 ::1</span><br><span class="line">cat mongo-tls-client.crt mongo-tls-client.key &gt; mongo-tls-client.pem</span><br></pre></td></tr></table></figure><ol start="2"><li>第二步, 我们使用上述生成的证书 pem 文件来启动副本集, 副本集各成员使用的配置文件如下:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">etc/primary.conf.yaml</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">mongo_replica_set</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">build/mongo_replica_set/mongodata_primary</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/mongo_replica_set_mongod_primary.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">47017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">,localhost</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">compressors:</span> <span class="string">zlib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Member x.509 Certificate</span></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">etc/secondary_a.conf.yaml</span> </span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">mongo_replica_set</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">build/mongo_replica_set/mongodata_secondary_a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/mongo_replica_set_mongod_secondary_a.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">47018</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">,localhost</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">compressors:</span> <span class="string">zlib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Member x.509 Certificate</span></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">etc/secondary_b.conf.yaml</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">mongo_replica_set</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">build/mongo_replica_set/mongodata_secondary_b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/mongo_replica_set_mongod_secondary_b.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">47019</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">,localhost</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">compressors:</span> <span class="string">zlib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Member x.509 Certificate</span></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><p>其中主节点（primary）监听的地址为 <code>127.0.0.1:47017</code>, 从节点监听的地址为 <code>127.0.0.1:47018</code>、<code>127.0.0.1:47019</code>. 这是典型的 PSS 架构部署的 MongoDB 副本集, 网络拓扑如下:</p><p><img src="https://www.mongodb.com/docs/manual/images/replica-set-read-write-operations-primary.bakedsvg.svg" alt="PSS MongDB ReplicaSet"></p><p>我们使用 <code>mongod</code> 启用上述配置文件, 注意配置文件中 certificate 相关字段引用到的 mkcert 生成的配置文件, <code>mongod</code> 启用命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir logs</span><br><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">mongod --config &quot;etc/primary.conf.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/secondary_a.conf.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/secondary_b.conf.yaml&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化副本集</span></span><br><span class="line">mongo --port 47017 --tls &lt;&lt;EOF</span><br><span class="line">db.adminCommand(&#123;replSetInitiate: &#123; </span><br><span class="line">  _id: &quot;mongo_replica_set&quot;, </span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: &quot;127.0.0.1:47017&quot;, priority: 2&#125;, </span><br><span class="line">    &#123; _id: 1, host: &quot;127.0.0.1:47018&quot;, priority: 1&#125;, </span><br><span class="line">    &#123; _id: 2, host: &quot;127.0.0.1:47019&quot;, priority: 1&#125; ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    electionTimeoutMillis: 3000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动完成后, 我们使用 MongoDB Shell 命令客户端尝试连接主 (primary) 节点 <code>127.0.0.1:47017</code>, 命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ mongo --port 47017</span><br><span class="line">MongoDB shell version v5.0.26</span><br><span class="line">connecting to: mongodb://127.0.0.1:47017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Error: network error while attempting to run command &#x27;isMaster&#x27; on host &#x27;127.0.0.1:47017&#x27;  :</span><br><span class="line">connect@src/mongo/shell/mongo.js:372:17</span><br><span class="line">@(connect):2:6</span><br><span class="line">exception: connect failed</span><br><span class="line">exiting with code 1</span><br></pre></td></tr></table></figure><p>会看到连接会失败, 这是因为 MongoDB 服务器强制开启了 TLS/SSL 通讯, 配置文件中相关字段如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br></pre></td></tr></table></figure><p>这时候 mongo 客户端连接的使用需要走 TLS/SSL, 命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">❯ mongo --port 47017 --tls</span><br><span class="line">MongoDB shell version v5.0.26</span><br><span class="line">connecting to: mongodb://127.0.0.1:47017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2025-02-06T14:22:24.093Z&quot;&#125;,&quot;s&quot;:&quot;I&quot;,  &quot;c&quot;:&quot;NETWORK&quot;,  &quot;id&quot;:5490002, &quot;ctx&quot;:&quot;thread4&quot;,&quot;msg&quot;:&quot;Started a new thread for the timer service&quot;&#125;</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;0a5698d1-81b5-4aee-800b-809da69baf58&quot;) &#125;</span><br><span class="line">MongoDB server version: 5.0.26</span><br><span class="line">================</span><br><span class="line">Warning: the &quot;mongo&quot; shell has been superseded by &quot;mongosh&quot;,</span><br><span class="line">which delivers improved usability and compatibility.The &quot;mongo&quot; shell has been deprecated and will be removed in</span><br><span class="line">an upcoming release.</span><br><span class="line">For installation instructions, see</span><br><span class="line">https://docs.mongodb.com/mongodb-shell/install/</span><br><span class="line">================</span><br><span class="line">mongo_replica_set:PRIMARY&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们能正常连接到副本集. 通过 tcpdump 能网络抓包工具, 我们可以看到通信流量是被加密过的. 接下来我们看看如何在 MongoDB 分片集群 (Sharding Cluster) 中启用 TLS/SSL.</p><h2 id="mongodb-%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%90%AF%E7%94%A8-tls%2Fssl" tabindex="-1">MongoDB 分片集群中启用 TLS/SSL</h2><p>接下来我们将本地部署的 MongoDB 分片集群拓扑大致如下, 其中两个 mongos、一个 config shard、一个数据分片 mongo shard a:</p><p><img src="https://www.mongodb.com/docs/manual/static/1112d075b61fb59a49076c865c6e8f60/bde8a/sharded-cluster-production-architecture.webp" alt="https://www.mongodb.com/docs/manual/static/1112d075b61fb59a49076c865c6e8f60/bde8a/sharded-cluster-production-architecture.webp"></p><ol><li>同样, 我们也需要生成 mongod、mongos、mongo 客户端使用的证书:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 CA 证书存放在 mkcert 目录下</span></span><br><span class="line">export CAROOT=$(pwd)/mkcert</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 CA</span></span><br><span class="line">mkcert -install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将证书和密钥合并, 后续 mongod 会使用到, 一般用来校验客户端使用的证书</span></span><br><span class="line">cat mkcert/rootCA.pem mkcert/rootCA-key.pem &gt; mkcert/CA.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 mongod 使用的服务器证书, 这个证书在通信的时候会传递给客户端校验合法性</span></span><br><span class="line">mkcert -cert-file mongo-tls.crt -key-file mongo-tls.key localhost 127.0.0.1 ::1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样, 合并证书和密钥</span></span><br><span class="line">cat mongo-tls.crt mongo-tls.key &gt; mongo-tls.pem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 mongo 客户端使用的证书, 这个证书后续不只用于客户端于服务器的通讯, 也用于副本集成员内部认证时使用</span></span><br><span class="line">mkcert -client -cert-file mongo-tls-client.crt -key-file mongo-tls-client.key localhost 127.0.0.1 ::1</span><br><span class="line">cat mongo-tls-client.crt mongo-tls-client.key &gt; mongo-tls-client.pem</span><br></pre></td></tr></table></figure><ol start="2"><li>我们先启用 mongo config shard 集群配置分片, 一般用于存储集群的路由信息等数据, 主节点启动配置如下, <code>clusterFile</code> 字段指定了集群成员间内部认证使用的证书:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;</span> <span class="string">cat</span> <span class="string">etc/mongo_config_shard/mongo_cfg_primary.yaml</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">clusterRole:</span> <span class="string">configsvr</span></span><br><span class="line"></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">config_shard_repl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">build/config_shard_repl/mongodata_primary</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/config_shard_repl_mongod_primary.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="string">localhost,127.0.0.1</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">compressors:</span> <span class="string">zlib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><p>从节点使用的配置可以在这里看到: <a href="https://github.com/yeshan333/mongo-deployment-with-tls/tree/main/deployments/ShardingCluster/etc/mongo_config_shard">ShardingCluster/etc/mongo_config_shard</a>, 启动命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mongod --config &quot;etc/mongo_config_shard/mongo_cfg_primary.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/mongo_config_shard/mongo_cfg_secondary_a.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/mongo_config_shard/mongo_cfg_secondary_b.yaml&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化副本集</span></span><br><span class="line">mongo --port 27017 --tls &lt;&lt;EOF</span><br><span class="line">db.adminCommand(&#123;replSetInitiate: &#123; </span><br><span class="line">  _id: &quot;config_shard_repl&quot;, </span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: &quot;127.0.0.1:27017&quot;, priority: 2&#125;, </span><br><span class="line">    &#123; _id: 1, host: &quot;127.0.0.1:27018&quot;, priority: 1&#125;, </span><br><span class="line">    &#123; _id: 2, host: &quot;127.0.0.1:27019&quot;, priority: 1&#125; ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    electionTimeoutMillis: 3000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="3"><li>启动数据分片 (mongo shard a), 这个分片一般用于存储业务数据, 实际的生产使用会有多个, 主从节点配置文件可以在 <a href="https://github.com/yeshan333/mongo-deployment-with-tls/tree/main/deployments/ShardingCluster/etc/mongo_shard_a">ShardingCluster/etc/mongo_shard_a</a> 中找到, 与配置分片的各节点配置除访问地址外大致相同, 各节点启用命令如下:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mongod --config &quot;etc/mongo_shard_a/mongo_cfg_primary.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/mongo_shard_a/mongo_cfg_secondary_a.yaml&quot;</span><br><span class="line">mongod --config &quot;etc/mongo_shard_a/mongo_cfg_secondary_b.yaml&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化副本集</span></span><br><span class="line">mongo --port 37017 --tls &lt;&lt;EOF</span><br><span class="line">db.adminCommand(&#123;replSetInitiate: &#123; </span><br><span class="line">  _id: &quot;shard_a_repl&quot;, </span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: &quot;127.0.0.1:37017&quot;, priority: 2&#125;, </span><br><span class="line">    &#123; _id: 1, host: &quot;127.0.0.1:37018&quot;, priority: 1&#125;, </span><br><span class="line">    &#123; _id: 2, host: &quot;127.0.0.1:37019&quot;, priority: 1&#125; ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    electionTimeoutMillis: 3000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来我们通过如下配置启动 mongos 路由器, mongo 客户端一般通过 mongos 访问业务数据, mongos 的启用配置如下:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">etc/mongos/mongos_a_cfg.yaml</span> </span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27011</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="string">localhost,127.0.0.1</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">configDB:</span> <span class="string">config_shard_repl/127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/mongos_a.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">etc/mongos/mongos_b_cfg.yaml</span></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">requireTLS</span></span><br><span class="line">    <span class="attr">CAFile:</span> <span class="string">mkcert/CA.pem</span></span><br><span class="line">    <span class="attr">certificateKeyFile:</span> <span class="string">mongo-tls.pem</span></span><br><span class="line">    <span class="attr">clusterFile:</span> <span class="string">mongo-tls-client.pem</span> <span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-ssl/#member-certificate-requirements</span></span><br><span class="line">    <span class="attr">allowConnectionsWithoutCertificates:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27012</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="string">localhost,127.0.0.1</span></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">configDB:</span> <span class="string">config_shard_repl/127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/mongos_b.log</span></span><br><span class="line">  <span class="attr">verbosity:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.mongodb.com/docs/manual/tutorial/configure-x509-member-authentication/</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">clusterAuthMode:</span> <span class="string">x509</span></span><br></pre></td></tr></table></figure><p>mongos 启动命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mongos --config &quot;etc/mongos/mongos_a_cfg.yaml&quot;</span><br><span class="line">mongos --config &quot;etc/mongos/mongos_b_cfg.yaml&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster Member <span class="built_in">enable</span> X503 authenticate, need auth access <span class="keyword">for</span> db</span></span><br><span class="line">mongo --port 27011 --tls &lt;&lt;EOF</span><br><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;mongo_super_user&quot;,</span><br><span class="line">    pwd: &quot;mongo_super_user_pwd&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;,</span><br><span class="line">      &#123; role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; &#125;,</span><br><span class="line">      &#123; role: &quot;clusterAdmin&quot;, &quot;db&quot; : &quot;admin&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongos 添加分片</span></span><br><span class="line">mongo --port 27011 --tls --username mongo_super_user --password mongo_super_user_pwd &lt;&lt;EOF</span><br><span class="line">sh.addShard( &quot;shard_a_repl/127.0.0.1:37017,127.0.0.1:37018,127.0.0.1:37019&quot;)</span><br><span class="line">EOF</span><br><span class="line">mongo --port 27012 --tls --username mongo_super_user --password mongo_super_user_pwd &lt;&lt;EOF</span><br><span class="line">sh.addShard( &quot;shard_a_repl/127.0.0.1:37017,127.0.0.1:37018,127.0.0.1:37019&quot;)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="4"><li>待分片集群初始化完成后, 我们即可通过如下命令走 TLS/SSL 加密通讯访问分片集群数据:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27011 --tls --username mongo_super_user --password mongo_super_user_pwd &lt;&lt;EOF</span><br><span class="line">show dbs;</span><br><span class="line"></span><br><span class="line">quit();</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>Good~</p><h2 id="%E7%BB%93%E8%AF%AD" tabindex="-1">结语</h2><p>好了, 相信你跟着本篇文章成功在本地环境部署了开启 TLS/SSL 加密通讯的副本集或者 MongoDB 分片集群, 我已经将相关配置文件整理到了 GitHub 仓库中方便你后续快速参考使用, 访问地址为: <a href="https://github.com/yeshan333/mongo-deployment-with-tls">https://github.com/yeshan333/mongo-deployment-with-tls</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yeshan333/mongo-deployment-with-tls.git</span><br><span class="line">cd /mongo-deployment-with-tls</span><br><span class="line"></span><br><span class="line">bash run.sh ReplicaSet</span><br></pre></td></tr></table></figure><h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2><ul><li><a href="https://www.mongodb.com/docs/manual/tutorial/configure-ssl/">MongoDB configure-ssl</a></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/MongoDB/">MongoDB</category>
      
      <category domain="https://yeshan333.github.io/categories/TLS-SSL/">TLS/SSL</category>
      
      
      <category domain="https://yeshan333.github.io/tags/MongoDB-ReplicaSet/">MongoDB-ReplicaSet</category>
      
      <category domain="https://yeshan333.github.io/tags/MongoDB-Sharding-Cluster/">MongoDB-Sharding-Cluster</category>
      
      <category domain="https://yeshan333.github.io/tags/TLS-SSL/">TLS/SSL</category>
      
      
      <comments>https://yeshan333.github.io/2025/02/06/mongodb-deployment-with-tls-and-mkcert/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Visual Studio Code 与微信开发者工具中调试使用 emscripten 基于 C 生成的 WASM 代码</title>
      <link>https://yeshan333.github.io/2025/01/08/debug-emscripten-wasm-in-vscode/</link>
      <guid>https://yeshan333.github.io/2025/01/08/debug-emscripten-wasm-in-vscode/</guid>
      <pubDate>Wed, 08 Jan 2025 00:30:39 GMT</pubDate>
      
      <description>在 Visual Studio Code 与微信开发者工具中调试 emscripten 生成的 WASM 代码</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近在尝试将一些 C/C++、Lua 项目挪到 Web 上跑, 接触到了 emscripten. 这里会介绍下在 Visual Studio Code 与微信开发者工具中调试使用 emscripten 基于 C 生成的 WASM 代码 (WebAssembly) 的一些方法.</p><h2 id="emscripten-%E4%B8%8E-webassebmly" tabindex="-1">Emscripten 与 WebAssebmly</h2><blockquote><p>WebAssembly 是一种新的编码方式, 可以在现代的 Web 浏览器中运行——它是一种低级的类汇编语言, 具有紧凑的二进制格式, 可以接近原生的性能运行, 并为诸如 C/C++、C# 和 Rust 等语言提供编译目标, 以便它们可以在 Web 上运行. 它也被设计为可以与 JavaScript 共存, 允许两者一起工作.  –<a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly">来自 MDN</a></p></blockquote><p><a href="https://emscripten.org/">Emscripten</a> 基于大名鼎鼎的 <a href="https://llvm.org/">LLVM</a> 提供了 C/C++ 生态下的编译工具链, 可以很方便的将 C/C++ 项目编译到 WASM, 然后放到 JS 环境 (Web、<a href="https://developers.weixin.qq.com/minigame/dev/guide/performance/perf-webassembly.html">微信小程序/游戏</a>、nodejs 等) 执行.<br>有很多著名的 C/C++ 生态下的工具通过它移植到了现代浏览器 (chrome、firefox 等) 中执行.</p><p>Emscripten 官方提供了 <a href="https://github.com/emscripten-core/emsdk">emsdk</a> 可以很方便的我们管理多个版本的编译工具链.</p><h2 id="vscode-%E4%B8%AD%E8%B0%83%E8%AF%95-webassembly-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95" tabindex="-1">vscode 中调试 WebAssembly 的基本方法</h2><p>现在在 vscode 中调试 WebAssembly 还是很方便的, 巨硬 (Microsoft) 在 2023 年就开发好了一个 vscode 插件去做支持, 见: <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging">WebAssembly DWARF Debugging</a>.<br>请确保你已经安装并启用了该扩展插件. 同时安装好了 Emscripten 相关编译工具链, 这里我们使用的版本如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ emcc -v</span><br><span class="line">emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 3.1.74 (1092ec30a3fb1d46b1782ff1b4db5094d3d06ae5)</span><br><span class="line">clang version 20.0.0git (https:/github.com/llvm/llvm-project 322eb1a92e6d4266184060346616fa0dbe39e731)</span><br><span class="line">Target: wasm32-unknown-emscripten</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /home/yeshan333/workspace/github/emsdk/upstream/bin</span><br></pre></td></tr></table></figure><p>这里我们已简单的单个 <code>fib.c</code> 文件的调试为例, <code>fib.c</code> 的内容如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fibonacci_recursive</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fibonacci_recursive(n - <span class="number">1</span>) + fibonacci_recursive(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fibonacci_iterative</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>, c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Recursive Fibonacci of %d is %d\n&quot;</span>, number, fibonacci_recursive(number));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Iterative Fibonacci of %d is %d\n&quot;</span>, number, fibonacci_iterative(number));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先通过 emcc 将 C 代码编译出 WASM, 如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -v fib.c -o fib.html</span><br></pre></td></tr></table></figure><p>上述命令执行完成后, 会生成三个文件: <code>fib.wasm</code>、<code>fib.html</code>、<code>fib.js</code>, 如果我们通过浏览器访问 <code>fib.html</code>, 可以在浏览器的调试控制台 (F12) 看到对应的斐波那契数的输出.</p><blockquote><p><code>fib.html</code> 是 emscripten 生成的演示页面, 背后会调用 <code>fib.js</code> 胶水层代码, 加载生成的 WEbAssembly 并执行对应 C 代码中的 main 函数. 具体原理可以查看源码并了解相关知识去理解.</p></blockquote><p><img src="https://d473472.webp.li/fib.png" alt="https://d473472.webp.li/fib.png"></p><p>如果本地环境安装有 Node.js. 那么我们也可以通过 node 执行胶水层代码 <code>fib.js</code>, 结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ node fib.js</span><br><span class="line">Recursive Fibonacci of 10 is 55</span><br><span class="line">Iterative Fibonacci of 10 is 55</span><br></pre></td></tr></table></figure><p>接下来我们将演示通过 vscode 的 debugger 调试器在 C 文件和 JS 文件中打断点调试生成的 WASM &amp; 胶水层 JS 代码, 实现单步调试.</p><h3 id="nodejs-%E4%B8%AD%E8%B0%83%E8%AF%95%E6%BC%94%E7%A4%BA" tabindex="-1">nodejs 中调试演示</h3><p>这里我们使用如下 <code>launch.json</code> 配置去调试 <code>fib.js</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WASM Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;skipFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/fib.js&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>vscode 下的 C 代码断点调试需要依赖 DWARF 调试信息 (注: 如果没有调试信息, 我们只能调试生成的 js 代码, 而不能直接在 C 中打断点), 我们使用 emcc 的 -g 编译参数, 让生成的 wasm 带上调试信息. 我们先通过如下命令编译 C 文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -g -v fib.c -o fib.html</span><br></pre></td></tr></table></figure><p>在 <code>run()</code> 函数处打一个断点, 然后在 <code>fib.c</code> 中 main 函数的两个 printf 中各打一个断点, 使用 F5 启动调试器即可开始调试. 演示 (GIF 加载可能稍久):</p><p><a href="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_nodejs.gif">https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_nodejs.gif</a></p><p><img src="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_nodejs.gif" alt="debug_in_nodejs.gif"></p><h3 id="%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95" tabindex="-1">连接到浏览器进行调试</h3><p>区别于上一小节中提到的 Node.js 环境下的调试方法, vscode 会负责启动 node 执行 <code>fib.js</code>. 这里介绍的 vscode 结合浏览器的调试方法, WASM 和 JS 代码将由浏览器负责执行, 我们使用 vscode 的 task 让 vscode 帮我们启动浏览器.</p><p>我们使用的 vscode <code>launch.json</code> 调试配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Chrome (fib.html)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chrome&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:3000/fib.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;StartHTTPServer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>&quot;preLaunchTask&quot;: &quot;StartHTTPServer&quot;</code> 说明会在调试开始前, 先执行一个名为 <code>StartHTTPServer</code> 的 vscode task. task 的配置同样可以放置于 .vscode 目录的 <code>tasks.json</code> 中</p><p><code>tasks.json</code> 配置如下, 这里会使用到微软提供的插件 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server">Live Preview</a>, 它会帮我们起一个 HTTP Server 去托管 HTML 文件 (<code>fib.html</code>):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;StartHTTPServer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;input:StartHTTPServer&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;StartHTTPServer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;command&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;livePreview.runServerLoggingTask&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们延用之前打断点的位置: 在 <code>run()</code> 函数处打一个断点, 然后在 <code>fib.c</code> 中 main 函数的两个 printf 中各打一个断点. 启动配置好的调试配置.</p><blockquote><p>注: 编译命令仍然是: <code>emcc -g -v fib.c -o fib.html</code></p></blockquote><p>演示 (GIF 加载可能稍久):</p><p><a href="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome.gif">https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome.gif</a></p><p><img src="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome.gif" alt="debug_in_chrome.gif"></p><p>F5 启动调试后, 会有一个 chrome 浏览器调试窗口被拉起, 在 vscode 编译器可以观察到, 断点能正常执行. 于此同时, 我们也可以在浏览器开发者工具的 Debugger 中观察到断点的执行.</p><p>如果你细心观察可以看到, 调试器执行到 C 文件时, 区别于 vscode 编辑器会跳转到对应的 C 代码行, chrome 浏览器开发者工具跳转的却是 wasm 文本格式代码, 这个问题我们可以在编译的时候生成 wasm 文件的 source-map 去解决, 编译命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保生成的 source-map 文件 fib.wasm.map 能在 --source-map-base 指定的 HTTP Server 中找到</span></span><br><span class="line">emcc -g -v fib.c -o fib.html -gsource-map --source-map-base=http://localhost:3000/</span><br></pre></td></tr></table></figure><p>此后, 重新启动调试器, 我们也可以在浏览器的开发者工具中观察到随着调试的执行, 可以正确跳到被打断点的对应 C 代码行, 而不是对应的 wasm 文本表示格式中的代码行, 浏览器会自动读取 source-map 文件找到对应代码文件的位置.</p><p>演示 (GIF 加载可能稍久):</p><p><a href="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome_with_sourcemap.gif">https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome_with_sourcemap.gif</a></p><p><img src="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_chrome_with_sourcemap.gif" alt="debug_in_chrome_with_sourcemap.gif"></p><h3 id="%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95" tabindex="-1">微信开发者工具中的调试</h3><p>现在有很多的基于 C/C++ 写的游戏移植到了微信平台上, 基于上文浏览器的调试方法, 我们可以在微信开发者工具中达到类似的效果, 在 C 中打断点, 进行小程序/小游戏项目的调试. 我创建了一个小型项目, 可以将其导入 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信的开发者工具</a> 进行尝试. 快速尝试下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yeshan333/emcc_playground.git</span><br><span class="line"></span><br><span class="line">cd emcc_playground/debug-blogpost</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译出 wasm</span></span><br><span class="line">emcc -g -v unalign.cc -o unalign.html -gsource-map --source-map-base=http://localhost:3000/ -sSAFE_HEAP=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个 http server 将 debug-blogpost 目录暴露出去, 使用的地址端口需要与 --source-map-base 中指定的一致, 方便微信开发者工具读取</span></span><br><span class="line">npx serve .</span><br></pre></td></tr></table></figure><p>微信开发者工具打开 <strong>debug-blogpost</strong> 目录, 打开调试器, 在 Sources -&gt; Page --&gt; localhost:3000 出能看到对应的 C 文件, 并且可以使用 debugger 打断点:</p><p><img src="https://d473472.webp.li/debug_scope.png" alt="debug_scope.png"></p><p>演示（Windows + 微信开发者工具预发布版 RC Build (1.06.2412031) + Wechat Lib:3.7.2, 2024.12.23 10:35:40）: (GIF 加载可能稍久)</p><p><a href="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_wechatdev.gif">https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_wechatdev.gif</a></p><p><img src="https://pub-a8b9801c20ad491b964fc0e49c81cdb7.r2.dev/debug_in_wechatdev.gif" alt="debug_in_wechatdev.gif"></p><h3 id="%E6%B3%A8%E6%84%8F" tabindex="-1">注意</h3><p>Node.js 环境目前尚未支持读取 WebAssembly 的 source-map, 编译出的 wasm 即便带了 DWARF 调试信息, 堆栈只能看到符号, 看不到 C 符号对应的源文件, 例如有这样<br>一个 C++ 文件 <code>unalign.cc</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/3dgen/cppwasm-book/blob/master/wasm-in-action-book-examples/ch5/02/unaligned.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EM_PORT_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__EMSCRIPTEN__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;emscripten.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_PORT_API(rettype) extern <span class="string">&quot;C&quot;</span> rettype EMSCRIPTEN_KEEPALIVE</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_PORT_API(rettype) rettype EMSCRIPTEN_KEEPALIVE</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_PORT_API(rettype) extern <span class="string">&quot;C&quot;</span> rettype</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_PORT_API(rettype) rettype</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ST</span> &#123;</span><br><span class="line"><span class="type">uint8_t</span>c[<span class="number">4</span>];</span><br><span class="line"><span class="type">float</span>f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">throw_unalign_err</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> *buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">ST *pst = (ST*)(buf + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">pst-&gt;c[<span class="number">0</span>] = pst-&gt;c[<span class="number">1</span>] = pst-&gt;c[<span class="number">2</span>] = pst-&gt;c[<span class="number">3</span>] = <span class="number">123</span>;</span><br><span class="line">pst-&gt;f = <span class="number">3.14f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c[0]:%d,c[1]:%d,c[2]:%d,c[3]:%d,f:%f\n&quot;</span>,</span><br><span class="line">pst-&gt;c[<span class="number">0</span>], pst-&gt;c[<span class="number">1</span>], pst-&gt;c[<span class="number">2</span>], pst-&gt;c[<span class="number">3</span>], pst-&gt;f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">throw_unalign_err</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 emcc 编译它, 命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc -g -v unalign.cc -o unalign.html -gsource-map --source-map-base=http://localhost:3000/ -sSAFE_HEAP=1</span><br></pre></td></tr></table></figure><p>然后使用 Node.js 执行编译出来的胶水文件, 会得到类似下面的结果, 有一个内存对齐错误, 堆栈上可以看到问题出现在 <code>throw_unalign_err</code>. 但我们看不到符号对应的源文件.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">❯ node --enable-source-maps unalign.js</span><br><span class="line">Hello, World!</span><br><span class="line">Aborted(alignment fault)</span><br><span class="line">/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:613</span><br><span class="line">  /** @suppress &#123;checkTypes&#125; */ var e = new WebAssembly.RuntimeError(what);</span><br><span class="line">                                        ^</span><br><span class="line"></span><br><span class="line">RuntimeError: Aborted(alignment fault)</span><br><span class="line">    at abort (/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:613:41)</span><br><span class="line">    at alignfault (/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:335:3)</span><br><span class="line">    at unalign.wasm (wasm://wasm/unalign.wasm-00091ee6:wasm-function[107]:0x56e4)</span><br><span class="line">    at unalign.wasm.throw_unalign_err() (wasm://wasm/unalign.wasm-00091ee6:wasm-function[6]:0x42f)</span><br><span class="line">    at unalign.wasm.__original_main (wasm://wasm/unalign.wasm-00091ee6:wasm-function[7]:0x4f2)</span><br><span class="line">    at unalign.wasm.main (wasm://wasm/unalign.wasm-00091ee6:wasm-function[8]:0x50f)</span><br><span class="line">    at /home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:682:12</span><br><span class="line">    at callMain (/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:1383:15)</span><br><span class="line">    at doRun (/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:1421:23)</span><br><span class="line">    at run (/home/yeshan333/workspace/playground/emcc_playground/debug-blogpost/unalign.js:1431:5)</span><br></pre></td></tr></table></figure><p>但是如果是在 Web 浏览器环境（chrome）中, 我们能看到符号所在的 C 源文件, 打开 <code>unalign.html</code>, 我们能看到如下堆栈:</p><p><img src="https://d473472.webp.li/unalign_stacktrace_in_browser.png" alt="unalign_stacktrace_in_browser"></p><h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging">https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging</a></li><li><a href="https://juejin.cn/post/7388064351504498703">VSCode调试的两种模式: launch 和 attach</a></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/WebAssembly/">WebAssembly</category>
      
      
      <category domain="https://yeshan333.github.io/tags/WebAssembly/">WebAssembly</category>
      
      <category domain="https://yeshan333.github.io/tags/WeChat/">WeChat</category>
      
      <category domain="https://yeshan333.github.io/tags/emscripten/">emscripten</category>
      
      <category domain="https://yeshan333.github.io/tags/vscode/">vscode</category>
      
      
      <comments>https://yeshan333.github.io/2025/01/08/debug-emscripten-wasm-in-vscode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(Amazing!) 通过 vfox 在 Windows 上安装管理多个 Erlang/OTP 和 Elixir 的版本</title>
      <link>https://yeshan333.github.io/2024/06/18/install-erlang-and-elixir-via-vfox-on-windows/</link>
      <guid>https://yeshan333.github.io/2024/06/18/install-erlang-and-elixir-via-vfox-on-windows/</guid>
      <pubDate>Tue, 18 Jun 2024 22:58:39 GMT</pubDate>
      
      <description>通过 vfox 安装在 Windows 上管理多个 Erlang/OTP 和 Elixir 的版本</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>大概一个多月前, 我写了篇关于如何使用跨平台版本管理工具 vfox 在 Linux 系统下安装管理多个 Erlang/OTP 版本的文章 -&gt; <a href="https://shan333.cn/2024/04/27/install-erlang-and-elixir-via-vfox/">通过 vfox 安装管理多版本 Erlang 和 Elixir</a>. 文章使用的示范操作系统是 Ubuntu 20.04 Linux 操作系统.</p><p>最近 <a href="https://github.com/version-fox/vfox-erlang">vfox-erlang</a> 和 <a href="https://github.com/version-fox/vfox-elixir">vfox-elixir</a> 插件的最新版本已经支持了在 Windows 平台下安装管理多个 Erlang/OTP 和 Elixir 的版本. 且已经通过了 <a href="https://en.wikipedia.org/wiki/System_testing">End to End</a> 测试 -&gt; <a href="https://github.com/version-fox/vfox-elixir/actions/runs/9566734284">Testing</a>.</p><p><img src="https://telegraph.shansan.top/file/bb7f655d91fc39e97c57c.png" alt="E2E testing"></p><p>本篇文章将会以 Windows 10 操作系统为例, 教你如何在 Windows 平台安装和管理多个 Erlang/OTP 和 Elixir 版本.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Get-ComputerInfo</span></span><br><span class="line">WindowsBuildLabEx                                       : <span class="number">22621.1</span>.amd64fre.ni_release.<span class="number">220506</span><span class="literal">-1250</span></span><br><span class="line">WindowsCurrentVersion                                   : <span class="number">6.3</span></span><br><span class="line">WindowsInstallationType                                 : Client</span><br><span class="line">WindowsProductName                                      : Windows <span class="number">10</span> Pro</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="1%E3%80%81%E5%AE%89%E8%A3%85-vfox" tabindex="-1">1、安装 vfox</h2><p><a href="https://vfox.lhan.me/">vfox</a> (version-fox) 是最近比较热门的一个跨平台通用版本管理工具, 使用 Go 语言进行编写, 插件机制使用了 Lua 去实现扩展性. 目前 vfox 已经支持管理大多数主流编程语言的版本, 生态还算强大. 在这里你可以看到目前 vfox 所支持管理的编程语言版本和工具 -&gt; <a href="https://vfox.lhan.me/plugins/available.html">vfox-Available Plugins</a>.</p><p>请确安装 0.5.3 及以上版本的 vfox, 否则 <a href="https://github.com/version-fox/vfox-erlang">vfox-erlang</a> 和 <a href="https://github.com/version-fox/vfox-elixir">vfox-elixir</a> 将无法正常工作. 在这里我们通过 <a href="https://github.com/microsoft/winget-cli">winget</a> 安装 vfox:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">winget install vfox</span></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">❯ vfox -version</span><br><span class="line">vfox version 0.5.3</span><br></pre></td></tr></table></figure><p>为了能让 vfox 找到已经安装的 Elixir 和 Erlang 版本, 需要将 vfox 默认挂载到 powershell 中:</p><p>打开 PowerShell 配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Type File -Path $PROFILE # 无需在意 `文件已存在` 错误</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果它提示未能找到路径, 那么你需要强制创建 profile. 添加 <span class="string">&quot;-Force&quot;</span> 选项.</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">New-Item -Type File -Path <span class="variable">$PROFILE</span> –Force</span></span><br><span class="line"></span><br><span class="line">Invoke-Item $PROFILE # 打开 profile</span><br></pre></td></tr></table></figure><p>将下面一行添加到你的 $PROFILE 文件末尾并保存:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression &quot;$(vfox activate pwsh)&quot;</span><br></pre></td></tr></table></figure><p>如果powershell提示: <code>在此系统上禁止运行脚本</code>, 那么请你<strong>以管理员身份重新运行powershell</strong>输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后输入Y, 按回车</span></span><br><span class="line">y</span><br></pre></td></tr></table></figure><p>你也可以参考官方文档安装 vfox -&gt; <a href="https://vfox.lhan.me/guides/quick-start.html">https://vfox.lhan.me/guides/quick-start.html</a>. 安装好 vfox 之后, 我们再安装下版本管理插件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 vfox-erlang 插件</span></span><br><span class="line">vfox add erlang</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 vfox-elixir 插件</span></span><br><span class="line">vfox add elixir</span><br></pre></td></tr></table></figure><p>安装完成后就可以使用这两个 vfox 插件 <a href="https://github.com/version-fox/vfox-erlang">vfox-erlang</a> 和 <a href="https://github.com/version-fox/vfox-elixir">vfox-elixir</a> 在 Windows 平台去安装管理多个 Erlang 和 Elixir 的版本了.</p><h2 id="2%E3%80%81%E9%80%9A%E8%BF%87-vfox-erlang-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-erlang%2Fotp" tabindex="-1">2、通过 vfox-erlang 插件安装 Erlang/OTP</h2><p>因为 Elixir 依赖于 Erlang/OTP, 所以在安装 Elixir 之前, 我们需要先安装下 Erlang/OTP. 如果你已经通过其他方式安装了 Erlang/OTP, 请确保后续通过 vfox-elixir 安装的 Elixir 版本与它是兼容的, 可以查看 Elixir 官方文档说明去确认这一点 <a href="https://hexdocs.pm/elixir/1.16.2/compatibility-and-deprecations.html#between-elixir-and-erlang-otp">between-elixir-and-erlang-otp</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 vfox search 找到你想要安装的版本</span></span><br><span class="line">❯ vfox search erlang</span><br><span class="line">Please select a version of erlang [type to search]: </span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"> v25.0.4</span></span><br><span class="line">   v24.3.4.16</span><br><span class="line">   v24.1.3</span><br><span class="line">   v24.0</span><br><span class="line">   v24.3</span><br><span class="line">   v24.3.2</span><br><span class="line">   v25.2</span><br><span class="line">   v27.0-rc2</span><br><span class="line">   v24.3.4.1</span><br><span class="line">Press ↑/↓ to select and press ←/→ to page, and press Enter to confirm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然你也可以指定安装一个版本, 比如</span></span><br><span class="line">vfox install erlang@26.2.2</span><br></pre></td></tr></table></figure><p>理论上, 你可以安装任何一个出现在 <a href="https://github.com/erlang/otp/releases">https://github.com/erlang/otp/releases</a> 中包含 exe 文件的发行版本. 当你看到如下信息, 就表明安装完成了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile info.......</span><br><span class="line">...</span><br><span class="line">Install erlang@26.2.2 success! </span><br><span class="line">Please use vfox use erlang@26.2.2 to use it.</span><br></pre></td></tr></table></figure><p>我们使用 vfox 切换下到刚才安装好的 Erlang/OTP 版本来验证下安装是否成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ vfox use -g erlang@26.2.2</span><br><span class="line">Now using erlang@26.2.2.</span><br><span class="line">❯ erl</span><br><span class="line">Erlang/OTP 26 [erts-14.2.2] [source] [64-bit] [smp:16:16] [ds:16:16:10] [async-threads:1] [jit:ns]</span><br><span class="line"></span><br><span class="line">Eshell V14.2.2 (press Ctrl+G to abort, type help(). for help)</span><br><span class="line"><span class="meta prompt_">1&gt; </span></span><br></pre></td></tr></table></figure><p>如果能正确唤醒 REPL (Read-Eval-Print Loop) 交互式命令行, 那么安装就好啦~. 接下来开始安装 Elixir 吧~</p><h2 id="3%E3%80%81-%E9%80%9A%E8%BF%87-vfox-elixir-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-elixir" tabindex="-1">3、 通过 vfox-elixir 插件安装 Elixir</h2><p>在开始安装指定的 Elixir 版本之前, 请确保当前安装的 shell 能找到已经安装好 Erlang/OTP 版本相关工具链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换 Erlang/OTP 版本</span></span><br><span class="line">vfox use -g erlang@26.2.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装一个与 Erlang/OTP 版本兼容的 Elixir 版本</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vfox search elixir</span></span><br><span class="line">Please select a version of elixir to install [type to search]:</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"> v1.16.2-elixir-otp-26</span></span><br><span class="line">   v1.16.2-elixir-otp-25</span><br><span class="line">   v1.16.2-elixir-otp-24</span><br><span class="line">   v1.16.1-elixir-otp-26</span><br><span class="line">   v1.16.1-elixir-otp-25</span><br><span class="line">   v1.16.1-elixir-otp-24</span><br><span class="line">   v1.16.0-rc.1-elixir-otp-26</span><br><span class="line">   v1.16.0-rc.1-elixir-otp-25</span><br><span class="line">   v1.16.0-rc.1-elixir-otp-24</span><br><span class="line">   v1.16.0-rc.0-elixir-otp-26</span><br><span class="line">   v1.16.0-rc.0-elixir-otp-25</span><br><span class="line">   v1.16.0-rc.0-elixir-otp-24</span><br><span class="line">   v1.16.0-elixir-otp-26</span><br><span class="line">   v1.16.0-elixir-otp-25</span><br><span class="line">   v1.16.0-elixir-otp-24</span><br><span class="line">   v1.15.7-elixir-otp-26</span><br><span class="line">   v1.15.7-elixir-otp-25</span><br><span class="line">   v1.15.7-elixir-otp-24</span><br><span class="line">   v1.15.6-elixir-otp-26</span><br><span class="line">   v1.15.6-elixir-otp-25</span><br><span class="line">Press ↑/↓ to select and press ←/→ to page, and press Enter to confirm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如</span></span><br><span class="line">vfox install elixir@v1.16.1-elixir-otp-26</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">Install elixir@1.16.1-elixir-otp-26 success!</span><br><span class="line">Please use vfox use elixir@1.16.1-elixir-otp-26 to use it.</span><br></pre></td></tr></table></figure><p>当你看到形如 <code>Install elixir@1.16.1-elixir-otp-26 success! Please use vfox use elixir@1.16.1-elixir-otp-26 to use it.</code> 相关信息, 就代表安装已经完成了, 接下来验证下可用性:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ vfox use -g elixir@1.16.1-elixir-otp-26</span><br><span class="line">Now using elixir@1.15.2.</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">iex.bat</span></span><br><span class="line">Erlang/OTP 26 [erts-14.2.5] [source] [64-bit] [smp:16:16] [ds:16:16:10] [async-threads:1] [jit:ns]                                                                                                                                              Interactive Elixir (1.16.1) - press Ctrl+C to exit (type h() ENTER for help)</span><br><span class="line"><span class="meta prompt_">iex(1)&gt;</span></span><br></pre></td></tr></table></figure><p>Elixir 的 REPL (Read-Eval-Print Loop) 交互式命令行能正常打开的话, 那么安装时成功且可用的.</p><h2 id="%E6%9C%80%E5%90%8E" tabindex="-1">最后</h2><p>vfox 的两个安装管理 Erlang/OTP 和 Elixir 版本的插件同时也支持在 Uinx-like (Linux &amp; Darwin MacOS) 系统下管理多个版本. 你可以查看这个文档去了解更多信息: <a href="https://github.com/version-fox/vfox-elixir">https://github.com/version-fox/vfox-elixir</a>. 全平台操作系统支持~</p><p>Happy &amp; funny!</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/vfox/">vfox</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Elixir/">Elixir</category>
      
      <category domain="https://yeshan333.github.io/tags/Erlang/">Erlang</category>
      
      <category domain="https://yeshan333.github.io/tags/vfox/">vfox</category>
      
      <category domain="https://yeshan333.github.io/tags/Windows/">Windows</category>
      
      
      <comments>https://yeshan333.github.io/2024/06/18/install-erlang-and-elixir-via-vfox-on-windows/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>手把手教你如何在 Sider (ChatGPT Sidebar) 中免费使用通义千问</title>
      <link>https://yeshan333.github.io/2024/05/29/free-to-use-sider-with-qwen/</link>
      <guid>https://yeshan333.github.io/2024/05/29/free-to-use-sider-with-qwen/</guid>
      <pubDate>Wed, 29 May 2024 00:29:49 GMT</pubDate>
      
      <description>手把手教你如何在 Sider (ChatGPT Sidebar) 中免费使用通义千问</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近国产大模型正在疯狂降价，推出了众多的免费策略，是时候该“白嫖”一手了。用过 Sider 的小伙伴应该很少有说不“妙”啊，用户体验也做得很棒。奈何它要开通使用全部的功能价格有可能不太能承受，且有些功能不一定用得上。但是免费，又有一定的额度和次数限制。Sider 其实是支持用户使用自己的 OpenAI 密钥的，但 OpenAI 的价格也不太低呐。</p><p>接下来本文将会介绍如何在 Sider 中“免费”使用通义千问。足够大部分场景的使用了。</p><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-sider-(chatgpt-sidebar)" tabindex="-1">什么是 Sider (ChatGPT Sidebar)</h2><blockquote><p>Sider 是一款智能工具,可以添加到您的浏览器中,帮助您轻松完成各种在线任务。它使用 ChatGPT、GPT-4、Gemini 和 Claude 3 等 API,可以帮助您进行写作、阅读、聊天以及内容摘要等。以下是 Sider 的主要功能:</p></blockquote><blockquote><p>聊天任何话题、文件、图像 - 您可以就任何感兴趣的话题进行聊天, 甚至可以向 Sider 展示图片或文档,它会给出清晰的答复或建议,让每次聊天都很有趣且有帮助。</p></blockquote><blockquote><p>更快地阅读网页、选定文本、电子邮件 - Sider 可以帮助您更快地浏览网页、文本和电子邮件, 提供要点总结, 让您轻松快速地浏览长篇文章或消息。</p></blockquote><blockquote><p>更好地写作任何内容 - 无论是电子邮件、文章还是消息, Sider 都可以帮助您改善写作质量,提供建议以使您的写作更符合您的风格和目的。</p></blockquote><blockquote><p>等等</p></blockquote><p>访问产品官网即可在浏览器快速安装 Sider 插件: <a href="https://sider.ai/zh-CN/">https://sider.ai/zh-CN/</a></p><h2 id="%E5%9C%A8-sider-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%9A%E4%B9%89%E5%8D%83%E9%97%AE" tabindex="-1">在 Sider 浏览器插件中使用通义千问</h2><blockquote><p>&quot;通义千问&quot;是阿里云开发的一款大型语言模型.</p></blockquote><p>如果你用过 Sider，应该知道能在通用配置处配置自己的 OpenAI 密钥的。要想在 Sider 中使用通义千问大模型，我们也需要用到这个配置。</p><p>最近阿里云的灵积模型服务开放 API 出了 OpenAI 的兼容模式接口 -&gt; <a href="https://help.aliyun.com/zh/dashscope/developer-reference/compatibility-of-openai-with-dashscope/?spm=a2c4g.11186623.0.0.5ded5b78He8YAy">OpenAI接口兼容</a>, 这意味着我们使用这个兼容接口作为 Sider 插件的配置即可使用通义千问。如下图，我们有三个配置需要填写：</p><p><img src="https://telegraph.shansan.top/file/347edb0faac6d22aec6b4.png" alt="settings"></p><ul><li>1、API Key 从阿里云的模型服务灵积控制台获取 -&gt; <a href="https://help.aliyun.com/zh/dashscope/opening-service?spm=a2c4g.11186623.0.0.4262fa70VPao9L">获取 API Key</a></li><li>2、url 填写：<a href="https://dashscope.aliyuncs.com/compatible-mode">https://dashscope.aliyuncs.com/compatible-mode</a></li><li>3、使用自定义模型名称，Model Name 填写你想使用的大模型名字，比如 qwen-turbo, 模型可以从这里找到: <a href="https://help.aliyun.com/zh/dashscope/developer-reference/model-introduction?spm=a2c4g.11186623.0.0.2167140baXMR9G">通义前文-模型概览</a></li></ul><p>配置完成之后，就可以直接使用它啦~</p><p><img src="https://telegraph.shansan.top/file/d5e6ebefdc52698262021.png" alt="demo"></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      <category domain="https://yeshan333.github.io/categories/LLMs/">LLMs</category>
      
      <category domain="https://yeshan333.github.io/categories/Sider/">Sider</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Sider/">Sider</category>
      
      <category domain="https://yeshan333.github.io/tags/%E9%80%9A%E4%B9%89%E5%8D%83%E9%97%AE/">通义千问</category>
      
      
      <comments>https://yeshan333.github.io/2024/05/29/free-to-use-sider-with-qwen/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 vscode 插件 vscode-jenkins-pipeline-linter-connector 和 LLMs 大模型校验你的 Jenkinsfile</title>
      <link>https://yeshan333.github.io/2024/05/25/validate-jenkinsfile/</link>
      <guid>https://yeshan333.github.io/2024/05/25/validate-jenkinsfile/</guid>
      <pubDate>Sat, 25 May 2024 17:05:12 GMT</pubDate>
      
      <description>使用 vscode 插件 vscode-jenkins-pipeline-linter-connector 和 LLMs 校验你的 Jenkinsfile</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.jenkins.io/">Jenkins</a> 一直以来都是比较热门的用来做 CI/CD 的自动化工具, 如果你使用过 GitHub Action, 和它类似, 现在大多数的自动化工具都会提供 DSL（领域特定语言）去描述 &amp; 编排自动化工作流, Jenkins 的 <a href="https://www.jenkins.io/doc/book/pipeline/syntax/">Pipeline Syntax</a> 就是 Jenkins 提供的编排语言, 对应的编排文件一般称之为 Jenkinsfile, 语法规则和 Groovy 很类似.</p><p>我平常使用 Declarative Pipeline Syntax 比较多, Jenkinsfile 的管理一般都会使用一个 Git 仓库. 在本地编辑完成之后一直比较头疼的是语法的校验, 经常需要代码提交之后实际去跑 Pipeline 才能确认有没有语法问题.</p><p>其实这个语法校验在 Jenkins 的 UI 上配置是自带的, 但总不能每次在代码编辑器编辑之后再拷贝上去吧, Jenkins 的官方文档也有建议本地开发 Pipeline 的使用可以使用什么工具链 <a href="https://www.jenkins.io/doc/book/pipeline/development/#pipeline-development-tools">pipeline-development-tools</a>. 可以使用命令行工具、Jenkins Open API、IDE 插件等可以去使用.</p><p>日常使用 Visual Studio Code 比较多, 所以最终选择了 vscode 的插件 <code>vscode-jenkins-pipeline-linter-connector</code>, 这个插件原理实现上还是通过将 Jenkinsfile 的内容通过 API 提交给 Jenkins 去校验的.</p><p>不过插件已经年久失修了, 代码比较久了, 实际的使用上遇到了不少的问题, 例如:</p><ul><li>Jenkinsfile 带有中文的话校验结果显示容易乱码, 比如这个 Jenkinsfile:</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello中文&gt;&gt;&gt;&gt;&gt;&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Hello Worl中文</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>校验结果返回会有段乱码, 如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 6: unexpected char: 0xB8 @ line 6, column 36.</span><br><span class="line">                   echo &#x27;Hello World&#x27;ä¸­æ��</span><br></pre></td></tr></table></figure><p>插件实现依赖的基础库也比较老了, 所以我 fork 了一下原来插件, 做了下代码重构和部分问题的修复 &amp; 优化工作, 主要如下:</p><ul><li>修复 Jenkinsfile 中文乱码问题.</li><li>可以在不保存 Jenkinsfile 的时候直接进行校验.</li><li>文件保存的时候立即自动触发校验.</li><li>支持控制什么样的文件名可以进行校验, 相当于一个白名单机制, 可能会有些人会将工作流定义写在另外的文件名下, 比如: <code>workflows.jenkins</code> 等, 所以才有了这个特性.</li><li>引入 <code>langchain.js</code> 和 Cloudflare 免费的 <a href="https://developers.cloudflare.com/workers-ai/get-started/rest-api/">Workers AI REST API</a> 配置大模型做 Review.</li><li>…</li></ul><p>插件现在已经同步发布到了 Visual Studio Code 商店和 Open VSX Registry 中, 理论上你可以在 <a href="https://code.visualstudio.com/">Microsoft Visual Studio Code</a>、<a href="https://github.com/coder/code-server">code-server</a>、<a href="https://vscodium.com/">VSCodium</a> 等 vscode 系列 IDE 中使用到它, 链接如下:</p><ul><li>Microsoft Visual Studio Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=yeshan333.jenkins-pipeline-linter-connector-fork">https://marketplace.visualstudio.com/items?itemName=yeshan333.jenkins-pipeline-linter-connector-fork</a></li><li>Open VSX Registry: <a href="https://marketplace.visualstudio.com/items?itemName=yeshan333.jenkins-pipeline-linter-connector-fork">https://marketplace.visualstudio.com/items?itemName=yeshan333.jenkins-pipeline-linter-connector-fork</a></li></ul><p>现在你应该能在插件搜索里搜索到它, 使用 <code>yeshan333.jenkins-pipeline-linter-connector-fork</code> 去搜索安装即可:</p><p><img src="https://telegraph.shansan.top/file/ca35ab00c512683aff15a.png" alt="search extendsion"></p><h2 id="%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6" tabindex="-1">配置插件</h2><p>插件的文档里已经给出了几个示例配置, 将配置填入你的 vscode 用户配置 json 文件中即可:</p><p><img src="https://telegraph.shansan.top/file/09b95699e28b2bafe3149.png" alt="settings"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://jenkins.shan333.cn/pipeline-model-converter/validate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jenkins_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jenkins_password&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>将 url、用户密码替换成你自己的 Jenkins 即可. 当然你也可以在插件配置处直接进行配置:</p><p><img src="https://telegraph.shansan.top/file/0ddecbae6772b5d22432b.png" alt="settings"></p><p>配置完成之后直接通过命令面板 (Command Pallette) 使用 <code>Validate Jenkins</code> 即可开启 Jenkinsfile 校验:</p><p><img src="https://github.com/yeshan333/vscode-jenkins-pipeline-linter-connector/raw/master/images/example_with_syntax_error.gif" alt="https://github.com/yeshan333/vscode-jenkins-pipeline-linter-connector/raw/master/images/example_with_syntax_error.gif"></p><p>接下来介绍如何使用 LLM 去帮你评审 Jenkinsfile.</p><h3 id="%E4%BD%BF%E7%94%A8-llm-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%84%E5%AE%A1%E4%BD%A0%E7%9A%84-jenkinsfile" tabindex="-1">使用 LLM 大模型评审你的 Jenkinsfile</h3><p>这一功能默认是关闭的, 需要通过配置 <code>jenkins.pipeline.linter.connector.llm.enable</code> 去开启,</p><p>功能开启之后我们还需要几个填写几个关键配置, 如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.llm.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.llm.baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.cloudflare.com/client/v4/accounts/&lt;CF_ACCOUNT_ID&gt;/ai/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.llm.modelName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@cf/meta/llama-2-7b-chat-fp16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jenkins.pipeline.linter.connector.llm.apiKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;CF_API_TOKEN&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中 <code>baseUrl</code> 和 <code>apiKey</code> 需要我们到 Cloudflare 用户管理后台申请.</p><p>插件默认会使用 Cloudflare Workers AI REST API 提供的文本生成模型去评审 review 我们的 Jenkinsfile, 目前它提供免费额度基本够日常使用.</p><p><strong>Step 1</strong>: 你需要先按照 Cloudflare 提供的文档去获取 API 访问的密钥 -&gt; <a href="https://developers.cloudflare.com/workers-ai/get-started/rest-api/">Get started with the Workers AI REST API</a>, 将获取到的 API Token 填入配置 <code>&quot;jenkins.pipeline.linter.connector.llm.apiKey&quot;</code> 中.</p><p><img src="https://telegraph.shansan.top/file/3856642f14eb9c17411bc.png" alt="GET API Token and ACCOUND_ID"></p><p><strong>Step 2</strong>: 在上一步, 你在申请的时候也会拿到一个 Account ID, 这个 ACCOUNT ID 用于组装配置 <code>&quot;jenkins.pipeline.linter.connector.llm.baseUrl&quot;</code>, 将 <code>&quot;https://api.cloudflare.com/client/v4/accounts/&lt;CF_ACCOUNT_ID&gt;/ai/v1&quot;</code> 的 <code>&lt;CF_ACCOUNT_ID&gt;</code> 替换为你的 Account ID 即可</p><p>配置 <code>jenkins.pipeline.linter.connector.llm.modelName</code> 是可选地, 你可以选用 <a href="https://developers.cloudflare.com/workers-ai/models/#text-generation">https://developers.cloudflare.com/workers-ai/models/#text-generation</a> 提到的任意一个文本生成模型去做评审.</p><p>将上述配置配置完成之后, 通过 vscode 命令面板 (Command Pallette) 使用 <code>Validate Jenkins</code> 开启 Jenkinsfile 校验的同时也会同时向大模型询问评审意见, 大致效果如下:</p><p><img src="https://telegraph.shansan.top/file/9052330caafc891b5e282.png" alt="review with LLMs"></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Jenkins/">Jenkins</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Jenkins/">Jenkins</category>
      
      <category domain="https://yeshan333.github.io/tags/Cloudflare/">Cloudflare</category>
      
      <category domain="https://yeshan333.github.io/tags/Workers-AI/">Workers AI</category>
      
      <category domain="https://yeshan333.github.io/tags/Langchain/">Langchain</category>
      
      <category domain="https://yeshan333.github.io/tags/LLMs/">LLMs</category>
      
      
      <comments>https://yeshan333.github.io/2024/05/25/validate-jenkinsfile/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>etcd 和 MongoDB 的混沌（故障）测试方法</title>
      <link>https://yeshan333.github.io/2024/05/18/etcd-and-mongodb-chaos-testing/</link>
      <guid>https://yeshan333.github.io/2024/05/18/etcd-and-mongodb-chaos-testing/</guid>
      <pubDate>Sat, 18 May 2024 15:02:09 GMT</pubDate>
      
      <description>etcd 和 MongoDB 的混沌（故障）测试方法</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近在对一些自建的数据库 driver/client 基础库的健壮性做混沌（故障）测试, 去验证了解业务的故障处理机制和恢复时长. 主要涉及到了 MongoDB 和 etcd 这两个基础组件. 本文会介绍下相关的测试方法.</p><h2 id="mongodb-%E4%B8%AD%E7%9A%84%E6%95%85%E9%9A%9C%E6%B5%8B%E8%AF%95" tabindex="-1">MongoDB 中的故障测试</h2><blockquote><p>MongoDB 是比较世界上热门的文档型数据库, 支持 ACID 事务、分布式等特性.</p></blockquote><p>社区上大部分对 MongoDB 进行混沌（故障）测试的文章大多都是外围通过对 monogd 或 mongos 进行做处理进行模拟的. 比如如果想要让 MongoDB 自己触发副本集切换, 可以通过一下这样一段 shell 脚本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将副本集主节点进程挂死</span></span><br><span class="line">kill -s STOP &lt;mongodb-primary-pid&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂死之后, 业务受损, MongoDB 在几秒到十几秒应该会进程主备切换</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换完成后, 业务能自动将连接切换到新的工作正常的主节点, 无需人工干预, 业务恢复正常</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里一般验证的是 Mongo Client Driver 的可靠性</span></span><br></pre></td></tr></table></figure><p>上面提到的手段一般是系统层级的, 如果我们只是想要模拟某个 MongoDB command 命令遇到网络问题了, 怎么做？进一步想要进行更细粒度的测试. 其实 MongoDB 在 4.x 以上版本内部已经实现了一套可控的故障点模拟机制 -&gt; <a href="https://github.com/mongodb/mongo/wiki/The-failCommand-fail-point">failCommand</a>.</p><p>在测试环境部署 MongoDB 副本集的时候, 一般可以通过以下方式启动这个特性:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --setParameter enableTestCommands=1</span><br></pre></td></tr></table></figure><p>然后我们可以通过 mongo shell 针对特定的 command 开启故障点, 例如针对一次 <code>find</code> 操作让其返回错误码 2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.adminCommand(&#123;</span><br><span class="line">    configureFailPoint: &quot;failCommand&quot;,</span><br><span class="line">    mode: &#123;</span><br><span class="line">      &quot;times&quot;: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;errorCode: 2, failCommands: [&quot;find&quot;]&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这些故障点模拟是可控的, 成本相对于必直接在机器上搞破坏比较低, 也很适合融入持续集成自动化流程. MongoDB 内置的故障点机制还支持了很多的特性, 比如让某个故障概率发生、返回任意 MongoDB 支持的错误码类型等等, 通过该机制, 我们可以很方便的在单元测试和集成测试中验证我们自己实现的 MongoDB Client Driver 的可靠性.</p><p>如果想具体知道 MongoDB 支持哪些故障点, 可以详细查看 MongoDB 提供的 <a href="https://github.com/mongodb/specifications">specification</a>, 里面有提到针对 MongoDB 每一个特性, driver 可以使用哪些故障点进行测试.</p><p>MongoDB 官方提供的 go 实现的 dirver 代码仓库中也有不少的例子可以参考 <a href="https://github.com/mongodb/mongo-go-driver/blob/345ea9574e28732ca4f9d7d3bb9c103c897a65b8/mongo/with_transactions_test.go#L122">https://github.com/mongodb/mongo-go-driver/blob/345ea9574e28732ca4f9d7d3bb9c103c897a65b8/mongo/with_transactions_test.go#L122</a>.</p><h2 id="etcd-%E4%B8%AD%E7%9A%84%E6%95%85%E9%9A%9C%E6%B5%8B%E8%AF%95" tabindex="-1">etcd 中的故障测试</h2><blockquote><p>etcd 是一个开源的、高可用的分布式键值存储系统, 它主要用于共享配置和服务发现.</p></blockquote><p>之前我们提到了 MongoDB 内置了可控的故障点注入机制方便我们做故障点测试, 那么 etcd 是否也提供了呢？</p><p>没错, etcd 官方也提供了内置的可控故障注入手段方便我们围绕 etcd 做故障模拟测试, 不过官方提供的可供部署的二进制分发默认是没有使用故障注入特性的, 区别于 MongoDB 提供了开关, etcd 需要我们手动从源码编译出包含故障注入特性的二进制出来去部署.</p><p>etcd 官方实现了一个 Go 包 <a href="https://github.com/etcd-io/gofail">gofail</a> 去做 “可控” 的故障点测试, 可以控制特定故障发生的概率和次数. gofail 可以用于任意 Go 实现的程序中.</p><p>原理上通过注释在源代码中通过注释 (<code>// gofail:</code>) 去对可能发生问题的地方埋藏一些故障注入点, 偏于进行测试验证, 例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> t.backend.hooks != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// gofail: var commitBeforePreCommitHook struct&#123;&#125;</span></span><br><span class="line">t.backend.hooks.OnPreCommitUnsafe(t)</span><br><span class="line"><span class="comment">// gofail: var commitAfterPreCommitHook struct&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 <code>go build</code> 构建出二进制之前, 使用 gofail 提供的命令行工具 <code>gofail enable</code> 可以取消这些故障注入相关代码的注释, 并生成故障点相关的代码，这样编译出的二进制可以用于故障场景的细粒度测试. 使用 <code>gofail disable</code> 去注释去除掉生成的故障点相关代码, 再使用 <code>go build</code> 编译出的二进制就可以在生产环境使用.</p><p>在执行二进制的时候, 可以通过环境变量 <code>GOFAIL_FAILPOINTS</code> 去唤醒故障点, 如果你的二进制程序是个永不停机的服务, 那么可以通过 GOFAIL_HTTP 环境变量在程序启动的同时, 启动一个 HTTP endpoint 去给外部测试工具唤醒埋藏的故障点.</p><p>具体的原理实现可以查看下 gofail 的设计文档 -&gt; <a href="https://github.com/etcd-io/gofail/blob/master/doc/design.md">design</a>.</p><blockquote><p>值的一提的是 pingcap 重新基于 gofail 重新造了个轮子, 做了不少优化:<br>failpoint 相关代码不应该有任何额外开销；<br>不能影响正常功能逻辑，不能对功能代码有任何侵入；<br>failpoint 代码必须是易读、易写并且能引入编译器检测；<br>最终生成的代码必须具有可读性；<br>生成代码中，功能逻辑代码的行号不能发生变化（便于调试）；<br>如果想要了解它的实现原理, 可以查看这篇官方文章: <a href="https://cn.pingcap.com/blog/golang-failpoint/?spm=ata.21736010.0.0.2d507a54sxGHvz">Golang Failpoint 的设计与实现</a><br>这篇深度剖析的博客也值得一读: <a href="https://www.luozhiyun.com/archives/595">在 Go 中使用 Failpoint 注入故障</a></p></blockquote><p>接下来我们看看如何在 etcd 中启用这些故障埋点。</p><h3 id="%E7%BC%96%E8%AF%91%E5%87%BA%E5%8F%AF%E4%BE%9B%E8%BF%9B%E8%A1%8C%E6%95%85%E9%9A%9C%E6%B5%8B%E8%AF%95%E7%9A%84-etcd" tabindex="-1">编译出可供进行故障测试的 etcd</h3><p>etcd 官方仓库的 Makefile 已经内置了对应的指令帮我们快速编译出包含故障点二进制 etcd server. 编译步骤大致如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:etcd-io/etcd.git</span><br><span class="line">cd etcd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活故障点注释</span></span><br><span class="line">make gofail-enable</span><br><span class="line">make build</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原代码</span></span><br><span class="line">make gofail-disable</span><br></pre></td></tr></table></figure><p>经过如上步骤之后, 编译好的二进制文件直接可以在 <code>bin</code> 目录下可以看到, 让我们启动 etcd 看一下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启通过 HTTP 激活故障点的方式</span></span><br><span class="line">GOFAIL_HTTP=&quot;127.0.0.1:22381&quot; ./bin/etcd</span><br></pre></td></tr></table></figure><p>使用 curl 看下有哪些故障点可以使用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:22381</span><br><span class="line"></span><br><span class="line">afterCommit=</span><br><span class="line">afterStartDBTxn=</span><br><span class="line">afterWritebackBuf=</span><br><span class="line">applyBeforeOpenSnapshot=</span><br><span class="line">beforeApplyOneConfChange=</span><br><span class="line">beforeApplyOneEntryNormal=</span><br><span class="line">beforeCommit=</span><br><span class="line">beforeLookupWhenForwardLeaseTimeToLive=</span><br><span class="line">beforeLookupWhenLeaseTimeToLive=</span><br><span class="line">beforeSendWatchResponse=</span><br><span class="line">beforeStartDBTxn=</span><br><span class="line">beforeWritebackBuf=</span><br><span class="line">commitAfterPreCommitHook=</span><br><span class="line">commitBeforePreCommitHook=</span><br><span class="line">compactAfterCommitBatch=</span><br><span class="line">compactAfterCommitScheduledCompact=</span><br><span class="line">compactAfterSetFinishedCompact=</span><br><span class="line">compactBeforeCommitBatch=</span><br><span class="line">compactBeforeCommitScheduledCompact=</span><br><span class="line">compactBeforeSetFinishedCompact=</span><br><span class="line">defragBeforeCopy=</span><br><span class="line">defragBeforeRename=</span><br><span class="line">raftAfterApplySnap=</span><br><span class="line">raftAfterSave=</span><br><span class="line">raftAfterSaveSnap=</span><br><span class="line">raftAfterWALRelease=</span><br><span class="line">raftBeforeAdvance=</span><br><span class="line">raftBeforeApplySnap=</span><br><span class="line">raftBeforeFollowerSend=</span><br><span class="line">raftBeforeLeaderSend=</span><br><span class="line">raftBeforeSave=</span><br><span class="line">raftBeforeSaveSnap=</span><br><span class="line">walAfterSync=</span><br><span class="line">walBeforeSync=</span><br></pre></td></tr></table></figure><p>知道了故障点, 就可以针对指定故障设置故障类型, 如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">beforeLookupWhenForwardLeaseTimeToLive 处 <span class="built_in">sleep</span> 1 秒</span></span><br><span class="line">curl http://127.0.0.1:22381/beforeLookupWhenForwardLeaseTimeToLive -XPUT -d&#x27;sleep(10000)&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看故障点状态</span></span><br><span class="line">curl http://127.0.0.1:22381/beforeLookupWhenForwardLeaseTimeToLive</span><br><span class="line">sleep(1000)</span><br></pre></td></tr></table></figure><blockquote><p>故障点的描述语法见: <a href="https://github.com/etcd-io/gofail/blob/master/doc/design.md#syntax">https://github.com/etcd-io/gofail/blob/master/doc/design.md#syntax</a></p></blockquote><p>至此, 已经可以利用 etcd 内置的故障点做一些故障模拟测试了, 具体怎么使用这些故障点可以参考下 etcd 官方的集成测试实现 -&gt; <a href="https://github.com/etcd-io/etcd/tree/main/tests/robustness">etcd Robustness Testing</a>. 通过故障点名称搜索相关代码即可.</p><p>除了上述这些 etcd 内置的故障点, etcd 的官方仓库也提供了一份系统级的集成测试例子 -&gt; <a href="https://github.com/etcd-io/etcd/tree/main/tools/local-tester">etcd local-tester</a>, 它模拟了 etcd 集群模式下的节点宕机测试.</p><p>好了, 本文的分享, 到此暂时结束啦 ღ( ´･ᴗ･` )~</p><p>小广告插播: 最近维护了可以维护多个 etcd server、etcdctl、etcductl 版本的工具 <a href="https://github.com/version-fox/vfox-etcd">vfox-etcd</a>, 你也可以用它来在机器上安装多个包含 failpoint 的 etcd 版本进行混沌 (故障模拟) 测试哦~</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Chaos/">Chaos</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Chaos-Testing/">Chaos Testing</category>
      
      <category domain="https://yeshan333.github.io/tags/etcd/">etcd</category>
      
      <category domain="https://yeshan333.github.io/tags/MongoDB/">MongoDB</category>
      
      
      <comments>https://yeshan333.github.io/2024/05/18/etcd-and-mongodb-chaos-testing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通过 vfox 安装管理多版本 Erlang 和 Elixir</title>
      <link>https://yeshan333.github.io/2024/04/27/install-erlang-and-elixir-via-vfox/</link>
      <guid>https://yeshan333.github.io/2024/04/27/install-erlang-and-elixir-via-vfox/</guid>
      <pubDate>Sat, 27 Apr 2024 15:36:31 GMT</pubDate>
      
      <description>通过 vfox 安装管理多版本 Erlang 和 Elixir</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://vfox.lhan.me/">vfox</a> (version-fox) 是最近比较热门的一个通用版本管理工具，使用 Go 语言进行编写，插件机制使用了 Lua 去实现扩展性. 目前 vfox 已经支持管理大多数主流编程语言的版本，生态还算强大。在这里你可以看到目前 vfox 所支持管理的编程语言版本和工具 -&gt; <a href="https://vfox.lhan.me/plugins/available.html">vfox-Available Plugins</a></p><p>Elixir 和 Erlang 社区一直以来都比较流行通过 <a href="https://asdf-vm.com/">asdf</a> 去安装和管理多版本环境。asdf 也是一个通用的版本管理工具，生态非常的丰富。</p><p>vfox 的版本管理上和 asdf 很像，均通过 <code>.tool-versions</code> 文件去管理项目级和全局的版本信息。这意味着如果你之前使用了 asdf，那么切换到 vfox，不会很困难。因为 vfox 和 asdf 的核心实现有有点不一样，vfox 的执行速度比 asdf 快了将近 5 倍~，官方文档也给出了基准测试结果：<a href="https://vfox.lhan.me/misc/vs-asdf.html">version-fox Comparison with asdf-vm</a></p><p><img src="https://vfox.lhan.me/performence.png" alt="https://vfox.lhan.me/performence.png"></p><p>如果你之前使用 asdf 去管理维护多个 <a href="https://www.erlang.org/">Erlang</a> 和 <a href="https://elixir-lang.org/">Elixir</a> 的版本，那么 vfox 也是一个不错的选择，值的一试。</p><p>本篇文章将会介绍如果通过 vfox 去安装和管理多个 Erlang 和 Elixir 的版本。</p><h2 id="%E5%AE%89%E8%A3%85-vfox" tabindex="-1">安装 vfox</h2><p><a href="https://vfox.lhan.me/">vfox</a> (version-fox) 的跨操作系统支持上很友好，这意味可以 Windows 和 Unix-like 系统上使用它。本篇文章的核心是通过 vfox 去安装和管理多个 Erlang 和 Elixir 语言的版本。因为目前 vfox 的两个管理 Erlang 和 Elixir 版本的插件实现上还没有去支持在 Windows 操作系统下的管理，所以本篇文章的示例环境主要是 Ubuntu 20.04 Linux 环境。让我们开始吧~</p><p>先安装下 vfox (version fox):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [trusted=yes] https://apt.fury.io/versionfox/ /&quot; | sudo tee /etc/apt/sources.list.d/versionfox.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vfox</span><br></pre></td></tr></table></figure><p>为了能让 vfox 找到已经安装的 Elixir 和 Erlang 版本，需要将 vfox 默认挂载到 shell 中。接下来修改下 shell 的配置 (以 Bash 为例)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;eval &quot;$(vfox activate bash)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>你也可以参考这个官方文档安装 vfox -&gt; <a href="https://vfox.lhan.me/guides/quick-start.html">https://vfox.lhan.me/guides/quick-start.html</a>。安装好 vfox 之后，我们再安装下插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 vfox-erlang 插件</span></span><br><span class="line">vfox add erlang</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 vfox-elixir 插件</span></span><br><span class="line">vfox add elixir</span><br></pre></td></tr></table></figure><p>接下来我们就可以通过上面安装好的两个 vfox 插件 <a href="https://github.com/version-fox/vfox-erlang">vfox-erlang</a> 和 <a href="https://github.com/version-fox/vfox-elixir">vfox-elixir</a> 去安装管理多个 Erlang 和 Elixir 的版本了。</p><h3 id="%E9%80%9A%E8%BF%87-vfox-erlang-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-erlang%2Fotp" tabindex="-1">通过 vfox-erlang 插件安装 Erlang/OTP</h3><p>因为 Elixir 依赖于 Erlang，所以在安装 Elixir 之前，我们需要先安装下 Erlang。Erlang 的安装是通过对应版本的源码进行安装的，所以我们需要有对应的编译工具链，这里以 Ubuntu 20.04 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>接下来可以安装 Erlang 了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 vfox search 找到你想要安装的版本</span></span><br><span class="line">❯ vfox search erlang</span><br><span class="line">Please select a version of erlang [type to search]: </span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"> v25.0.4</span></span><br><span class="line">   v24.3.4.16</span><br><span class="line">   v24.1.3</span><br><span class="line">   v24.0</span><br><span class="line">   v24.3</span><br><span class="line">   v24.3.2</span><br><span class="line">   v25.2</span><br><span class="line">   v27.0-rc2</span><br><span class="line">   v24.3.4.1</span><br><span class="line">Press ↑/↓ to select and press ←/→ to page, and press Enter to confirm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然你也可以指定安装一个版本，比如</span></span><br><span class="line">vfox install erlang@26.2.2</span><br></pre></td></tr></table></figure><p>理论上，你可以安装任何一个出现在 <a href="https://github.com/erlang/otp/releases">https://github.com/erlang/otp/releases</a> 的版本。因为是从源码编译安装的, 所以安装过程会花费点时间。当你看到如下信息，就表明安装完成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile info.......</span><br><span class="line">...</span><br><span class="line">Install erlang@26.2.2 success! </span><br><span class="line">Please use vfox use erlang@26.2.2 to use it.</span><br></pre></td></tr></table></figure><p>我们使用 vfox 切换下到刚才安装好的 Erlang/OTP 版本来验证下安装是否成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ vfox use erlang@26.2.2</span><br><span class="line">Now using erlang@26.2.2.</span><br><span class="line">❯ erl</span><br><span class="line">Erlang/OTP 26 [erts-14.2.2] [source] [64-bit] [smp:16:16] [ds:16:16:10] [async-threads:1] [jit:ns]</span><br><span class="line"></span><br><span class="line">Eshell V14.2.2 (press Ctrl+G to abort, type help(). for help)</span><br><span class="line"><span class="meta prompt_">1&gt; </span></span><br></pre></td></tr></table></figure><p>如果能正确唤醒 REPL，那么安装就好啦~。接下来开始安装 Elixir 吧~</p><h3 id="%E5%AE%89%E8%A3%85-elixir" tabindex="-1">安装 Elixir</h3><p>因为安装 Elixir 也是从对应版本的源码进行编译安装的，Elixir 的编译需要依赖到 Erlang，我们先让当前使用的 shell 能找到刚才安装好的 Erlang。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换 Erlang 版本</span></span><br><span class="line">❯ vfox use erlang@26.2.2</span><br><span class="line">Now using erlang@26.2.2.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Elixir，将会使用对应的 erlc 编译器</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vfox install elixir@1.15.2</span></span><br><span class="line">.........</span><br><span class="line">.........</span><br><span class="line">Generated ex_unit app</span><br><span class="line">==&gt; logger (compile)</span><br><span class="line">Generated logger app</span><br><span class="line">Generated eex app</span><br><span class="line">==&gt; iex (compile)</span><br><span class="line">Generated iex app</span><br><span class="line">Install elixir@1.15.2 success! </span><br><span class="line">Please use vfox use elixir@1.15.2 to use it.</span><br></pre></td></tr></table></figure><p>当你看到 Install elixir@1.15.2 success!，也就意味着安装成功了。可以通过 iex 确认下安装彻底成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ vfox use elixir@1.15.2</span><br><span class="line">Now using elixir@1.15.2.</span><br><span class="line">❯ iex</span><br><span class="line">Erlang/OTP 26 [erts-14.2.2] [source] [64-bit] [smp:16:16] [ds:16:16:10] [async-threads:1] [jit:ns]</span><br><span class="line"></span><br><span class="line">Interactive Elixir (1.15.2) - press Ctrl+C to exit (type h() ENTER for help)</span><br><span class="line"><span class="meta prompt_">iex(1)&gt; </span></span><br></pre></td></tr></table></figure><p>如果你想要安装其他版本的 Elixir，请确保当前使用的 Erlang/OTP 版本和 Elixir 版本是兼容的，可以查看这个文档去确认兼容性: <a href="https://hexdocs.pm/elixir/1.16.2/compatibility-and-deprecations.html#between-elixir-and-erlang-otp">《compatibility-and-deprecations.html#between-elixir-and-erlang-otp》</a>。</p><h3 id="%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E4%BD%BF%E7%94%A8%E7%89%88%E6%9C%AC" tabindex="-1">设置全局使用版本</h3><p>我们可以使用 <code>vfox use -g xxx</code> 设置默认使用的 Erlang 和 Elixir 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vfox use -g erlang@26.2.2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vfox use -g elixir@1.15.2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看 .tool-versions 确认设置是否完成</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cat</span> ~/.version-fox/.tool-versions</span> </span><br><span class="line">erlang 26.2.2</span><br><span class="line">elixir 1.15.2</span><br></pre></td></tr></table></figure><h2 id="%E6%9C%80%E5%90%8E" tabindex="-1">最后</h2><p>vfox 的两个安装管理 Erlang/OTP 和 Elixir 版本的插件同时也支持在 MacOS Darwin 下管理多个版本。你可以查看这个文档去了解更多信息: <a href="https://github.com/version-fox/vfox-elixir?tab=readme-ov-file#install-in-darwin-macos-13">https://github.com/version-fox/vfox-elixir?tab=readme-ov-file#install-in-darwin-macos-13</a>.</p><p>Happy &amp; funny!</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/vfox/">vfox</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Elixir/">Elixir</category>
      
      <category domain="https://yeshan333.github.io/tags/Erlang/">Erlang</category>
      
      <category domain="https://yeshan333.github.io/tags/vfox/">vfox</category>
      
      
      <comments>https://yeshan333.github.io/2024/04/27/install-erlang-and-elixir-via-vfox/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 vfox-erlang 安装管理多个 Erlang/OTP 版本</title>
      <link>https://yeshan333.github.io/2024/04/25/using-vfox-erlang-to-manage-erlang-version/</link>
      <guid>https://yeshan333.github.io/2024/04/25/using-vfox-erlang-to-manage-erlang-version/</guid>
      <pubDate>Thu, 25 Apr 2024 23:15:01 GMT</pubDate>
      
      <description>使用 vfox-erlang 安装管理多个 Erlang/OTP 版本</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>vfox (version fox) 是一款跨平台、可拓展的通用版本管理器. 支持原生 Windows 以及 Unix-like 系统! 通过它, 可以快速安装和切换开发环境的软件版本. 最近给 vfox 水了几个插件, 其中就有管理多个 Erlang/OTP 版本的, 很喜欢他的插件管理机制. 之前也有使用过类似的工具 <a href="https://github.com/asdf-vm/asdf">asdf</a>, 不过 asdf 之前的使用体验不怎么好 (木有拉踩的意思~, asdf 的生态是非常强大的), vfox 现在支持的插件已经非常之多了, 已经可以管理大多数常见主流语言的版本.</p><p>vfox 的版本管理工作流大体上是和 asdf 类似的, 不过性能要好一点 (5 倍左右), 毕竟 asdf 核心是 shell 写的. 官方文档也给出了一份基准测试, 参见 <a href="https://vfox.lhan.me/misc/vs-asdf.html">《Comparison with asdf-vm》</a>：</p><p><img src="https://vfox.lhan.me/performence.png" alt="https://vfox.lhan.me/performence.png"></p><p>vfox 和 asdf 一样, 可以通过 <code>.tool-version</code> 配置文件设置全局和项目级使用到的版本, 这意味着如果你从 asdf 切换到 vfox, 相当的方便.</p><h2 id="vfox-erlang-%E7%9A%84%E4%BD%BF%E7%94%A8" tabindex="-1">vfox-erlang 的使用</h2><p>本篇文章主要介绍怎么使用 <a href="https://github.com/version-fox/vfox-erlang">vfox-erlang</a> 插件, 在同一台机器上管理多个 Erlang/OTP 的版本. 一般在开发环境拥有多个版本的 Erlang/OTP 供测试比对也是常见的需求.</p><p>目前插件的实现上实际的安装过程是通过从源码进行编译安装 Erlang/OTP 的, 所以暂时只支持在 Unix-like 系统 (比如 ubuntu、macos darwin 等) 上安装管理 Erlang/OTP 的版本 (官方其实提供了 exe 安装器在 windows, 还没时间去研究加上去 2333~, 不过在 windows 使用 <a href="https://www.erlang.org/">Erlang</a> 的场景一般也比较少)。</p><blockquote><p>Erlang 是一种编程语言, 用于构建具有高可用性要求的大规模可扩展软实时系统。它的一些用途是电信、银行、电子商务、计算机电话和即时通讯。Erlang 的运行时系统内置了对并发、分布和容错的支持。<br>OTP 是一组 Erlang 库和设计原则, 提供中间件来开发这些系统。它包括自己的分布式数据库、用于连接其他语言的应用程序、调试和发布处理工具。</p></blockquote><h3 id="%E5%AE%89%E8%A3%85-vfox-%E5%92%8C-vfox-erlang-%E6%8F%92%E4%BB%B6" tabindex="-1">安装 vfox 和 vfox-erlang 插件</h3><p>在使用 vfox-erlang 管理 Erlang/OTP 版本之前, 请确保你已经在你的机器上安装好了 vfox, 可以参考官方的文档 <a href="https://vfox.lhan.me/guides/quick-start.html#_1-installation">Quick Start</a>, 本文以 Ubuntu 为例.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vfox</span></span><br><span class="line">echo &quot;deb [trusted=yes] https://apt.fury.io/versionfox/ /&quot; | sudo tee /etc/apt/sources.list.d/versionfox.list</span><br><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get install vfox -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让 vfox hook 你的 shell, 偏于 vfox 识别使用的 Erlang/OTP 版本</span></span><br><span class="line">echo &#x27;eval &quot;$(vfox activate bash)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 vfox-erlang 插件</span></span><br><span class="line">vfox add erlang</span><br></pre></td></tr></table></figure><h3 id="%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC-erlang%2Fotp" tabindex="-1">安装使用指定版本 Erlang/OTP</h3><p>由于是是从源码编译安装的 Erlang/OTP, 所以我们需要有对应的构建工具链和依赖软件, 这里以 Ubuntu 20.04 下安装为例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">“无脑”安装依赖的软件</span></span><br><span class="line">sudo apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>然后我们即可通过 vfox 管理安装多个 Erlang/OTP 版本了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以使用 search 命令查找可供安装的版本</span></span><br><span class="line">❯ vfox search erlang</span><br><span class="line">Please select a version of erlang [type to search]: </span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"> v25.3.2.5</span></span><br><span class="line">   v24.0-rc3</span><br><span class="line">   v24.3</span><br><span class="line">   v23.3.4.18</span><br><span class="line">   v24.0.6</span><br><span class="line">   v24.3.2</span><br><span class="line">   v25.3</span><br><span class="line">   v24.1.4</span><br><span class="line">   v26.0.2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接指定一个版本安装</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vfox install erlang@26.2.2</span></span><br><span class="line">...</span><br><span class="line">Install erlang@26.2.2 success! </span><br><span class="line">Please use vfox use erlang@26.2.2 to use it.</span><br></pre></td></tr></table></figure><p>当你看到类似 Install erlang@xxx success! 的信息, 就意味着安装完成了。接下来可以通过 <code>vfox use</code> 命令切换版本, 即可让当前 shell 会话可以使用对应的 Erlang/OTP 版本了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vfox use erlang@26.2.2</span><br></pre></td></tr></table></figure><p><img src="https://telegraph.shansan.top/file/29090c88952e670c3448d.png" alt="vfox use demo"></p><p>vfox 提供了三种视角的版本管理方法: shell 会话、项目级、全局, 通过一个 <code>.tool-versions</code>, 可以灵活的为不同的项目目录分配使用不同的 Erlang/OTP 版本, 跟多信息可以查看官方文档的介绍: <a href="https://vfox.lhan.me/guides/quick-start.html#_5-switch-runtime">vfox-Switch runtime</a>.</p><p>本篇文章的使用示例主要以 Linux 系统为主, 但是 vfox-erlang 的使用文档上也给出了在 MacOS Darwin 系统下的使用指南 <a href="https://github.com/version-fox/vfox-erlang?tab=readme-ov-file#install-in-darwin-macos-13">install-in-darwin-macos-13</a>, 并提供了在 Linux 和 MacOS 下持续集成测试供参考: <a href="https://github.com/version-fox/vfox-erlang/blob/main/.github/workflows/e2e_test.yaml">vfox-erlang E2E testing</a>.</p><p><img src="https://telegraph.shansan.top/file/d599dfa1042f22ce7c94f.png" alt="e2e testing"></p><p>Happy and funny~</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/vfox/">vfox</category>
      
      
      <category domain="https://yeshan333.github.io/tags/vfox/">vfox</category>
      
      <category domain="https://yeshan333.github.io/tags/Erlang-OTP/">Erlang/OTP</category>
      
      <category domain="https://yeshan333.github.io/tags/vfox-plugin/">vfox-plugin</category>
      
      <category domain="https://yeshan333.github.io/tags/vfox-erlang/">vfox-erlang</category>
      
      
      <comments>https://yeshan333.github.io/2024/04/25/using-vfox-erlang-to-manage-erlang-version/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 chezmoi &amp; vscode, 管理你的 dotfiles</title>
      <link>https://yeshan333.github.io/2024/03/23/using-chezmoi-to-manage-dotfiles/</link>
      <guid>https://yeshan333.github.io/2024/03/23/using-chezmoi-to-manage-dotfiles/</guid>
      <pubDate>Sat, 23 Mar 2024 16:11:23 GMT</pubDate>
      
      <description>使用 chezmoi &amp; vscode, 管理你的 dotfiles</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-dotfiles" tabindex="-1">什么是 dotfiles</h2><blockquote><p>In Unix-like operating systems, any file or folder that starts with a dot character (for example, /home/user/.config), commonly called a dot file or dotfile.<br>任何以 . 开头去命名的文件或者目录都可以称为 dotfile, 在 Unix-like 系统一般用的比较多, 但现在 dotfile 一般用于管理应用/软件的配置, 所以 Windows 平台上也可以看到 dotfile 的身影.</p></blockquote><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-chezmoi" tabindex="-1">什么是 chezmoi</h2><p>chezmoi 是使用 Go 编写的跨平台 dotfiles 管理工具, 使用同一的 Git 仓库进行配置同步, 可以很方便的帮助我们在多个开发环境共用一套配置, 免去一些同一工具链需要手工重新在多个机器配置的工作量.</p><p>开源社区流行的 dotfiles 管理工具很多, 我们可以在这个网站上可以看到: <a href="https://dotfiles.github.io/utilities/">https://dotfiles.github.io/utilities/</a>.</p><p>本篇文章主要介绍使用 chezmoi 进行 dotfiles 管理的一些基本流程, 还会介绍如何使用 vscode 配置 chezmoi 让配置管理体验更好的一些小技巧.</p><h3 id="chezmoi-%E7%AE%A1%E7%90%86-dotfile-%E5%B7%A5%E4%BD%9C%E6%B5%81" tabindex="-1">chezmoi 管理 dotfile 工作流</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在使用 chezmoi 时, 需要先安装 chezmoi, 可以参考: https://www.chezmoi.io/install</span></span><br><span class="line">sh -c &quot;$(curl -fsLS get.chezmoi.io)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完后初始化 chezmoi 的工作目录</span></span><br><span class="line">chezmoi init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 chezmoi <span class="built_in">cd</span> 可以直接切换到工作目录</span></span><br><span class="line">chezmoi cd </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后使用 git 将工作目录和代码仓库关联起来即可</span></span><br><span class="line">git init</span><br><span class="line">git remote add origin &lt;your-git-repo&gt;</span><br></pre></td></tr></table></figure><p>官方文档也给出了使用 chezmoi 管理 dotfile 的工作流大概是怎么样的, 这里稍作解释:</p><p><img src="https://telegraph.shansan.top/file/30d56011e0062dfbbb1ab.png" alt="chezmoi workflow"></p><p>我们以 <code>.bashrc</code> 文件的管理为例子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 1、将 .bashrc 文件纳入 chezmoi 管控范围</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chezmoi 会将该文件拷贝到 chezmoi 工作目录下, 会重命名为 dot_bashrc, 使用 dot 替换 .</span></span><br><span class="line">chezmoi add .bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc 文件纳入管控之后, 就不应该在修改配置的时候编辑 .bashrc 文件了, 而是编辑 chezmoi 工作目录下的 dot_bashrc 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以切换去工作目录查看下</span></span><br><span class="line">chezmoi cd</span><br><span class="line">ls -al</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 2、配置的修改我们可以使用如下命令去修改, chezmoi 会使用文本编辑器打开对应的 dot_bashrc 文件</span></span><br><span class="line">chezmoi edit ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 3、配置修改后是还没有应用到 .bashrc 文件的, diff 命令可以用来查看修改情况</span></span><br><span class="line">chezmoi diff ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4、想应用修改后的配置可以使用 apply 命令</span></span><br><span class="line">chezmoi apply ~/.bashrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">至此已经基本完成一次 dotfile 的管理, 但为了想要在其他机器也使用这此改动, 是需要使用 git 做一次配置同步的</span></span><br></pre></td></tr></table></figure><h3 id="chezmoi-%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%BB%BA%E8%AE%AE" tabindex="-1">chezmoi 使用的一些小技巧与配置建议</h3><h4 id="1%E3%80%81%E6%9B%BF%E6%8D%A2-chezmoi-edit-%E4%BD%BF%E7%94%A8%E7%9A%84%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BA-vscode" tabindex="-1">1、替换 <code>chezmoi edit</code> 使用的默认编辑器为 vscode</h4><p><code>chezmoi edit</code> 默认根据 $VISUAL 或 $EDITOR 环境变量决定使用什么编辑器打开文件, 我们可以修改 chezmoi 的配置文件改变 chezmoi 文件的行为, 配置文件一般在 <code>~/.config/chezmoi</code> 目录下, 参考配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制 chezmoi edit 命令使用的编辑器, code --<span class="built_in">wait</span> 会确保文件关闭再继续</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件在:  ~/.config/chezmoi/chezmoi.toml</span></span><br><span class="line">[edit]</span><br><span class="line">    command = &quot;code&quot;</span><br><span class="line">    args = [&quot;--wait&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>tips: chezmoi apply 应用修改后的配置时, 会根据 chezmoi 工作目录的层级去覆盖 HOME 目录对应的文件</p></blockquote><h4 id="2%E3%80%81%E6%9B%BF%E6%8D%A2-chezmoi-diff-%E4%BD%BF%E7%94%A8%E7%9A%84-diff-%E5%B7%A5%E5%85%B7%E4%B8%BA-vscode" tabindex="-1">2、替换 <code>chezmoi diff</code> 使用的 diff 工具为 vscode</h4><p>万物皆可 vscode, 如果你想使用 vscode 的 dif 能力怎么办, 这里直接给出 chemoi 的参考配置:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/twpayne/chezmoi/discussions/2424</span></span><br><span class="line"><span class="section">[diff]</span></span><br><span class="line"><span class="attr">command</span> = <span class="string">&quot;code&quot;</span></span><br><span class="line"><span class="attr">args</span> = [<span class="string">&quot;--wait&quot;</span>, <span class="string">&quot;--diff&quot;</span>, <span class="string">&quot;&#123;&#123; .Destination &#125;&#125;&quot;</span>, <span class="string">&quot;&#123;&#123; .Target &#125;&#125;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[merge]</span></span><br><span class="line"><span class="attr">command</span> = <span class="string">&quot;bash&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3%E3%80%81%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8" tabindex="-1">3、敏感数据存储</h4><p>如果你想用 chezmoi 管理你的密钥（例如: id_rsa ssh 密钥），同时又想把你的 dotfiles 配置在 GitHub 共享出来，chezmoi 自带了敏感数据存储的方案，可以使用 GPG、AGE 等对配置文件进行加密, 参考: <a href="https://www.chezmoi.io/user-guide/encryption/">https://www.chezmoi.io/user-guide/encryption/</a></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/dotfiles/">dotfiles</category>
      
      
      <category domain="https://yeshan333.github.io/tags/chezmoi/">chezmoi</category>
      
      <category domain="https://yeshan333.github.io/tags/dotfiles/">dotfiles</category>
      
      
      <comments>https://yeshan333.github.io/2024/03/23/using-chezmoi-to-manage-dotfiles/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 WXT 开发浏览器插件（上手使用篇）</title>
      <link>https://yeshan333.github.io/2024/03/15/develop-web-extension-with-wxt/</link>
      <guid>https://yeshan333.github.io/2024/03/15/develop-web-extension-with-wxt/</guid>
      <pubDate>Fri, 15 Mar 2024 07:47:53 GMT</pubDate>
      
      <description>WXT 开发浏览器插件</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>WXT (<a href="https://wxt.dev/">https://wxt.dev/</a>), Next-gen Web Extension Framework. 号称下一代浏览器开发框架. 可一套代码 (code base) 开发支持多个浏览器的插件.</p><h2 id="%E4%B8%8A%E8%B7%AF~" tabindex="-1">上路~</h2><p>WXT 提供了脚手架可以方便我们快速进行开发，但是我们得先安装好环境依赖，这里我们使用 npm, 所以需要安装下 node，可以参考 <a href="https://nodejs.org/en">https://nodejs.org/en</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接基于脚手架创建项目</span></span><br><span class="line">npx wxt@latest init yeshan-bowser-extensoin</span><br><span class="line"></span><br><span class="line">cd yeshan-bowser-extensoin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始调试插件</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://telegraph.shansan.top/file/a989ed6d1aee8952789c0.png" alt="https://telegraph.shansan.top/file/a989ed6d1aee8952789c0.png"></p><h2 id="qaq---wsl2-%E4%B8%8B%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">QAQ - WSL2 下开发遇到的问题</h2><p>使用 WSL2 进行开发的时候，<code>npm run dev</code> 在 wsl 是没办法自动打开浏览器的，会吐出如下问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN  Cannot open browser when using WSL. Load &quot;.output/chrome-mv3&quot; as an unpacked extension manually</span><br></pre></td></tr></table></figure><p>大概看了下 wxt 的实现，它是通过 <a href="https://github.com/mozilla/web-ext">web-ext</a> 跟进指定的浏览器的 bin 文件（默认为 chromium）启动浏览器装载开发好的插件. 曾经通过文章 <a href="https://saisuman.org/blog/chromium-in-wsl2">chromium-in-wsl2</a> 提到的办法直接在 wsl2 安装了 chromium，还是没能解决此问题😂😣. 翻了下官方仓库的 issue，有关联问题 <a href="https://github.com/wxt-dev/wxt/issues/55">https://github.com/wxt-dev/wxt/issues/55</a>, 本质上是 web-ext 的 BUG <a href="https://github.com/mozilla/web-ext/issues/2108#issuecomment-1837565780">issuecomment-1837565780</a>，截至 2024/3/15 还未修复.</p><h3 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" tabindex="-1">解决方法</h3><p>没办法了，如果还想继续用 wsl 做开发，只能手动加载插件了，在 windows 上打开 chrome 后，地址栏输入 <code>chrome://extensions/</code> 转到插件管理页 (记得开启开发者模式) -&gt; 加载已解压的扩展程序:</p><p><img src="https://telegraph.shansan.top/file/6b2718aa149d6feabb5e5.png" alt="https://telegraph.shansan.top/file/6b2718aa149d6feabb5e5.png"></p><p>我们要加载的插件目录是在 wsl 中的（即: <code>.output/chrome-mv3/</code>），好在 Window 和 wsl2 的文件文件系统是打通的，可以相互访问，我们可以使用 <a href="https://github.com/wslutilities/wslu">wslutils</a> 提供的工具获取在 Windows 下可以访问的路径</p><p><img src="https://telegraph.shansan.top/file/b5543ca9568f1fae401b3.png" alt="https://telegraph.shansan.top/file/b5543ca9568f1fae401b3.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 windows 文件管理器可以访问的地址</span></span><br><span class="line">❯ wslpath -w .output/chrome-mv3/</span><br><span class="line">\\wsl.localhost\Ubuntu-20.04\home\yeshan333\workspace\github\yeshan-bowser-extensoin\.output\chrome-mv3</span><br></pre></td></tr></table></figure><p><img src="https://telegraph.shansan.top/file/67564121734cef6527d83.png" alt="https://telegraph.shansan.top/file/67564121734cef6527d83.png"></p><p>Done ~, 搞定咯，可以愉快码代码了~</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/">浏览器插件开发</category>
      
      
      <category domain="https://yeshan333.github.io/tags/extension/">extension</category>
      
      <category domain="https://yeshan333.github.io/tags/WXT/">WXT</category>
      
      
      <comments>https://yeshan333.github.io/2024/03/15/develop-web-extension-with-wxt/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Windows PowerToys：屏幕标尺，测量屏幕上任何内容的像素</title>
      <link>https://yeshan333.github.io/2024/03/13/markup-screen/</link>
      <guid>https://yeshan333.github.io/2024/03/13/markup-screen/</guid>
      <pubDate>Wed, 13 Mar 2024 03:23:55 GMT</pubDate>
      
      <description>屏幕标尺，测量屏幕上任何内容的像素</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如果你是一名 web 开发者或者设计师，Windows 自带的 <a href="https://github.com/microsoft/PowerToys/releases">PowerToys</a> 工具集提供了一个很不错的工具 -&gt; <strong>屏幕标尺</strong>。通过屏幕标尺，我们可以很方便的测量屏幕上任何内容的像素，无需再通过某种方式中转到专业软件进行编辑：</p><p><a href="https://imgse.com/i/pFcMPq1"><img src="https://s21.ax1x.com/2024/03/13/pFcMPq1.png" alt="pFcMPq1.png"></a></p><p>使用文档可以查看：<a href="https://learn.microsoft.com/zh-cn/windows/powertoys/screen-ruler%E3%80%82">https://learn.microsoft.com/zh-cn/windows/powertoys/screen-ruler</a><a href="https://learn.microsoft.com/zh-cn/windows/powertoys/screen-ruler%E3%80%82">https://learn.microsoft.com/zh-cn/windows/powertoys/screen-ruler。</a></p><p>如果你使用 MacOS，那个 <a href="https://xscopeapp.com/">xScope</a> 是个不错的免费替代品。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/%E8%AE%BE%E8%AE%A1%E5%B7%A5%E5%85%B7/">设计工具</category>
      
      
      <category domain="https://yeshan333.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%B7%A5%E5%85%B7/">设计工具</category>
      
      
      <comments>https://yeshan333.github.io/2024/03/13/markup-screen/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Awesome Technology Weekly Zh-Hans - 中文技术月/周/日刊一览</title>
      <link>https://yeshan333.github.io/2024/03/04/awesome-tech-weekly-zh/</link>
      <guid>https://yeshan333.github.io/2024/03/04/awesome-tech-weekly-zh/</guid>
      <pubDate>Mon, 04 Mar 2024 11:14:47 GMT</pubDate>
      
      <description>Awesome Technology Weekly Zh-Hans - 中文技术月/周/日刊一览, 文章每三小时刷新</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>作为开发者，我们每天都需要吸收大量的信息补充我们的知识体系.</p><p><a href="https://github.com/yeshan333/awesome-tech-weekly-zh">Awesome Technology Weekly Zh-Hans</a> 项目收集了中文技术社区各个领域的高质量的中文技术月/周/日刊，定时刷新获取最新一期中文技术月/周/日刊进行展示.</p><p>访问网站开始关注吧~：<a href="https://shansan.top/awesome-tech-weekly-zh">https://shansan.top/awesome-tech-weekly-zh</a>.</p><p>Github 项目地址 -&gt; <a href="https://github.com/yeshan333/awesome-tech-weekly-zh">https://github.com/yeshan333/awesome-tech-weekly-zh</a>.</p><iframe src="https://shansan.top/awesome-tech-weekly-zh" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Tech-Weekly/">Tech-Weekly</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Tech-Weekly/">Tech-Weekly</category>
      
      
      <comments>https://yeshan333.github.io/2024/03/04/awesome-tech-weekly-zh/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 go-ycsb 对 etcd 进行基准 (benchmark) 性能测试</title>
      <link>https://yeshan333.github.io/2024/02/29/using-ycsb-benchmark-etcd/</link>
      <guid>https://yeshan333.github.io/2024/02/29/using-ycsb-benchmark-etcd/</guid>
      <pubDate>Thu, 29 Feb 2024 14:16:51 GMT</pubDate>
      
      <description>using go-ycsb to benchmark etcd.</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近在对一些存储组件做性能测试，主要使用到了 YCSB，💧篇文章记录下。</p><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-ycsb" tabindex="-1">什么是 YCSB</h2><p><a href="https://github.com/brianfrankcooper/YCSB/wiki#yahoo-cloud-serving-benchmark-ycsb">YCSB</a>，全称为“Yahoo！Cloud Serving Benchmark”，是雅虎开发的用来对云服务进行基准 (benchmark) 性能测试的工具。可以用来对多种 NoSQL 数据库，如 MongoDB、Redis 等进行性能测试。官方内置了丰富的性能测试场景 (称之为: <a href="https://github.com/brianfrankcooper/YCSB/wiki/Running-a-Workload">workload</a>)，压测场景可以通过文件进行配置，便于压测场景的复现重用。</p><h2 id="go-ycsb" tabindex="-1">go-ycsb</h2><p>雅虎的 YCSB 是 Java 语言实现的，且没有对 etcd 内置的支持，pingcap 使用 Go 仿照 Java 版本的 YCSB 实现了 <a href="https://github.com/pingcap/go-ycsb">go-ycsb</a>，工作机制大体类似. 且支持的数据库类型更加丰富，其中就有 <a href="https://etcd.io/">etcd</a>. 本文主要介绍使用 go-ycsb 基于 etcd 官方提供的性能场景场景 -&gt; <a href="https://etcd.io/docs/v3.5/benchmarks/etcd-3-demo-benchmarks/">Benchmarking etcd v3</a>，做一下基准性能测试。</p><p>性能测试一般有三个主要阶段:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据准备(load phase) -&gt; 压测执行(load run phase) -&gt; 结果分析(load analysis phase)</span><br></pre></td></tr></table></figure><p>go-ycsb 使用上可覆盖前两个阶段，对应如下:</p><p>1、数据准备(load phase): <code>./bin/go-ycsb load etcd -P workloads/workloada</code></p><p>2、压测执行(load run phase): <code>./bin/go-ycsb run etcd -P workloads/workloada</code></p><blockquote><p>这里针对 etcd 进行数据准备和压测执行.</p></blockquote><p>两个阶段都依赖到了一个负载控制的配置文件 <code>workloada</code>, 接下来让我们看看它.</p><h3 id="workload-%E8%B4%9F%E8%BD%BD%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D" tabindex="-1">workload 负载配置介绍</h3><p>在开始进行性能测试之前，我们对 go-ycsb 的 workload 负载配置简单介绍一下，以 go-ycsb 代码仓库提供的 <a href="https://github.com/pingcap/go-ycsb/blob/master/workloads/workload_template">workloads/workload_template</a> 文件为例子:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要支持的配置项见: https://github.com/pingcap/go-ycsb/blob/master/pkg/prop/prop.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负责控制性能测试压力的核心实现</span></span><br><span class="line"><span class="comment"># 这里可以指定为我们自己实现的压力控制器, 不过 ycsb 内置的 core 一般情况下够用了</span></span><br><span class="line"><span class="comment"># 见：https://github.com/pingcap/go-ycsb/blob/f9c3dce045990bc03dac5092be2b00bef386b7c6/cmd/go-ycsb/main.go#L129</span></span><br><span class="line"><span class="attr">workload</span>=core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定了数据库中存在的数据条目数量</span></span><br><span class="line"><span class="comment"># 在数据准备阶段 (load phase) 会据此创建指定条目的数据</span></span><br><span class="line"><span class="comment"># 压测执行时 (load run phase) 可操作的数据条目总数</span></span><br><span class="line"><span class="attr">recordcount</span>=<span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行阶段 (load run phase) 执行的数据库操作总数, 到达这个数量后一般压测即会停止执行</span></span><br><span class="line"><span class="attr">operationcount</span>=<span class="number">3000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行数据库操作使用的线程数量</span></span><br><span class="line"><span class="attr">threadcount</span>=<span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制目标吞吐量 OPS</span></span><br><span class="line"><span class="attr">target</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入操作总数, 如果与 recordcount 不一致, 会根据 insertstart 指定的位置开始插入数据</span></span><br><span class="line"><span class="comment">#insertcount=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次插入操作的位置偏移量</span></span><br><span class="line"><span class="attr">insertstart</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一条数据库记录存在的字段数量</span></span><br><span class="line"><span class="comment"># 在数据准备阶段 (load phase) 会据此创建每一条数据库数据</span></span><br><span class="line"><span class="attr">fieldcount</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制每个字段的大小 (单位: Byte 字节)</span></span><br><span class="line"><span class="attr">fieldlength</span>=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于控制压测执行时, 读取操作是否会读取所有字段</span></span><br><span class="line"><span class="attr">readallfields</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行时, 控制数据库更新操作更新数据库记录时是否会更新所有字段</span></span><br><span class="line"><span class="attr">writeallfields</span>=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The distribution used to choose the length of a field</span></span><br><span class="line"><span class="attr">fieldlengthdistribution</span>=constant</span><br><span class="line"><span class="comment">#fieldlengthdistribution=uniform</span></span><br><span class="line"><span class="comment">#fieldlengthdistribution=zipfian</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行时, 读操作占总操作数 (operationcount) 的比例</span></span><br><span class="line"><span class="attr">readproportion</span>=<span class="number">0.95</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行时, 写更新操作占总操作数 (operationcount) 的比例</span></span><br><span class="line"><span class="attr">updateproportion</span>=<span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行时, 插入新数据操作占总操作数 (operationcount) 的比例</span></span><br><span class="line"><span class="attr">insertproportion</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压测执行时, 先读取再写入操作占总操作数 (operationcount) 的比例</span></span><br><span class="line"><span class="attr">readmodifywriteproportion</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描操作占总操作数 (operationcount) 的比例</span></span><br><span class="line"><span class="attr">scanproportion</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一次扫描操作, 扫描的记录总数</span></span><br><span class="line"><span class="attr">maxscanlength</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制扫描操作的策略, 即每一次扫描操作的记录数策略</span></span><br><span class="line"><span class="comment"># uniform：表示每次扫描的记录数是随机的</span></span><br><span class="line"><span class="comment"># zipfian：根据 Zipfian 分布来选择记录数. 互联网常说的 80/20 原则, 也就是 20% 的 key, 会占有 80% 的访问量;</span></span><br><span class="line"><span class="attr">scanlengthdistribution</span>=uniform</span><br><span class="line"><span class="comment">#scanlengthdistribution=zipfian</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制数据是否是顺序插入的</span></span><br><span class="line"><span class="attr">insertorder</span>=hashed</span><br><span class="line"><span class="comment">#insertorder=ordered</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库操作的策略</span></span><br><span class="line"><span class="comment"># uniform：随机选择一个记录进行操作；</span></span><br><span class="line"><span class="comment"># sequential：按顺序选择记录操作；</span></span><br><span class="line"><span class="comment"># zipfian：二八原则；</span></span><br><span class="line"><span class="comment"># latest：和 Zipfian 类似，但是倾向于访问新数据明显多于老数据；</span></span><br><span class="line"><span class="comment"># hotspot：热点分布访问；</span></span><br><span class="line"><span class="comment"># exponential：指数分布访问；</span></span><br><span class="line"><span class="attr">requestdistribution</span>=zipfian</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备阶段，hotspot 热点分布策略下数据的占比</span></span><br><span class="line"><span class="attr">hotspotdatafraction</span>=<span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问热点数据的数据库操作百分比</span></span><br><span class="line"><span class="attr">hotspotopnfraction</span>=<span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大的执行时间 (单位为秒). 当操作数达到规定值或者执行时间达到规定最大值时基准测试会停止</span></span><br><span class="line"><span class="comment">#maxexecutiontime=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备和压测执行阶段被操作的数据库表名称</span></span><br><span class="line"><span class="attr">table</span>=usertable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制压测结果的展现形式, 见: https://github.com/pingcap/go-ycsb/blob/fe11c4783b57703465ec7d36fcc4268979001d1a/pkg/measurement/measurement.go#L84</span></span><br><span class="line"><span class="attr">measurementtype</span>=histogram</span><br><span class="line"><span class="comment">#measurementtype=csv</span></span><br><span class="line"><span class="comment">#measurementtype=raw</span></span><br></pre></td></tr></table></figure><p>workload 负载文件支持的配置项以 <a href="https://github.com/pingcap/go-ycsb/blob/master/pkg/prop/prop.go">pkg/prop/prop.go</a> 声明的为准。</p><p>知道了 go-ycsb 的 workload 怎么配置，接下来我们开始使用它模拟下 etcd 官方的基准测试场景吧。 <a href="https://etcd.io/docs/v3.5/benchmarks/etcd-3-demo-benchmarks/">Benchmarking etcd v3</a></p><h2 id="etcd-%E5%9F%BA%E5%87%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" tabindex="-1">etcd 基准性能测试</h2><p>我们需要先准备下测试环境，并获取 go-ycsb 负载工具。</p><h2 id="%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87" tabindex="-1">环境准备</h2><p>etcd 直接使用 docker 起就好，这里我们使用 <code>docker-compose</code>, 编排文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/etcd:latest&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_NONE_AUTHENTICATION=yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2379</span><span class="string">:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2380</span><span class="string">:2380</span></span><br></pre></td></tr></table></figure><p>go-ycsb 可以直接从项目的 <a href="https://github.com/pingcap/go-ycsb?tab=readme-ov-file#getting-started">README</a> 获取下载方式，或者我们基于源码构建出来即可.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从源码构建，需要安装 Go</span></span><br><span class="line">git clone https://github.com/pingcap/go-ycsb.git</span><br><span class="line">cd go-ycsb</span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">give it a try</span></span><br><span class="line">./bin/go-ycsb  --help</span><br></pre></td></tr></table></figure><h2 id="%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" tabindex="-1">性能测试</h2><p>好了，我们可以开始对 etcd 进行性能测试了，本地我们主要模拟 <a href="https://etcd.io/docs/v3.5/benchmarks/etcd-3-demo-benchmarks/">Benchmarking etcd v3</a> 中的 reading one single key 场景.</p><p><img src="https://telegraph.shansan.top/file/237d7295d2e4e0056f32f.png" alt="etcd scene"></p><p>go-ycsb 的 workload 配置如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scene ref: https://etcd.io/docs/v3.5/benchmarks/etcd-3-demo-benchmarks/#reading-one-single-key</span></span><br><span class="line"><span class="comment"># etcd 官方给的场景 reading one single key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单条 key-value 数据</span></span><br><span class="line"><span class="attr">recordcount</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># benchmark 总共的操作次数</span></span><br><span class="line"><span class="attr">operationcount</span>=<span class="number">20000</span></span><br><span class="line"><span class="attr">workload</span>=core</span><br><span class="line"></span><br><span class="line"><span class="comment">; threadcount=1</span></span><br><span class="line"><span class="comment"># 控制 OPS 为 2000</span></span><br><span class="line"><span class="comment">; target=2000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">fieldcount</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">fieldlength</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 控制 etcd 的 key 大小在 256 字节</span></span><br><span class="line"><span class="attr">keyprefix</span>=__3MKdVjJjpfz0tzfHtL4ycTztGas4lWVLJIlVNT8HjtWf6Picj3WYC3KE76nVNkdnvCv1gMiMO7PZUUkmlBODEkJDZTVqtpQbqJ5pNUnz3oEuNoieOTpvrvAVTgJ7myi3Z0ns5Y3TYk05gzmmPINKsP3zcpN1hY5eITitMz8SSxNGv0KKHDKhH370U9QOLhMI4bsClkSbvCWgQ98LiLIhfZukqlFVZPp__</span><br><span class="line"></span><br><span class="line"><span class="attr">readallfields</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">writeallfields</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 全部为读操作</span></span><br><span class="line"><span class="attr">readproportion</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">updateproportion</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">scanproportion</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">insertproportion</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataintegrity</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 顺序访问</span></span><br><span class="line"><span class="attr">requestdistribution</span>=sequential</span><br></pre></td></tr></table></figure><p>上述 workload 配置可在这个仓库中找到: <a href="https://github.com/yeshan333/benchmark-etcd-with-go-ycsb">https://github.com/yeshan333/benchmark-etcd-with-go-ycsb</a>.</p><p>接下来使用 go-ycsb 准备压测数据:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/go-ycsb load etcd -P workloads/etcd_offcial_workload</span><br></pre></td></tr></table></figure><p>压测执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/go-ycsb load etcd -P workloads/etcd_offcial_workload</span><br></pre></td></tr></table></figure><p>执行结果大致如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">% ./bin/go-ycsb run etcd -P workloads/etcd_offcial_workload</span></span><br><span class="line">Using request distribution &#x27;sequential&#x27; a keyrange of [0 0]</span><br><span class="line">***************** properties *****************</span><br><span class="line">&quot;command&quot;=&quot;run&quot;</span><br><span class="line">&quot;scanproportion&quot;=&quot;0&quot;</span><br><span class="line">&quot;dotransactions&quot;=&quot;true&quot;</span><br><span class="line">&quot;operationcount&quot;=&quot;20000&quot;</span><br><span class="line">&quot;keyprefix&quot;=&quot;__3MKdVjJjpfz0tzfHtL4ycTztGas4lWVLJIlVNT8HjtWf6Picj3WYC3KE76nVNkdnvCv1gMiMO7PZUUkmlBODEkJDZTVqtpQbqJ5pNUnz3oEuNoieOTpvrvAVTgJ7myi3Z0ns5Y3TYk05gzmmPINKsP3zcpN1hY5eITitMz8SSxNGv0KKHDKhH370U9QOLhMI4bsClkSbvCWgQ98LiLIhfZukqlFVZPp__&quot;</span><br><span class="line">&quot;;&quot;=&quot;target=2000&quot;</span><br><span class="line">&quot;requestdistribution&quot;=&quot;sequential&quot;</span><br><span class="line">&quot;workload&quot;=&quot;core&quot;</span><br><span class="line">&quot;fieldlength&quot;=&quot;200&quot;</span><br><span class="line">&quot;readproportion&quot;=&quot;1&quot;</span><br><span class="line">&quot;recordcount&quot;=&quot;1&quot;</span><br><span class="line">&quot;readallfields&quot;=&quot;true&quot;</span><br><span class="line">&quot;insertproportion&quot;=&quot;0&quot;</span><br><span class="line">&quot;fieldcount&quot;=&quot;1&quot;</span><br><span class="line">&quot;writeallfields&quot;=&quot;true&quot;</span><br><span class="line">&quot;dataintegrity&quot;=&quot;false&quot;</span><br><span class="line">&quot;updateproportion&quot;=&quot;0&quot;</span><br><span class="line">**********************************************</span><br><span class="line">**********************************************</span><br><span class="line">Run finished, takes 9.134419329s</span><br><span class="line">READ   - Takes(s): 9.1, Count: 20000, OPS: 2190.0, Avg(us): 451, Min(us): 220, Max(us): 2453503, 50th(us): 322, 90th(us): 379, 95th(us): 396, 99th(us): 448, 99.9th(us): 1351, 99.99th(us): 1748</span><br><span class="line">TOTAL  - Takes(s): 9.1, Count: 20000, OPS: 2189.9, Avg(us): 451, Min(us): 220, Max(us): 2453503, 50th(us): 322, 90th(us): 379, 95th(us): 396, 99th(us): 448, 99.9th(us): 1351, 99.99th(us): 1748</span><br></pre></td></tr></table></figure><p>可以同一场景下看到 90 分位的 RTT 与 etcd 官方的压测结果相差不大. 上述执行结果由 github actions 跑出来，具体执行过程可观看 <a href="https://github.com/yeshan333/benchmark-etcd-with-go-ycsb/actions/runs/8091287653/job/22110155088">yeshan333/benchmark-etcd-with-go-ycsb/actions/runs/8091287653/job/22110155088</a>.</p><h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2><ul><li><a href="https://www.luozhiyun.com/archives/634">探究Go-YCSB做数据库基准测试</a></li><li><a href="https://github.com/brianfrankcooper/YCSB/wiki/Running-a-Workload">YCSB wiki - Running a Workload</a> <a href="https://lsr1991.github.io/2015/04/25/ycsb-document-translation-running-a-workload/">中译版</a></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/go-ycsb/">go-ycsb</category>
      
      
      <category domain="https://yeshan333.github.io/tags/etcd/">etcd</category>
      
      <category domain="https://yeshan333.github.io/tags/Go/">Go</category>
      
      <category domain="https://yeshan333.github.io/tags/YCSB/">YCSB</category>
      
      <category domain="https://yeshan333.github.io/tags/go-ycsb/">go-ycsb</category>
      
      <category domain="https://yeshan333.github.io/tags/benchmark/">benchmark</category>
      
      
      <comments>https://yeshan333.github.io/2024/02/29/using-ycsb-benchmark-etcd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 GitHub Codespaces 加速 Elixir 开发环境工作速度</title>
      <link>https://yeshan333.github.io/2024/02/19/elixir-github-codespace-dev/</link>
      <guid>https://yeshan333.github.io/2024/02/19/elixir-github-codespace-dev/</guid>
      <pubDate>Mon, 19 Feb 2024 16:29:08 GMT</pubDate>
      
      <description>create elixir dev env with github codespaces</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="%E5%89%8D%E8%A8%80" tabindex="-1">前言</h2><p>使用 <a href="https://www.erlang-solutions.com/capabilities/elixir/?utm_source=Google&amp;utm_medium=cpc&amp;utm_campaign=Elixir_USCART&amp;utm_content=&amp;gad_source=1&amp;gclid=CjwKCAiAlcyuBhBnEiwAOGZ2SzBl8ExJxYuUq6FdtHQt5bSzORVL8RekWUtih8Ht6dzkIqlnaON6rhoCbv0QAvD_BwE">Elixir</a> 开发点小玩意的时候，面对经常需要走外网下载依赖 (Elixir 的镜像站 <a href="https://hex.pm/docs/mirrors">UPYUN</a> 使用有时候也经常抽风) 的时候，为了避免需要不断的进行网络代理配置，有想到之前经常使用 <a href="https://github.com/features/codespaces">GitHub Codespaces</a> 来在浏览器里面通过云环境来写博客文章，也可以做点开发：</p><p><img src="https://telegraph.shansan.top/file/62f2956f4dc3e543f75ca.png" alt="GitHub Codespaces"></p><blockquote><p>第一次连接一般会看到:<br>👋 Welcome to Codespaces! You are on our default image.</p><ul><li>It includes runtimes and tools for Python, Node.js, Docker, and more. See the full list here: <a href="https://aka.ms/ghcs-default-image">https://aka.ms/ghcs-default-image</a></li><li>Want to use a custom image instead? Learn more here: <a href="https://aka.ms/configure-codespace">https://aka.ms/configure-codespace</a></li></ul></blockquote><blockquote><p>🔍 To explore VS Code to its fullest, search using the Command Palette (Cmd/Ctrl + Shift + P or F1).</p></blockquote><blockquote><p>📝 Edit away, run your app as usual, and we’ll automatically make it available for you to access.</p></blockquote><p>使用 GitHub Codespaces 甚至也能直接提交代码到 GitHub 仓库之中. 通过 vscode 插件 <a href="https://code.visualstudio.com/docs/remote/codespaces">GitHub Codespaces</a>，能通过本地 IDE 连接云端的环境进行开发. GitHub 提供了免费使用的额度，足够白嫖了🐏. 如果有将 vscode 的配置同步到 GitHub，也可以在一定程度复用本地 IDE 的配置.</p><p>通过 <a href="https://github.com/codespaces/new">https://github.com/codespaces/new</a> 我们能配置 GitHub 使用的环境规格和部署地区:</p><p><img src="https://telegraph.shansan.top/file/bed2d8c2553369084c079.jpg" alt="select machine &amp; zone"></p><h2 id="%E5%8A%A0%E9%80%9F-elixir-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" tabindex="-1">加速 Elixir 开发环境</h2><p>Elixir 应用构建拉依赖经常需要走外网，但 GitHub 默认创建的 Codespaces 环境默认一般都是 js 的开发环境 <a href="https://github.com/devcontainers/images/blob/main/src/universal/.devcontainer/Dockerfile">Dockerfile</a>，并没有 Elixir 环境，需要我们自己单独配置一手，好在提供了 <a href="https://containers.dev/">devcontainer</a> 的形式供我们自定义自己的基础开发环境，我们只需要提供配置文件就好， 我们需要做的如下:</p><ul><li>1、GitHub 仓库创建 <code>.devcontainer</code> 目录;</li><li>2、<code>.devcontainer</code> 下的 <code>devcontainer.json</code> 文件声明开发环境配置;</li></ul><p>示范仓库如: <a href="https://github.com/yeshan333/erlang_elixir_asdf_ubuntu_container/tree/main/.devcontainer">https://github.com/yeshan333/erlang_elixir_asdf_ubuntu_container/tree/main/.devcontainer</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ghcr.io/yeshan333/erlang_elixir_asdf_ubuntu_container:latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;jakebecker.elixir-ls&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postCreateCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git config --global core.fileMode false&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>通过 image 字段，我们直接声明了 GitHub Codespaces 使用的 Docker 镜像，extensions 指定了要启用哪些 vscode 插件，postCreateCommand 制定了环境起来之后要跑的 shell 命令. 甚至于也可以指定我们自己写的 Dockerfile 来启动 GitHub Codespaces 环境，可参考：<a href="https://github.com/devcontainers/images/blob/main/src/go/.devcontainer/devcontainer.json">https://github.com/devcontainers/images/blob/main/src/go/.devcontainer/devcontainer.json</a>.</p><p>基于以上，我们可以通过 <a href="https://github.com/codespaces/new">https://github.com/codespaces/new</a> 指定海外节点进行 GitHub Codespaces 创建即刻.</p><h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2><ul><li><a href="https://code.visualstudio.com/docs/devcontainers/create-dev-container">create-dev-container</a></li><li><a href="https://github.com/features/codespaces">GitHub Codespaces</a></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Github-Codespaces/">Github Codespaces</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Elixir-Github-Codespaces/">Elixir, Github Codespaces</category>
      
      
      <comments>https://yeshan333.github.io/2024/02/19/elixir-github-codespace-dev/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>乐理通识</title>
      <link>https://yeshan333.github.io/2024/02/07/become-a-romantic-muscian/</link>
      <guid>https://yeshan333.github.io/2024/02/07/become-a-romantic-muscian/</guid>
      <pubDate>Wed, 07 Feb 2024 18:40:24 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2023 年搞了台雅马哈 61 键的电子琴，顺手看了下啊 B 的上的课程 <a href="https://www.bilibili.com/video/BV12W411f7YF/?spm_id_from=333.999.0.0">《零基础自学音乐学乐理合集-第一季》</a>，这里是部分笔记（给博客加点不一样的东西👀）。</p><h1 id="%E7%AE%80%E8%B0%B1%E5%90%84%E9%83%A8%E5%88%86%E4%B8%80%E8%A7%88" tabindex="-1">简谱各部分一览</h1><p><img src="https://telegraph.shansan.top/file/cb37ef7c67f063935883b.png" alt="image.png"></p><ul><li>C 表示音名</li><li>竖线为小节线</li></ul><p><img src="https://telegraph.shansan.top/file/0792ffbc4cfff9e4aaa7c.png" alt="image.png"></p><h2 id="%E9%9F%B3%E5%90%8D" tabindex="-1">音名</h2><ul><li>完整钢琴键盘 88 键</li><li>9个组，一组 7 个白键，5 个黑键位</li></ul><h3 id="%E9%94%AE%E4%BD%8D%E8%A1%A8%E7%A4%BA%EF%BC%8C%E9%9F%B3%E5%90%8D%E5%AF%B9%E5%BA%94%E7%9A%84%E9%94%AE%E4%BD%8D" tabindex="-1">键位表示，音名对应的键位</h3><p><img src="https://telegraph.shansan.top/file/8b13de7bab7c41b3a3a27.png" alt="image.png"></p><h2 id="1%3Dc-%E7%9A%84%E6%84%8F%E6%80%9D" tabindex="-1">1=C 的意思</h2><p>即简谱中 1 对应的键位，代表 1 从哪个键出发，1 的位置一旦确定，234567的位置，也跟着确定</p><p><img src="https://telegraph.shansan.top/file/be3b186ede667752ffc29.png" alt="image.png"></p><h3 id="1%3Dc-%E5%88%B0%E5%BA%95%E6%98%AF%E5%93%AA%E4%B8%AA-c" tabindex="-1">1=C 到底是哪个 C</h3><p>对应钢琴的键即为 C4 的 C</p><p><img src="https://telegraph.shansan.top/file/eb760181789ab9b26a8a7.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/916a93541d96f0cf922f1.png" alt="image.png"></p><p><strong>61 键的电子琴是从大字组开始的</strong></p><h3 id="1%3Dd%E5%AF%B9%E5%BA%94%E7%9A%84%E6%83%85%E5%86%B5" tabindex="-1">1=D对应的情况</h3><p><img src="https://telegraph.shansan.top/file/4a418ef3f4e07fb3df57d.png" alt="image.png"></p><h2 id="c%23-c%E5%8D%87%EF%BC%9Bdb-d%E9%99%8D" tabindex="-1">C#-C升；Db-D降</h2><p><img src="https://telegraph.shansan.top/file/d889f86b2728cbf90f111.png" alt="image.png"></p><h2 id="%E5%85%A8%E9%9F%B3%E4%B8%8E%E5%8D%8A%E9%9F%B3" tabindex="-1">全音与半音</h2><ul><li>全音与半音表示两个音的距离</li><li>C 到 C# 的距离即为一个半音距离</li><li>E 到 F 的距离为一个半音</li><li>C 到 D 为一个全音</li></ul><h3 id="%E4%BB%8E%E5%85%A8%E9%9F%B3%E5%8D%8A%E9%9F%B3%E7%9C%8B-12345671-%E7%9A%84%E8%A7%84%E5%BE%8B" tabindex="-1">从全音半音看 12345671 的规律</h3><p><img src="https://telegraph.shansan.top/file/e48fd2373e6945801eac0.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/884383a38fcdce3744a8e.png" alt="image.png"></p><p>正因为满足了-<strong>全全半全全全半</strong>，才真正听出 do，re，me，fa，so，la，si，do 的味道</p><h2 id="%E8%B0%83%E5%BC%8F" tabindex="-1">调式</h2><blockquote><p>调式简单来说即为一串音，按照一定的规则排列起来</p></blockquote><h3 id="%EF%BC%88%E8%87%AA%E7%84%B6%EF%BC%89%E5%A4%A7%E8%B0%83" tabindex="-1">（自然）大调</h3><ul><li>1=C 即为 C 大调</li></ul><p><img src="https://telegraph.shansan.top/file/c308f672dfa1f3fc43509.png" alt="image.png"></p><h4 id="%E9%BB%91%E9%94%AE%E5%BC%80%E5%A7%8B%E7%9A%84%E8%87%AA%E7%84%B6%E5%A4%A7%E8%B0%83%E4%B8%8E%E7%99%BD%E9%94%AE%E5%BC%80%E5%A7%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E5%85%B3%E7%B3%BB" tabindex="-1">黑键开始的自然大调与白键开始对应的关系</h4><p><img src="https://telegraph.shansan.top/file/1ed428542836e0cffe75b.png" alt="image.png"></p><h3 id="%E9%9F%B3%E9%98%B6" tabindex="-1">音阶</h3><p><img src="https://telegraph.shansan.top/file/d4039a0d98e9ae7a31fdd.png" alt="image.png"></p><ul><li>1=C 的主音即为 C</li><li>按照-<strong>全全半全全全半</strong>的规律构造音阶</li></ul><h2 id="%E9%9F%B3%E7%AC%A6%E4%B8%8E%E8%8A%82%E6%8B%8D" tabindex="-1">音符与节拍</h2><p><img src="https://telegraph.shansan.top/file/43670667afdb784532748.png" alt="image.png"></p><ul><li>竖线为小节线<img src="https://telegraph.shansan.top/file/6114a454023cbfa3aa7b2.png" alt="image.png"></li></ul><p><img src="https://telegraph.shansan.top/file/10a7948b6fd457d01faec.png" alt="image.png"></p><h3 id="%E8%8A%82%E6%8B%8D" tabindex="-1">节拍</h3><h4 id="%E5%9B%9B%E6%8B%8D%E5%AD%90" tabindex="-1">四拍子</h4><blockquote><p>拍子为时间单位，</p></blockquote><p><img src="https://telegraph.shansan.top/file/65be8cad3b81d7b6af7a0.png" alt="image.png"></p><p>图中的小方块仅表示一拍子，不表示四分音符。</p><h4 id="%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6%E4%B8%BA%E4%B8%80%E6%8B%8D%EF%BC%8C2-%E6%8B%8D%E4%B8%BA%E4%B8%80%E5%B0%8F%E8%8A%82%E7%AE%80%E8%B0%B1%E4%BE%8B%E5%AD%90%EF%BC%9A" tabindex="-1">四分音符为一拍，2 拍为一小节简谱例子：</h4><p><img src="https://telegraph.shansan.top/file/cf21c51a175f79d79baa8.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/f5f93c19e1706138a7b88.png" alt="image.png"></p><h4 id="%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%AC%A1%E6%89%93%E6%AC%A1%E5%BE%8B%E5%8A%A8" tabindex="-1">传说中的动次打次律动</h4><p><img src="https://telegraph.shansan.top/file/45ac47ef534476dd8631c.png" alt="image.png"></p><h3 id="%E9%99%84%E7%82%B9%E4%B8%8E%E4%BC%91%E6%AD%A2%E7%AC%A6" tabindex="-1">附点与休止符</h3><h4 id="%E9%99%84%E7%82%B9%E7%9A%84%E6%84%8F%E4%B9%89" tabindex="-1">附点的意义</h4><p><img src="https://telegraph.shansan.top/file/8464ea59fac8252498d94.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/3fbbbbf32bcea56e287bb.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/39a16e9b90bad2dde9990.png" alt="image.png"></p><h1 id="%E7%AE%80%E8%B0%B1%E6%89%93%E6%8B%8D%E5%AD%90%E7%BB%83%E4%B9%A0" tabindex="-1">简谱打拍子练习</h1><h2 id="%E5%94%B1%E5%9B%9B%E4%BA%8C%E6%8B%8D%EF%BC%8C%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6%E4%B8%BA%E4%B8%80%E6%8B%8D%E6%97%B6%EF%BC%8Cv%E8%A1%A8%E7%A4%BA%E4%B8%80%E6%8B%8D" tabindex="-1">唱四二拍，四分音符为一拍时，V表示一拍</h2><p>仅四分音符情况</p><p><img src="https://telegraph.shansan.top/file/81886a37dbc098da74bbb.png" alt="image.png"></p><p>有八分音符时</p><p><img src="https://telegraph.shansan.top/file/2cecd9bd8d1c718007c06.png" alt="image.png"></p><p>有十六分音符时</p><p><img src="https://telegraph.shansan.top/file/67f21bb238924fa4bc8ed.png" alt="image.png"></p><p>群魔乱舞</p><p><img src="https://telegraph.shansan.top/file/8bc1d77bad71afea07fc7.png" alt="image.png"></p><p>附点</p><p><img src="https://telegraph.shansan.top/file/76709a436dc3f70386271.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/cd603bf7d84d335b55250.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/d238018971b0730469fa5.png" alt="image.png"></p><h2 id="%E5%94%B1%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6%E7%9A%84%E6%8B%8D%E5%AD%90" tabindex="-1">唱八分音符的拍子</h2><p><img src="https://telegraph.shansan.top/file/1a99495a885eabdf18bed.png" alt="image.png"></p><h1 id="%E4%BA%94%E7%BA%BF%E8%B0%B1" tabindex="-1">五线谱</h1><blockquote><p>多声部处理，一次发出多个声</p></blockquote><p><img src="https://telegraph.shansan.top/file/1856e86e20bf2dffecf01.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/63f9bb7c74abc4d20919d.png" alt="image.png"></p><h2 id="%E8%B0%B1%E5%8F%B7" tabindex="-1">谱号</h2><blockquote><p>用于确定要弹哪个音，大致范围</p></blockquote><h3 id="%E9%AB%98%E9%9F%B3%E8%B0%B1%E5%8F%B7---%E5%AD%97%E6%AF%8D-g-%E7%9A%84%E5%8F%98%E4%BD%93%EF%BC%8C%E5%B0%8F%E5%AD%97%E4%B8%80%E7%BB%84%E7%9A%84-g" tabindex="-1">高音谱号 - 字母 g 的变体，小字一组的 g</h3><ul><li>从第二条线开始画，第二条线表示小字一组的 $ g^1 $</li></ul><p><img src="https://telegraph.shansan.top/file/35a27eaad0e6fa4a96ecf.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/bbb1cf8bcb88de11b9a60.png" alt="image.png"></p><h3 id="%E4%BD%8E%E9%9F%B3%E8%B0%B1%E5%8F%B7-f%EF%BC%8C%E5%B0%8F%E5%AD%97%E7%BB%84%E7%9A%84-f" tabindex="-1">低音谱号-F，小字组的 F</h3><p><img src="https://telegraph.shansan.top/file/0d80f0e5047127aea8325.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/9b9ac9604f9b785e8fcfd.png" alt="image.png"></p><h3 id="%E4%B8%AD%E9%9F%B3%E8%B0%B1%E5%8F%B7-%E4%B8%A4%E4%B8%AA%E5%8F%8D%E7%9D%80%E7%9A%84-c%EF%BC%8C%E7%A1%AE%E5%AE%9A%E4%B8%AD%E5%A4%AEc%EF%BC%8C%E5%8D%B3%E5%B0%8F%E5%AD%97%E4%B8%80%E7%BB%84%E7%9A%84-c" tabindex="-1">中音谱号-两个反着的 C，确定中央C，即小字一组的 C</h3><p><img src="https://telegraph.shansan.top/file/44538785765c4ca38b046.png" alt="image.png"></p><p>次中音谱号第四线表示中央 C</p><p><img src="https://telegraph.shansan.top/file/2ca6918f404cd498d6a55.png" alt="image.png"></p><h2 id="%E5%BA%A6" tabindex="-1">度</h2><ul><li>度：一个音名到另一个音名要经过的音名个数</li><li>两个相邻组同音名即为一个 8 度</li></ul><h3 id="%E5%85%AB%E5%BA%A6%E4%B8%8E%E5%8D%81%E4%BA%94%E5%BA%A6" tabindex="-1">八度与十五度</h3><ul><li>通过八度(8va)与十五度标记，快速找到键位</li></ul><p><img src="https://telegraph.shansan.top/file/47708b7126a6996107d53.png" alt="image.png"></p><h2 id="%E9%9F%B3%E7%AC%A6" tabindex="-1">音符</h2><ul><li>音高看符头，外观确认音符时间（几拍）</li></ul><p><img src="https://telegraph.shansan.top/file/6004d0e60faee97d4a092.png" alt="image.png"></p><p>另一种写法，为了美观</p><p><img src="https://telegraph.shansan.top/file/f27304f6fb1dcc4672409.png" alt="image.png"></p><h3 id="%E9%99%84%E7%82%B9%E9%9F%B3%E7%AC%A6" tabindex="-1">附点音符</h3><p><img src="https://telegraph.shansan.top/file/eda7de45e0f0ca1a2972d.png" alt="image.png"></p><h3 id="%E4%BC%91%E6%AD%A2%E7%AC%A6" tabindex="-1">休止符</h3><p><img src="https://telegraph.shansan.top/file/11c51bf6b6b4eb638bc6b.png" alt="image.png"></p><h2 id="%E9%9F%B3%E5%80%BC%E7%BB%84%E5%90%88%E6%B3%95-%E7%AC%A6%E5%B0%BE%E8%BF%9E%E6%88%90%E4%B8%80%E8%B5%B7%EF%BC%8C%E7%BB%84%E6%88%90%E4%B8%80%E6%8B%8D%EF%BC%8C%E6%96%B9%E4%BE%BF%E5%8C%BA%E4%B8%80%E6%8B%8D%E4%B8%8E%E5%8F%A6%E4%B8%80%E6%8B%8D%EF%BC%8C%E6%96%B9%E4%BE%BF%E7%9C%8B%E8%B0%B1" tabindex="-1">音值组合法-符尾连成一起，组成一拍，方便区一拍与另一拍，方便看谱</h2><ul><li>有一拍一拍的感觉，划分成了一个个音群</li><li>大于一拍的，就不连了</li></ul><h3 id="%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6%E4%B8%BA%E4%B8%80%E6%8B%8D%E7%9A%84%E9%9F%B3%E7%A8%8B%E7%BB%84%E5%90%88%E6%B3%95" tabindex="-1">四分音符为一拍的音程组合法</h3><p><img src="https://telegraph.shansan.top/file/f3681d8125450add6c7b6.png" alt="image.png"></p><h3 id="%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6%E4%B8%BA%E4%B8%80%E6%8B%8D%E7%9A%84%E7%BB%84%E5%90%88%E6%B3%95%EF%BC%8C%E4%BC%9A%E5%B0%86%E5%8F%AF%E4%BB%A5%E7%BB%84%E6%88%90%E4%B8%80%E5%B0%8F%E8%8A%82%E7%9A%84%E9%9F%B3%E7%AC%A6%E8%BF%9E%E5%9C%A8%E4%B8%80%E8%B5%B7" tabindex="-1">八分音符为一拍的组合法，会将可以组成一小节的音符连在一起</h3><p><img src="https://telegraph.shansan.top/file/ee6dd5e46f284bf45a097.png" alt="image.png"></p><h2 id="%E8%B0%83%E5%8F%B7" tabindex="-1">调号</h2><p><img src="https://telegraph.shansan.top/file/4dc629c26f06eff45555c.png" alt="image.png"></p><p>:::info<br>五线谱中用调号提示哪些音需要升降，不用在谱中再标记，上图，对应下图<br>:::</p><p><img src="https://telegraph.shansan.top/file/8ebd60552b9acd9b72ef5.png" alt="image.png"></p><h3 id="%E5%BF%AB%E9%80%9F%E8%AF%86%E5%88%AB%E4%BA%94%E7%BA%BF%E8%B0%B1%E8%B0%83%E5%8F%B7%E6%8A%80%E5%B7%A7" tabindex="-1">快速识别五线谱调号技巧</h3><p><img src="https://telegraph.shansan.top/file/f3b005538bafb2d562ab6.png" alt="image.png"></p><h4 id="%E4%B8%80%E3%80%81c-%E5%A4%A7%E8%B0%83%E4%B8%8E-f-%E5%A4%A7%E8%B0%83" tabindex="-1">一、C 大调与 F 大调</h4><p><img src="https://telegraph.shansan.top/file/7b8f514a4b611b091b37d.png" alt="image.png"></p><h4 id="%E4%BA%8C%E3%80%81%E5%8D%87%E5%8F%B7-%23-%E8%B0%83" tabindex="-1">二、升号 # 调</h4><p><img src="https://telegraph.shansan.top/file/64c6b6e379e8e514033f3.png" alt="image.png"></p><h4 id="%E4%B8%89%E3%80%81%E9%99%8D%E5%8F%B7-b-%E6%8E%89" tabindex="-1">三、降号 <em>b</em> 掉</h4><p><img src="https://telegraph.shansan.top/file/e3d278606afcc90db6162.png" alt="image.png"></p><h2 id="%E4%B8%80%E6%8B%8D%E5%AD%90%E5%85%B7%E4%BD%93%E5%A4%9A%E5%B0%91%E7%A7%92%EF%BC%9F" tabindex="-1">一拍子具体多少秒？</h2><p><img src="https://telegraph.shansan.top/file/3277ae4fc26da56e1e06c.png" alt="image.png"></p><p>下图：</p><ul><li>一个四分音符 1 秒</li><li>右边数字越大一般越快</li></ul><p><img src="https://telegraph.shansan.top/file/a1391287c35a7e0b7239e.png" alt="image.png"></p><p>下面的谱子大概在 33 秒内弹完</p><p><img src="https://telegraph.shansan.top/file/90592aaa0de337c893372.png" alt="image.png"></p><h3 id="%E9%87%8D%EF%BC%88chong%EF%BC%89%E5%8D%87-x-%E4%B8%8E%E9%87%8D%E9%99%8D-bb" tabindex="-1">重（chong）升 X 与重降 bb</h3><p><img src="https://telegraph.shansan.top/file/5938eb177d10aca2b61a0.png" alt="image.png"></p><h2 id="%E5%BA%A6---%E9%9F%B3%E7%A8%8B" tabindex="-1">度 - 音程</h2><ul><li>度又称音程，即两个音之间的距离</li><li>度与升降号无关</li></ul><p><img src="https://telegraph.shansan.top/file/c6e26c77be54502a15d0a.png" alt="image.png"></p><h3 id="%E9%9F%B3%E6%95%B0%E3%80%81%E5%A4%A7%E4%BA%8C%E5%BA%A6%E3%80%81%E5%B0%8F%E4%BA%8C%E5%BA%A6" tabindex="-1">音数、大二度、小二度</h3><ul><li>音数：相邻两个键的音数为 0.5，键包括黑键</li><li>同度数，近一点的为小度</li></ul><p><img src="https://telegraph.shansan.top/file/6feafca81bc9de209026f.png" alt="image.png"></p><h3 id="%E7%BA%AF%E5%85%AB%E5%BA%A6" tabindex="-1">纯八度</h3><ul><li>C1 - C1 为纯一度，音数为 0</li></ul><p><img src="https://telegraph.shansan.top/file/c1175e90f478421d9ecb0.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/bd580970d81d87c283371.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/ab592fa88ad27a01258b6.png" alt="image.png"></p><h3 id="%E8%87%AA%E7%84%B6%E9%9F%B3%E7%A8%8B-%26-%E5%8F%98%E5%8C%96%E9%9F%B3%E7%A8%8B" tabindex="-1">自然音程 &amp; 变化音程</h3><ul><li>自然音程：CDEFGAB 七个白键可以组成的所有音程</li><li>变化音程：自然音程外的音程</li></ul><p><img src="https://telegraph.shansan.top/file/a21d582d071d809e1fbf0.png" alt="image.png"></p><h3 id="%E5%8D%8F%E5%92%8C%E4%B8%8E%E4%B8%8D%E5%8D%8F%E5%92%8C%E9%9F%B3%E7%A8%8B" tabindex="-1">协和与不协和音程</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/344188/1678605622252-241a44f6-7840-45c4-bfa4-261c7aa880e3.png#averageHue=%23f0f0f0&amp;clientId=ufd89b554-8547-4&amp;from=paste&amp;height=199&amp;id=ud5b898ba&amp;originHeight=456&amp;originWidth=739&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=105478&amp;status=done&amp;style=none&amp;taskId=u9b1395b4-63d2-4be4-9428-bdd8a213b5e&amp;title=&amp;width=323.1999969482422" alt="image.png"><img src="https://telegraph.shansan.top/file/ba965e976c73f76d0e76c.png" alt="image.png"></p><h2 id="%E5%92%8C%E5%BC%A6" tabindex="-1">和弦</h2><ul><li>和音：两个音</li><li>和弦：三个音及以上构成</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/344188/1678605886982-5062795a-dff1-411a-8d35-b00c54de5cfe.png#averageHue=%23f5f5f5&amp;clientId=ufd89b554-8547-4&amp;from=paste&amp;height=198&amp;id=ucdc08d6b&amp;originHeight=833&amp;originWidth=1328&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=172093&amp;status=done&amp;style=none&amp;taskId=uf5512fd3-21f0-4282-8f57-c17c9209de2&amp;title=&amp;width=316.4000244140625" alt="image.png"><img src="https://telegraph.shansan.top/file/1a429f988c83be11dcca0.png" alt="image.png"></p><h3 id="%E5%B8%B8%E7%94%A8%E5%92%8C%E5%BC%A6" tabindex="-1">常用和弦</h3><h4 id="%E4%B8%89%E5%92%8C%E5%BC%A6" tabindex="-1">三和弦</h4><p>:::info<br>三个音，三度叠置构建<br>:::</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/344188/1678606739603-f293795d-e8f9-455c-81c8-cf575eba275d.png#averageHue=%23f0f0f0&amp;clientId=ufd89b554-8547-4&amp;from=paste&amp;height=199&amp;id=uae0b0cfd&amp;originHeight=749&amp;originWidth=1232&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=144446&amp;status=done&amp;style=none&amp;taskId=ua9dd5742-ee6b-40cb-a421-a64c7b3087c&amp;title=&amp;width=327.4000244140625" alt="image.png"><img src="https://telegraph.shansan.top/file/c985b1e6f15c98dbd4473.png" alt="image.png"></p><hr><p><img src="https://telegraph.shansan.top/file/fdcbe2b6b6e2c1a7eeae9.png" alt="image.png"></p><h5 id="%E4%B8%89%E5%92%8C%E5%BC%A6%E8%BD%AC%E4%BD%8D" tabindex="-1">三和弦转位</h5><p>:::warning</p><ul><li>第一转位：根音提高一个八度，三音变为低音</li><li>第二转位：在第一转位基础上，三音提高八度</li><li>命名：根音与三音的距离 ，低音与三音的距离<br>:::</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/344188/1678607331172-37d254a0-7a67-4847-a35d-4a8445442788.png#averageHue=%23f2f1f1&amp;clientId=ufd89b554-8547-4&amp;from=paste&amp;height=176&amp;id=uc46e9d74&amp;originHeight=441&amp;originWidth=809&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=57804&amp;status=done&amp;style=none&amp;taskId=u086ca99f-a23a-4dd3-b117-d09def30084&amp;title=&amp;width=322.20001220703125" alt="image.png"><img src="https://telegraph.shansan.top/file/e0ffe8612c0fd4f4a1109.png" alt="image.png"></p><hr><p><img src="https://telegraph.shansan.top/file/db3b1d325a06d44a147ea.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/55115699f128d076e5717.png" alt="image.png"></p><h4 id="%E4%B8%83%E5%92%8C%E5%BC%A6" tabindex="-1">七和弦</h4><p>:::info<br>由四个音组合构建<br>:::</p><p><img src="https://telegraph.shansan.top/file/8c7f46a7a4267d40cd66f.png" alt="image.png"></p><h5 id="%E4%B8%83%E5%92%8C%E5%BC%A6%E5%91%BD%E5%90%8D%EF%BC%88%E4%B8%8B%E5%B7%A6%E5%9B%BE%EF%BC%89%EF%BC%9A" tabindex="-1">七和弦命名（下左图）：</h5><p><img src="https://telegraph.shansan.top/file/b3e87597cf850c7cbc1ec.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/eec97c094943de67c96ab.png" alt="image.png"></p><hr><p><img src="https://telegraph.shansan.top/file/0b3ed5e78b151266f2b9b.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/834f1cb01fbd7db32b1b7.png" alt="image.png"></p><h5 id="%E4%B8%83%E5%92%8C%E5%BC%A6%E8%BD%AC%E4%BD%8D" tabindex="-1">七和弦转位</h5><p><img src="https://telegraph.shansan.top/file/c88ebd189aea0f7ee66ec.png" alt="image.png"></p><p><img src="https://telegraph.shansan.top/file/e74ea8bdaca80aa5280fd.png" alt="image.png"></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/music/">music</category>
      
      
      <category domain="https://yeshan333.github.io/tags/music/">music</category>
      
      
      <comments>https://yeshan333.github.io/2024/02/07/become-a-romantic-muscian/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Elixir 依赖 (deps) 调试的小技巧</title>
      <link>https://yeshan333.github.io/2023/08/12/elixir-deps-debug-skills/</link>
      <guid>https://yeshan333.github.io/2023/08/12/elixir-deps-debug-skills/</guid>
      <pubDate>Sat, 12 Aug 2023 16:15:40 GMT</pubDate>
      
      <description>Elixir 依赖 (deps) 调试的小技巧</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>许久未更博客，“微有所感”，小更一篇。</p><p>最近使用 Elixir 有点多, 经常需要观察一些依赖 (Deps) 的实现, 比如想加个日志打印点 <code>IO.inspect</code> 啥的观察下某个变量，才能更好的理解某个 Elixir 的依赖。这里介绍下一些调试的方式:</p><p>这里以 <a href="https://github.com/yeshan333/ex_integration_coveralls">yeshan333/ex_integration_coveralls</a> 为例子.</p><p>我们先 clone 项目到本地:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yeshan333/ex_integration_coveralls.git</span><br><span class="line">cd ex_integration_coveralls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉一下依赖</span></span><br><span class="line">mix deps.get</span><br></pre></td></tr></table></figure><p>比如, 我们想看一下代码扫描的依赖 <code>credo</code> 这个扫描规则 <code>Credo.Check.Design.TagTODO</code> 的实现大概是怎么样的.</p><h2 id="1%E3%80%81mix-deps.compile" tabindex="-1">1、mix deps.compile</h2><p>找到它的实现 <code>deps/credo/lib/credo/check/design/tag_todo.ex</code>, 我们想要观察下变量 issue_meta 实际是怎么样的, <code>IO.inspect</code> 一下.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@doc</span> <span class="literal">false</span></span><br><span class="line"><span class="variable">@impl</span> <span class="literal">true</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(%<span class="title class_">SourceFile</span>&#123;&#125; = source_file, params) <span class="keyword">do</span></span><br><span class="line">  issue_meta = <span class="title class_">IssueMeta</span>.<span class="keyword">for</span>(source_file, params)</span><br><span class="line">  include_doc? = <span class="title class_">Params</span>.get(params, <span class="symbol">:include_doc</span>, __MODULE__)</span><br><span class="line"></span><br><span class="line">  <span class="title class_">IO</span>.inspect(issue_meta, <span class="symbol">label:</span> <span class="string">&quot;观察下 issue_meta 放的什么&quot;</span>)</span><br><span class="line"></span><br><span class="line">  source_file</span><br><span class="line">  |&gt; <span class="title class_">TagHelper</span>.tags(<span class="variable">@tag_name</span>, include_doc?)</span><br><span class="line">  |&gt; <span class="title class_">Enum</span>.map(&amp;issue_for(issue_meta, &amp;<span class="number">1</span>))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/08/12/pPuQUAK.png" alt="加入观察点"></p><p>好了，接下来我们重编译一下 credo 模块即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ mix deps.compile credo # 重编译下 credo</span><br><span class="line">==&gt; credo</span><br><span class="line">Compiling 1 file (.ex)</span><br></pre></td></tr></table></figure><p>调用下 credo 即可观察到我们埋下的变量打印点信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix credo</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/08/12/pPuQv34.png" alt="埋点效果"></p><p>这样每次添加依赖观察点之后, 我们只需要 recompile 下依赖即可.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果想废弃掉我们对依赖的修改，只需要重新拉去依赖即可</span></span><br><span class="line">mix deps.clean credo</span><br><span class="line">mix deps.get</span><br></pre></td></tr></table></figure><h2 id="2%E3%80%81mix.exs-%E4%BD%BF%E7%94%A8-%3Apath-%E5%BC%95%E7%94%A8%E4%BE%9D%E8%B5%96" tabindex="-1">2、mix.exs 使用 :path 引用依赖</h2><p>上面的方法经常需要手动重新编译指定的依赖, 这里还有个方式可以在我们使用任意 <a href="https://hexdocs.pm/mix/1.15.0/api-reference.html#mix-tasks">Mix Tasks</a> 的时候，依赖都会<strong>自动重新编译</strong>, 我们只需要编译 <code>mix.exs</code> 将依赖指定为本地即可, 我们使用 path 指定依赖来源:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">:credo</span>, <span class="string">&quot;~&gt; 1.6&quot;</span>, <span class="symbol">only:</span> [<span class="symbol">:dev</span>, <span class="symbol">:test</span>], <span class="symbol">runtime:</span> <span class="literal">false</span>, <span class="symbol">path:</span> <span class="string">&quot;deps/credo&quot;</span>&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/08/12/pPul7xH.png" alt="依赖来源为本地"></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/Elixir/">Elixir</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Elixir/">Elixir</category>
      
      <category domain="https://yeshan333.github.io/tags/Deps/">Deps</category>
      
      <category domain="https://yeshan333.github.io/tags/Mix/">Mix</category>
      
      
      <comments>https://yeshan333.github.io/2023/08/12/elixir-deps-debug-skills/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>(译) Server-Sent Events: the alternative to WebSockets you should be using</title>
      <link>https://yeshan333.github.io/2023/03/11/sse-websocket/</link>
      <guid>https://yeshan333.github.io/2023/03/11/sse-websocket/</guid>
      <pubDate>Sat, 11 Mar 2023 14:26:29 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文地址: <a href="https://germano.dev/sse-websockets/">https://germano.dev/sse-websockets/</a><br>作者: <a href="https://github.com/tyrion">Germano Gabbianelli</a></p></blockquote><p>当开发实时 web 应用时，WebSockets 可能是我们首先想到的。然而，Server Sent Events (SSE) 是通常会是一种更简单的替代方案。</p><h2 id="1.-%E5%BA%8F%E8%A8%80" tabindex="-1">1. 序言</h2><p>最近我对实现实时 Web 应用程序的一些最佳方式很感兴趣。也就是一个应用程序包含一个或多个组件，这些组件会根据某些外部事件自动实时更新。这种应用程序的最常见例子是消息服务，我们希望每条消息都能立即广播到所有已经连接的人，而不需要进行任何的用户交互。</p><p>经过一些研究，我偶然发现了 Martin Chaov 的一个<a href="https://www.youtube.com/watch?v=n9mRjkQg3VE">精彩分享</a>，其比较了 Server Sent Events、WebSockets 和 Long Polling 几个技术的优劣。这个演讲也有篇对应的博客文章来辅助阅读 <a href="https://www.smashingmagazine.com/2018/02/sse-websockets-data-flow-http2/#comments-sse-websockets-data-flow-http2">Using SSE Instead Of WebSockets For Unidirectional Data Flow Over HTTP/2</a>，内容有趣而且非常有启发性。我真的很推荐大家去看一下。然而，它是 2018 年的内容，一些细节可能已经发生了改变，因此我决定写下这篇文章。</p><h2 id="2.-websockets%3F" tabindex="-1">2. WebSockets?</h2><p><a href="https://tools.ietf.org/html/rfc6455">WebSockets</a> 可以在浏览器和服务器之间创建 <strong>双向低延迟</strong> 的通信通道。</p><p>这使得它在某些场景中非常适用：比如<strong>双向</strong>通信的多人游戏，即浏览器和服务器都会一直在通道上发送消息，需要将这些消息以较<strong>低延迟</strong>进行传递。</p><p>在一款第一人称射击游戏中，浏览器可以持续地传输玩家的位置，同时从服务器接收所有其他玩家位置的更新。此外，我们肯定希望这些消息能够以尽可能花费少的开销进行传递，以避免游戏迟缓感，提升用户体验。</p><p>这与传统的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a> <a href="https://en.wikipedia.org/wiki/Request%E2%80%93response">请求-响应模型</a>正好相反，其中浏览器始终是发起通信的一方，每个消息都具有显著的开销，因为要建立 <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP 连接</a>和传输 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP 头部</a>信息。</p><p>然而，许多应用程序的实现不需要这么严格的要求。即使在实时应用程序中，<strong>数据流也通常是不对称的</strong>：服务器发送了大部分的消息，而客户端大多只是负责监听，并且只是偶尔发送一些更新。例如，在实时的聊天应用程序中，用户可能会连接到许多聊天房间，每个房间都有几十个或几百个参与者。因此，接收到的消息数量远远超过发送的消息数量。</p><h2 id="3.-websockets-%E7%9A%84%E9%97%AE%E9%A2%98%E5%9C%A8%E4%BA%8E%E5%93%AA%E9%87%8C" tabindex="-1">3. WebSockets 的问题在于哪里</h2><p>双向的通信通道和低延迟是非常好的功能特性。那么，我们为什么还要继续寻找其他解决方案呢？</p><p>WebSockets 有一个主要缺点：<strong>它们不完全基于 HTTP 工作</strong>。它们需要自己的 TCP 连接。它们只需要使用 HTTP 建立连接，然后将其升级为一个独立的 TCP 连接，在其上可以使用 WebSocket 协议。</p><p>这可能看起来不是很重要，但这意味着 WebSockets 不能从任何已有的 HTTP 特性中受益。即：</p><ul><li>不支持压缩</li><li>不支持 HTTP/2 的多路复用</li><li>可能存在代理问题</li><li>无跨站点劫持保护</li></ul><p>至少，在 WebSocket 协议首次发布时是这种情况。现在，有一些补充标准试图改善这种情况。让我们更详细地了解当前的情况。</p><p>注意：如果您不关心细节，请随意跳过本节其余部分，直接转到 Server-Sent Events 或 demo 部分。</p><h3 id="3.1-%E5%8E%8B%E7%BC%A9-(compression)" tabindex="-1">3.1 压缩 (Compression)</h3><p>在标准的连接上，每个浏览器都支持 <a href="https://en.wikipedia.org/wiki/HTTP_compression">HTTP 压缩技术</a>，在服务器端启用也非常容易，只需在所选择的反向代理中开启切换一下开关。但是，对于使用 WebSockets 的情况这更加复杂，因为没有请求和响应，需要压缩各个独立的 WebSocket 帧 (frames)。</p><p><a href="https://tools.ietf.org/html/rfc7692">RFC 7692</a>，于 2015 年 12 月发布，试图通过定义 “WebSocket 压缩扩展” 来改善这种情况。然而，据我所知，没有任何流行的反向代理服务（如 nginx、caddy）实现了这一功能，因此无法透明地启用压缩。</p><p>这意味着，如果要使用压缩，则必须在后端直接实现。幸运的是，我找到了一些支持 RFC 7692 的库。例如，Python 的 <a href="https://websockets.readthedocs.io/en/stable/extensions.html">websockets</a> 和 <a href="https://github.com/python-hyper/wsproto/">wsproto</a> 库，以及 nodejs 的 <a href="https://github.com/websockets/ws">ws</a> 库。</p><p>然而，后者并不建议使用该功能：</p><blockquote><p>该扩展在服务器上默认禁用，在客户端上默认启用。它在性能和内存消耗方面增加了显著的开销，因此我们建议只在确实需要时才启用它。</p><p>请注意，Node.js 在高性能压缩方面存在各种问题，尤其是在 Linux 上增加并发性可能会导致灾难性的内存碎片和性能下降。</p></blockquote><p>在浏览器方面，Firefox 从<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/37#networking"> 37 版本</a>开始支持 WebSocket 的压缩。<a href="https://chromestatus.com/feature/6555138000945152">Chrome 也支持</a>。然而，显然 Safari 和 Edge 不支持。</p><p>我没有验证移动设备上的支持情况如何。</p><h3 id="3.2-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-(multiplexing)" tabindex="-1">3.2 多路复用 (Multiplexing)</h3><p><a href="https://tools.ietf.org/html/rfc7540">HTTP/2</a> 引入了对多路复用的支持，意味着向同一主机发送的多个请求/响应对不再需要单独的 TCP 连接。相反，它们可以共享同一个 TCP 连接，每个请求在其自己独立的 <a href="https://tools.ietf.org/html/rfc7540#section-5">HTTP/2 流</a>上运行。</p><p>这也得到了<a href="https://caniuse.com/http2">每个浏览器的支持</a>，而且在大多数反向代理上启用它也非常容易。</p><p>相比之下，WebSocket 协议默认不支持多路复用。向同一主机发送多个 WebSocket 将各自打开自己的独立的 TCP 连接。如果要使两个独立的 WebSocket 终端共享它们的基础连接，您必须自己在应用程序代码中添加多路复用能力支持。</p><p><a href="https://tools.ietf.org/html/rfc8441">RFC 8441</a> 于 2018 年 9 月发布，尝试通过添加“使用 HTTP/2 引导 WebSocket”的支持来解决这个问题。它已在 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1434137">Firefox</a> 和 <a href="https://chromestatus.com/feature/6251293127475200">Chrome</a> 中实现。然而，据我所知，没有主要的反向代理服务实现了它。不幸的是，我也找不到 Python 或 Javascript 的任何实现。</p><h3 id="3.3-%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98-(issues-with-proxies)" tabindex="-1">3.3 代理问题 (Issues with proxies)</h3><p>没有显式支持 WebSockets 的 HTTP 代理可能会阻止未加密的 WebSocket 连接正常工作。这是因为代理无法解析 WebSocket 帧 (frames) 并关闭连接。</p><p>但是，通过 HTTPS 发起的 WebSocket 连接应该不受此问题的影响，因为帧将被加密，代理应该只是转发所有内容而不会关闭连接。</p><p>要了解更多信息，请参见 Peter Lubbers 的“<a href="https://www.infoq.com/articles/Web-Sockets-Proxy-Servers/">HTML5 Web Sockets 如何与代理服务器交互</a>”。</p><h3 id="3.4-%E8%B7%A8%E7%AB%99-websocket-%E5%8A%AB%E6%8C%81" tabindex="-1">3.4 跨站 WebSocket 劫持</h3><p>WebSocket 连接没有受到同源策略的保护，这使它们容易受到跨站 WebSocket 劫持攻击。</p><p>因此，<strong>如果 WebSocket 后端没有使用任何客户端缓存的身份验证方式（例如 cookie或 HTTP 身份验证），它们必须检查 Origin 头的正确性</strong>。</p><p>我在这里不会详细讨论，但是请考虑这个简短的例子。假设一个比特币交易所使用 WebSockets 提供其交易服务。当您登录时，交易所可能设置一个 cookie 来保持您的会话在一定时间内活动。现在，攻击者要偷取你珍贵的比特币所要做的就是让你访问她控制的站点，然后简单地打开一个 WebSocket 连接到交易所。恶意连接将被自动验证，除非交易所检查 <strong>Origin</strong> 头并阻止来自未授权域的连接。</p><p>我建议您阅读 Christian Schneider 关于<a href="https://christian-schneider.net/CrossSiteWebSocketHijacking.html#main">跨站 WebSocket 劫持</a>的精彩文章以了解更多信息。</p><h2 id="4.-server-sent-events" tabindex="-1">4. Server-Sent Events</h2><p>现在我们对 WebSockets 有了更多的了解，包括它们的优点和缺点，让我们学习一下 Server-Sent Events 并了解它们是否是一个有效的替代方案。</p><p><a href="https://html.spec.whatwg.org/#server-sent-events">Server-Sent Events</a> 使服务器能够随时向客户端发送低延迟的推送事件。它们使用非常简单的协议，并且是 <a href="https://html.spec.whatwg.org/#server-sent-events">HTML 标准</a>的一部分，受到<a href="https://html.spec.whatwg.org/#server-sent-events">每个浏览器的支持</a>。</p><p>与 WebSockets 不同，<strong>Server-Sent Events 仅支持向客户端单向信息流动</strong>。这使得它们不适合一些需要处理特定场景的应用程序，即那些需要既是双向又是低延迟的通信通道，比如实时游戏。然而，这些权衡取舍也是它们相对于 WebSockets 的主要优势，因为单向流动使得 <strong>Server-Sent Events 可以在 HTTP 之上无缝的工作，而无需自定义协议</strong>。这使它们自动获得了所有 HTTP 的功能，例如压缩或 HTTP/2 多路复用能力，使它们成为大多数实时应用程序的非常方便的选择，其中大部分数据都来自服务器，并且由于 HTTP 头部的一些开销而导致一些请求的开销是可以接受的。</p><p>协议非常简单。它使用 <code>text/event-stream</code> 作为内容类型 (Content-Type) 和消息的形式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: First message</span><br><span class="line"></span><br><span class="line">event: join</span><br><span class="line">data: Second message. It has two</span><br><span class="line">data: lines, a custom event type and an id.</span><br><span class="line">id: 5</span><br><span class="line"></span><br><span class="line">: comment. Can be used as keep-alive</span><br><span class="line"></span><br><span class="line">data: Third message. I do not have more data.</span><br><span class="line">data: Please retry later.</span><br><span class="line">retry: 10</span><br></pre></td></tr></table></figure><p>每个事件由两个换行符（\n）分隔，并由多个可选字段组成。</p><p>可重复使用在多处出现的字段 <code>data</code> 通常用于表示事件数据的内容。</p><p>字段 <code>event</code> 允许指定自定义事件类型，如下一节所示，它可以用于在客户端上触发不同的事件处理程序。</p><p>另外两个字段 <code>id</code> 和 <code>retry</code> 用于配置自动重连机制的行为。这是 <code>Server-Sent Events</code> 最有趣的特性之一。它确保在连接断开或被服务器关闭时，无需用户干预，客户端将自动尝试重新连接。</p><p><code>retry</code> 字段用于指定在尝试重新连接之前等待的最短时间（以秒为单位）。当服务器连接了太多客户端时，它也可以在立即关闭客户端连接之前发送该字段以减轻其负载。</p><p><code>id</code> 字段将标识符与当前事件相关联。在重新连接时，客户端将使用 <code>Last-Event-ID</code> HTTP 请求头将上次看到的 id 传输给服务器。这使得我们可以从正确的失效点恢复通讯流。</p><p>最后，服务器可以通过返回 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204">HTTP 204 No Content</a> 响应来完全停止自动重连机制。</p><h2 id="5.-%E6%9D%A5%E7%82%B9%E5%AE%9E%E9%99%85%E4%BB%A3%E7%A0%81-demo" tabindex="-1">5. 来点实际代码 Demo</h2><p>现在，让我们将所学的内容付诸实践。在本节中，我们将使用 Server-Sent Events 和 WebSockets 实现一个简单的服务。这将使我们能够实际比较这两种技术。我们将了解到使用每种技术开始的难易程度，并手动验证前面讨论的功能。</p><p>我们将使用 Python 作为后端，Caddy 作为反向代理，当然还需要一些 JavaScript 代码用于前端。</p><p>为了让我们的示例尽可能简单，我们的后端将只包含两个端点 (endpoints)，每个端点都会流式传输唯一的随机数字序列。从 /sse1 和 /sse2 进行 Server-Sent Events 访问，从 /ws1 和 /ws2 进行 WebSockets 的访问。我们的前端将仅由一个 index.html 文件组成，其中包含一些 JavaScript 代码，可以让我们启动和停止 WebSockets 和 Server-Sent Events 连接。</p><p><a href="https://github.com/tyrion/sse-websockets-demo">示例代码 - GitHub</a></p><h3 id="5.1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" tabindex="-1">5.1 反向代理</h3><p>使用反向代理，例如 Caddy 或 nginx，对于这种小例子中非常有用。它让我们很容易地开启很多我们所选择的后端可能缺少的功能。</p><p>更具体地说，它允许我们轻松地提供静态文件并自动压缩 HTTP 响应；提供 HTTP/2 支持，即使我们的后端仅支持 HTTP/1，也可以让我们受益于多路复用；最后还可以进行负载均衡。</p><p>我选择了Caddy，因为它可以自动为我们管理HTTPS证书，让我们跳过一个非常乏味的任务，尤其是对于一个快速实验 Demo。</p><p>基本配置位于项目根目录下的 <code>Caddyfile</code> 中，大致如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1 ::1</span><br><span class="line"></span><br><span class="line">root ./static</span><br><span class="line">file_server browse</span><br><span class="line"></span><br><span class="line">encode zstd gzip</span><br></pre></td></tr></table></figure><p>这指示 Caddy 监听本地接口的 80 和 443 端口，启用 HTTPS 支持并生成自签名证书。它还支持压缩和提供访问 <code>static</code> 目录下的静态文件。</p><p>最后一步，我们需要让 Caddy 代理到我们的后端服务。Server-Sent Events只是普通的HTTP请求，所以这里没有什么特别的:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverse_proxy /sse1 127.0.1.1:6001</span><br><span class="line">reverse_proxy /sse2 127.0.1.1:6002</span><br></pre></td></tr></table></figure><p>要代理 Websocket，需要反向代理显式支持。幸运的是，Caddy 可以毫无障碍地处理这个问题，尽管配置有点冗长:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@websockets &#123;</span><br><span class="line">    header Connection *Upgrade*</span><br><span class="line">    header Upgrade    websocket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle /ws1 &#123;</span><br><span class="line">    reverse_proxy @websockets 127.0.1.1:6001</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle /ws2 &#123;</span><br><span class="line">    reverse_proxy @websockets 127.0.1.1:6002</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后使用如下命令启动 Caddy:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo caddy start</span><br></pre></td></tr></table></figure><h3 id="5.2-%E5%89%8D%E7%AB%AF" tabindex="-1">5.2 前端</h3><p>让我们从前端开始，比较 WebSockets 和 Server-Sent Events 的 JavaScript API。</p><p>WebSocket 的JavaScript API非常易于使用。首先，我们需要创建一个新的 WebSocket 对象，传递服务器的 URL。这里，<code>wss</code> 表示连接将在 HTTPS 上进行。如上所述，强烈建议使用 HTTPS 以避免代理问题。</p><p>然后，我们应该监听一些可能的事件（即打开 <code>open</code>、消息 <code>message</code>、关闭 <code>close</code>、错误 <code>error</code>），通过设置 <code>on$event</code> 属性或使用 <code>addEventListener()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://localhost/ws&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WebSocket open&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;message&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>));</span><br></pre></td></tr></table></figure><p>JavaScript 的 Server-Sent Events API 非常类似。它要求我们创建一个新的 EventSource 对象，传递服务器的 URL，然后可以通过相同的方式订阅事件。</p><p>主要的区别在于，我们还可以订阅自定义事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> es = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;https://localhost/sse&quot;</span>);</span><br><span class="line"></span><br><span class="line">es.<span class="property">onopen</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EventSource open&quot;</span>);</span><br><span class="line"></span><br><span class="line">es.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;message&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event listener for custom event</span></span><br><span class="line"><span class="comment">// 订阅自定义事件</span></span><br><span class="line">es.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;join&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;e.data&#125;</span> joined`</span>))</span><br></pre></td></tr></table></figure><p>我们现在可以使用所有这些关于 JS APIs 的新知识来构建我们实际的前端。</p><p>为了让事情尽可能简单，它只包含一个 index.html 文件，里面有一堆用来启动和停止 WebSockets 和 EventSources 的按钮。像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startWS(1)&quot;</span>&gt;</span>Start WS1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWS(1)&quot;</span>&gt;</span>Close WS1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startWS(2)&quot;</span>&gt;</span>Start WS2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWS(2)&quot;</span>&gt;</span>Close WS2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要多个 WebSocket/EventSource，这样我们就可以测试 HTTP/2 多路复用是否有效以及打开了多少连接。</p><p>现在让我们实现这些按钮工作所需的两个函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wss = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startWS</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (wss[i] !== <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ws = wss[i] = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://localhost/ws&quot;</span>+i);</span><br><span class="line">  ws.<span class="property">onopen</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WS open&quot;</span>);</span><br><span class="line">  ws.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">  ws.<span class="property">onclose</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">closeWS</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">closeWS</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (wss[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Closing websocket&quot;</span>);</span><br><span class="line">    websockets[i].<span class="title function_">close</span>();</span><br><span class="line">    <span class="keyword">delete</span> websockets[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Server-Sent Events 的前端代码几乎相同。唯一的区别是 <code>onerror</code> 事件处理程序，它之所以存在，是因为一旦发生错误，浏览器就会记录一条消息，并尝试进行重连。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ess = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startES</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ess[i] !== <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> es = ess[i] = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;https://localhost/sse&quot;</span>+i);</span><br><span class="line">  es.<span class="property">onopen</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ES open&quot;</span>);</span><br><span class="line">  es.<span class="property">onerror</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ES error&quot;</span>, e);</span><br><span class="line">  es.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">closeES</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ess[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Closing EventSource&quot;</span>);</span><br><span class="line">    ess[i].<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">delete</span> ess[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5.3-%E5%90%8E%E7%AB%AF" tabindex="-1">5.3 后端</h3><p>现在我们来编写后端代码。我们将使用 Python 的异步 Web 框架 <a href="https://www.starlette.io/">Starlette</a>，使用 <a href="https://www.uvicorn.org/">Uvicorn</a> 作为服务器。为了使事情模块化，我们将分离数据生成过程和端点 (endpoints) 的实现。</p><p>我们希望两个端点中的每一个都生成一系列唯一的随机数。为了实现这一点，我们将使用流 ID（即1或2）作为<a href="https://en.wikipedia.org/wiki/Random_seed">随机种子 (random seed)</a>的一部分。</p><p>理想情况下，我们也希望我们的流是可恢复的。也就是说，如果连接中断，客户端应该能够从它收到的最后一条消息恢复流，而不是重新读取整个序列。为了实现这一点，我们将为每个消息/事件分配一个 ID，并在生成每个消息之前使用它来初始化随机种子，以及流 ID。在我们的例子中，ID 将只是从 0 开始的计数器 (Counter)。</p><p>有了这些，我们就可以编写 get_data 函数来生成我们的随机数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">stream_id: <span class="built_in">int</span>, event_id: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    rnd = random.Random()</span><br><span class="line">    rnd.seed(stream_id * event_id)</span><br><span class="line">    <span class="keyword">return</span> rnd.randrange(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>现在我们来写出实际的 endpoints。</p><p>Starlette 的入门非常简单。我们只需要初始化一个应用程序 <code>app</code>，然后注册一些路由给它:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"></span><br><span class="line">app = Starlette()</span><br></pre></td></tr></table></figure><p>为了编写 WebSocket 服务，我们选择的 web 服务器和框架都必须有明确的支持。幸运的是，Uvicorn 和 Starlette 可以胜任这个任务，编写 WebSocket 端点与编写普通路由一样方便。</p><p>这就是我们需要的所有代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> websockets.exceptions <span class="keyword">import</span> WebSocketException</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.websocket_route(<span class="params"><span class="string">&quot;/ws&#123;id:int&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">websocket_endpoint</span>(<span class="params">ws</span>):</span><br><span class="line">    <span class="built_in">id</span> = ws.path_params[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> ws.accept()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count():</span><br><span class="line">            data = &#123;<span class="string">&quot;id&quot;</span>: i, <span class="string">&quot;msg&quot;</span>: get_data(<span class="built_in">id</span>, i)&#125;</span><br><span class="line">            <span class="keyword">await</span> ws.send_json(data)</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> WebSocketException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;client disconnected&quot;</span>)</span><br></pre></td></tr></table></figure><p>上述代码将确保每当浏览器请求以 <code>/ws</code> 开头并后跟一个数字的路径时（例如 <code>/ws1</code>、<code>/ws2</code>），就会调用 websocket_endpoint 函数。</p><p>然后，对于每个匹配的请求，它将等待 WebSocket 连接建立，随后开始无限循环每秒发送随机数字，编码为 JSON 有效载荷。</p><p>对于 Server-Sent Events，代码非常相似，除了不需要任何特殊的框架支持。在这种情况下，我们注册一个路由，匹配以 /sse 开头并以数字结尾的 URL（例如 <code>/sse1</code>、<code>/sse2</code>）。但是，这次我们的端点只是设置适当的标头并返回 <code>StreamingResponse</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/sse&#123;id:int&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">sse_endpoint</span>(<span class="params">req</span>):</span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(</span><br><span class="line">        sse_generator(req),</span><br><span class="line">        headers=&#123;</span><br><span class="line">            <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/event-stream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><code>StreamingResponse</code> 是 <code>Starlette</code> 提供的一个实用程序类，它接受一个生成器，并将其输出流式传输到客户端，保持连接处于打开状态。</p><p>下面为 <code>sse_generator</code> 的实现代码，几乎与 WebSocket 端点相同，只是消息按照 Server-Sent Events 协议进行编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">sse_generator</span>(<span class="params">req</span>):</span><br><span class="line">    <span class="built_in">id</span> = req.path_params[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count():</span><br><span class="line">        data = get_data(<span class="built_in">id</span>, i)</span><br><span class="line">        data = <span class="string">b&quot;id: %d\ndata: %d\n\n&quot;</span> % (i, data)</span><br><span class="line">        <span class="keyword">yield</span> data</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们完成了!</p><p>最后，假设我们将所有代码放在名为 <code>server.py</code> 的文件中，我们可以使用 Uvicorn 启动我们的后端 endpoints，如下所示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">uvicorn --host 127.0.1.1 --port 6001 server:app &amp;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">uvicorn --host 127.0.1.1 --port 6002 server:app &amp;</span></span><br></pre></td></tr></table></figure><h2 id="6.-%E5%BD%A9%E8%9B%8B%3A-sse-%E5%BE%88%E6%A3%92%E7%9A%84%E7%89%B9%E6%80%A7" tabindex="-1">6. 彩蛋: SSE 很棒的特性</h2><p>好了，现在让我们来总结一下，实现我们之前吹嘘的那些漂亮的功能是多么容易。</p><p>可以通过修改端点中的几行代码来启用压缩:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@@ -<span class="number">32</span>,<span class="number">10</span> +<span class="number">33</span>,<span class="number">12</span> @@ async def websocket_endpoint(<span class="params">ws</span>):</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">sse_generator</span>(<span class="params">req</span>):</span><br><span class="line">     <span class="built_in">id</span> = req.path_params[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">+    stream = zlib.compressobj()</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count():</span><br><span class="line">         data = get_data(<span class="built_in">id</span>, i)</span><br><span class="line">         data = <span class="string">b&quot;id: %d\ndata: %d\n\n&quot;</span> % (i, data)</span><br><span class="line">-        <span class="keyword">yield</span> data</span><br><span class="line">+        <span class="keyword">yield</span> stream.compress(data)</span><br><span class="line">+        <span class="keyword">yield</span> stream.flush(zlib.Z_SYNC_FLUSH)</span><br><span class="line">         <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -<span class="number">47</span>,<span class="number">5</span> +<span class="number">50</span>,<span class="number">6</span> @@ async def sse_endpoint(<span class="params">req</span>):</span></span><br><span class="line">             <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/event-stream&quot;</span>,</span><br><span class="line">             <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">             <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">+            <span class="string">&quot;Content-Encoding&quot;</span>: <span class="string">&quot;deflate&quot;</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><p>然后，我们可以检查开发者工具 (DevTools) 来验证一切是否按预期工作:</p><p><img src="https://s1.ax1x.com/2023/03/11/ppK8x3T.png" alt="Compression"></p><p>因为 Cadd y支持 HTTP/2，所以多路复用是默认启用的。我们可以再次使用开发者工具来确认所有 SSE 请求都使用同一个连接:</p><p><img src="https://s1.ax1x.com/2023/03/11/ppKGFER.png" alt="Multiplexing"></p><p><strong>自动重连</strong>: 在发生意外连接错误时自动重新连接很简单，只需在后端代码中读取 <code>[Last-Event-ID](https://html.spec.whatwg.org/multipage/server-sent-events.html#last-event-id)</code> 头信息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;     <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count():</span><br><span class="line">---</span><br><span class="line">&gt;     start = <span class="built_in">int</span>(req.headers.get(<span class="string">&quot;last-event-id&quot;</span>, <span class="number">0</span>))</span><br><span class="line">&gt;     <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count(start):</span><br></pre></td></tr></table></figure><p>前端代码不需要任何改动。</p><p>我们可以通过启动到 SSE 端点的连接，然后关闭 uvicorn 来测试它是否正常工作。连接会断开，但浏览器会自动尝试重新连接。因此，如果重新启动服务器，我们会看到流从中断的地方恢复!</p><p>请注意流是如何从消息 <code>243</code> 恢复的。感觉就像魔法🔥</p><p><img src="https://germano.dev/assets/static/sse-auto-reconnect.7900e78.b190f19887f331ddb680b6ba6bc4921e.gif" alt="Automatic reconnection"></p><h2 id="7.-%E6%80%BB%E7%BB%93" tabindex="-1">7. 总结</h2><p>WebSockets 是建立在 HTTP 和 TCP 之上的大型机制，提供了一套极其特定的功能，即双向低延迟通信。</p><p>为了实现这一点，它们引入了许多复杂性，最终使得客户端和服务器实现比完全基于 HTTP 的解决方案更加复杂。</p><p>这些复杂性和限制已经在新的规范（<a href="https://tools.ietf.org/html/rfc7692">RFC 7692</a>，<a href="https://tools.ietf.org/html/rfc8441">RFC 8441</a>）中得到了解决，并将逐渐在客户端和服务器库中实现。</p><p>然而，即使在没有技术缺陷的情况下，WebSockets 仍然是一项相当复杂的技术，涉及大量额外的客户端和服务器代码。因此，您应仔细考虑是否值得增加复杂性，或者是否可以通过更简单的解决方案（如 Server-Sent Events）去解决问题。</p><hr><p>就这些内容了，朋友们！希望你们觉得这篇文章有趣，也能从中学到一些新东西。</p><p>如果你想尝试一下 Server-Sent Events 和 WebSockets，可以自由地在 GitHub 上查看<a href="https://github.com/tyrion/sse-websockets-demo">演示 Demo 代码</a>。</p><p>我也鼓励你们阅读下 <a href="https://html.spec.whatwg.org/#server-sent-events">SSE 的规范</a>，因为它解释得非常清晰，包含了很多示例。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content:encoded>
      
      
      <category domain="https://yeshan333.github.io/categories/SSE/">SSE</category>
      
      
      <category domain="https://yeshan333.github.io/tags/Python/">Python</category>
      
      <category domain="https://yeshan333.github.io/tags/Websocket/">Websocket</category>
      
      <category domain="https://yeshan333.github.io/tags/SSE/">SSE</category>
      
      
      <comments>https://yeshan333.github.io/2023/03/11/sse-websocket/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
